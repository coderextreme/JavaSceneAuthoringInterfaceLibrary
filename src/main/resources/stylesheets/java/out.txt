Buildfile: C:\x3d-code\www.web3d.org\x3d\stylesheets\java\build.xml

compile.examples:
     [echo] compile.examples complete

run.examples:
     [java] ===========================================
     [java] SpecialTest section:
     [java] justify 1="BEGIN" "MIDDLE"
     [java] justify 2="END" "MIDDLE"
     [java] justify field independence test #1 pass = true
     [java] justify field independence test #2 pass = true
     [java] pixelTexture.getImage=[0, 0, 0], getWidth=0, getHeight=0, getNumberComponents=0, getPixelsString()=
     [java] pixelTexture.getImage=[1, 3, 4, -16777080, 16711816, 65416], getWidth=1, getHeight=3, getNumberComponents=4, getPixelsString()=0xFF000088 0x00FF0088 0x0000FF88, isValid()=true, validate() diagnostic=''
     [java] ===========================================
     [java] ConfigurationProperties.getClassPath()=C:\x3d-code\www.web3d.org\x3d\stylesheets\java\lib\X3dC14n.jar;C:\x3d-code\www.web3d.org\x3d\stylesheets\java\lib\exificient-gui-jar-with-dependencies.jar;C:\x3d-code\www.web3d.org\x3d\stylesheets\java\lib\jdom.jar;C:\x3d-code\www.web3d.org\x3d\stylesheets\java\lib\log4j-1.2.15.jar;C:\x3d-code\www.web3d.org\x3d\stylesheets\java\lib\nagasena-rta.jar;C:\x3d-code\www.web3d.org\x3d\stylesheets\java\lib\nagasena.jar;C:\x3d-code\www.web3d.org\x3d\stylesheets\java\lib\saxon9he.jar;C:\x3d-code\www.web3d.org\x3d\stylesheets\java\jars\X3DJSAIL.3.3.classes.jar
     [java] ===========================================
     [java] X3DUnifiedObjectModelJaxbTests.x3duomInspectionsTest() start...
     [java] X3DUnifiedObjectModelJaxbTests.x3duomInspectionsTest() complete
     [java] ===========================================
     [java] X3DJSAIL version date: 13 January 2020
     [java] ===========================================
     [java] HelloWorldProgram() Constructor
     [java] ===========================================
     [java] buildModelSceneGraph(); // construct this model, testing many variations
     [java] ===========================================
     [java] showSceneResults();     // test all serializer outputs
     [java] ConfigurationProperties.getPropertiesFileName()=X3DJSAIL.properties
     [java] X3DJSAIL.properties includes 12 properties:
     [java] -- listing properties --
     [java] deleteIntermediateFiles=true
     [java] showDefaultAttributes=false
     [java] BLENDER_PATH=
     [java] indentCharacter=SPACE
     [java] MESHLAB_PATH=
     [java] XSLT_ENGINE=SAXON
     [java] overwriteExistingFiles=true
     [java] indentIncrement=2
     [java] EXI_ENGINE=EXIFICIENT
     [java] SFImagePixelOutputHexadecimal=true
     [java] stripTrailingZeroes=true
     [java] validationExceptionAllowed=false
     [java] ------------------------
     [java] X3DJSAIL.properties loading complete.
     [java] 
     [java] HelloWorldProgramOutput.java console output
     [java] ===========================================
     [java] HelloWorldProgram validation results for resulting scene graph: 
     [java] no errors detected.
     [java] ===========================================
     [java] x3dModel.toStringX3D()
     [java] 
     [java] <?xml version="1.0" encoding="UTF-8"?>
     [java] <!DOCTYPE X3D PUBLIC "ISO//Web3D//DTD X3D 3.3//EN" "http://www.web3d.org/specifications/x3d-3.3.dtd">
     [java] <X3D profile='Immersive' version='3.3' xmlns:xsd='http://www.w3.org/2001/XMLSchema-instance' xsd:noNamespaceSchemaLocation='http://www.web3d.org/specifications/x3d-3.3.xsd'>
     [java]   <!-- x3dVersionComparisonTest for this model: supportsX3dVersion(X3DObject.VERSION_3_0)=true -->
     [java]   <head>
     [java]     <!-- comment #1 -->
     [java]     <!-- comment #2 -->
     [java]     <!-- comment #3 -->
     [java]     <!-- comment #4 -->
     [java]     <component name='Navigation' level='3'/>
     [java]     <component name='Shaders' level='1'/>
     [java]     <component name='CADGeometry' level='2'/>
     [java]     <component name='DIS' level='2'/>
     [java]     <component name='H-Anim' level='1'/>
     [java]     <component name='Grouping' level='1'/>
     [java]     <component name='Layering' level='1'/>
     [java]     <unit name='AngleUnitConversion' category='angle' conversionFactor='1.0'/>
     [java]     <unit name='LengthUnitConversion' category='length' conversionFactor='1.0'/>
     [java]     <unit name='ForceFromPoundsToNewtons' category='force' conversionFactor='4.4482'/>
     [java]     <meta content='HelloWorldProgramOutput.x3d' name='title'/>
     [java]     <meta content='continued development and testing in progress' name='info'/>
     [java]     <meta content='Example HelloWorldProgram creates an X3D model using the X3D Java Scene Access Interface Library (X3DJSAIL)' name='description'/>
     [java]     <meta content='https://www.web3d.org/specifications/java/X3DJSAIL.html' name='reference'/>
     [java]     <meta content='HelloWorldProgramOutput.java' name='generator'/>
     [java]     <meta content='6 September 2016' name='created'/>
     [java]     <meta content='13 January 2020' name='modified'/>
     [java]     <meta content='X3D Java Scene Access Interface Library (X3DJSAIL)' name='generator'/>
     [java]     <meta content='https://www.web3d.org/specifications/java/examples/HelloWorldProgram.java' name='generator'/>
     [java]     <meta content='Netbeans http://www.netbeans.org' name='generator'/>
     [java]     <meta content='Don Brutzman' name='creator'/>
     [java]     <meta content='https://sourceforge.net/p/x3d/code/HEAD/tree/www.web3d.org/x3d/stylesheets/java/examples/HelloWorldProgramOutput.x3d' name='reference'/>
     [java]     <meta content='Console output, ClassicVRML encoding, VRML97 encoding and pretty-print documentation:' name='reference'/>
     [java]     <meta content='HelloWorldProgramOutput.txt' name='reference'/>
     [java]     <meta content='HelloWorldProgramOutput.x3dv' name='reference'/>
     [java]     <meta content='HelloWorldProgramOutput.wrl' name='reference'/>
     [java]     <meta content='HelloWorldProgramOutput.html' name='reference'/>
     [java]     <meta content='https://savage.nps.edu/X3dValidator?url=https://www.web3d.org/specifications/java/examples/HelloWorldProgramOutput.x3d' name='reference'/>
     [java]     <meta content='https://www.web3d.org/specifications/java/examples/HelloWorldProgramOutput.x3d' name='identifier'/>
     [java]     <meta content='../license.html' name='license'/>
     [java]   </head>
     [java]   <Scene>
     [java]     <ViewpointGroup description='Available viewpoints'>
     [java]       <Viewpoint DEF='DefaultView' description='Hello X3DJSAIL'/>
     [java]       <Viewpoint DEF='TopDownView' description='top-down view from above' orientation='1 0 0 -1.570796' position='0 100 0'/>
     [java]     </ViewpointGroup>
     [java]     <NavigationInfo avatarSize='0.25 1.6 0.75' transitionType='"LINEAR"' type='"EXAMINE" "FLY" "ANY"'/>
     [java]     <WorldInfo DEF='WorldInfoDEF' title='HelloWorldProgram produced by X3D Java SAI Library (X3DJSAIL)'/>
     [java]     <WorldInfo USE='WorldInfoDEF'/>
     [java]     <WorldInfo USE='WorldInfoDEF'/>
     [java]     <MetadataString DEF='scene.addChildMetadata' name='test' value='"Top-level root Metadata node beneath Scene needs to be one of &apos;-children&apos; in JSON encoding"'/>
     [java]     <LayerSet DEF='scene.addChildLayerSetTest' order='0'/>
     [java]     <Transform DEF='LogoGeometryTransform' translation='0 1.5 0'>
     [java]       <Anchor description='select for X3D Java SAI Library (X3DJSAIL) description' url='"../X3DJSAIL.html" "https://www.web3d.org/specifications/java/X3DJSAIL.html"'>
     [java]         <Shape DEF='BoxShape'>
     [java]           <Appearance>
     [java]             <Material DEF='GreenMaterial' diffuseColor='0 1 1' emissiveColor='0.8 0 0' transparency='0.1'/>
     [java]             <ImageTexture url='"images/X3dJavaSceneAccessInterfaceSaiLibrary.png" "https://www.web3d.org/specifications/java/examples/images/X3dJavaSceneAccessInterfaceSaiLibrary.png"'/>
     [java]           </Appearance>
     [java]           <Box DEF='test-NMTOKEN_regex.0123456789' class='untextured'/>
     [java]         </Shape>
     [java]       </Anchor>
     [java]     </Transform>
     [java]     <Shape DEF='LineShape'>
     [java]       <Appearance>
     [java]         <Material emissiveColor='0.6 0.19607843 0.8'/>
     [java]       </Appearance>
     [java]       <IndexedLineSet coordIndex='0 1 2 3 4 0'>
     [java]         <!-- Coordinate 3-tuple point count: 6 -->
     [java]         <Coordinate point='0 1.5 0 2 1.5 0 2 1.5 -2 -2 1.5 -2 -2 1.5 0 0 1.5 0'/>
     [java]       </IndexedLineSet>
     [java]     </Shape>
     [java]     <PositionInterpolator DEF='BoxPathAnimator' key='0 0.125 0.375 0.625 0.875 1' keyValue='0 1.5 0 2 1.5 0 2 1.5 -2 -2 1.5 -2 -2 1.5 0 0 1.5 0'/>
     [java]     <TimeSensor DEF='OrbitClock' cycleInterval='8.0' loop='true'/>
     [java]     <ROUTE fromField='fraction_changed' fromNode='OrbitClock' toField='set_fraction' toNode='BoxPathAnimator'/>
     [java]     <ROUTE fromField='value_changed' fromNode='BoxPathAnimator' toField='set_translation' toNode='LogoGeometryTransform'/>
     [java]     <Transform DEF='TextTransform' translation='0 -1.5 0'>
     [java]       <Shape>
     [java]         <Appearance>
     [java]           <Material USE='GreenMaterial'/>
     [java]         </Appearance>
     [java]         <Text string='"X3D Java" "SAI Library" "X3DJSAIL"'>
     [java]           <!-- Comment example A, plain quotation marks: He said, "Immel did it!" -->
     [java]           <!-- Comment example B, XML character entities: He said, &quot;Immel did it!&quot; -->
     [java]           <MetadataSet name='EscapedQuotationMarksMetadataSet'>
     [java]             <MetadataString name='quotesTestC' containerField='value' value='"MFString example C, backslash-escaped quotes: He said, \"Immel did it!\""'/>
     [java]             <MetadataString name='extraChildTest' containerField='value' value='"checks MetadataSetObject addValue() method"'/>
     [java]           </MetadataSet>
     [java]           <FontStyle family='"SERIF"' justify='"MIDDLE" "MIDDLE"'/>
     [java]         </Text>
     [java]       </Shape>
     [java]       <Collision>
     [java]         <!-- test containerField='proxy' -->
     [java]         <Shape DEF='ProxyShape' containerField='proxy'>
     [java]           <!-- alternative XML encoding: Text string='"One, Two, Comment" "" "He said, \&quot;Immel did it!\&quot;"' -->
     [java]           <!-- alternative XML encoding: Text string='"One, Two, Comment" "" "He said, \&quot;Immel did it!\&quot;" ""' -->
     [java]           <!-- alternative Java source: .setString(new String [] {"One, Two, Comment", "", "He said, \"Immel did it!\""}) -->
     [java]           <!-- reference: https://www.web3d.org/x3d/content/examples/Basic/X3dSpecifications/StringArrayEncodingExamplesIndex.html -->
     [java]           <Text string='"One, Two, Text" "" "He said, \"Immel did it!\" \"\""'/>
     [java]         </Shape>
     [java]       </Collision>
     [java]       <!-- It's a beautiful world -->
     [java]       <!-- ... for you! -->
     [java]       <!-- https://en.wikipedia.org/wiki/Beautiful_World_(Devo_song) -->
     [java]     </Transform>
     [java]     <!-- repeatedly spin 180 degrees as a readable special effect -->
     [java]     <OrientationInterpolator DEF='SpinInterpolator' key='0 0.5 1' keyValue='0 1 0 4.712389 0 1 0 0 0 1 0 1.5707964'/>
     [java]     <TimeSensor DEF='SpinClock' cycleInterval='5.0' loop='true'/>
     [java]     <ROUTE fromField='fraction_changed' fromNode='SpinClock' toField='set_fraction' toNode='SpinInterpolator'/>
     [java]     <ROUTE fromField='value_changed' fromNode='SpinInterpolator' toField='rotation' toNode='TextTransform'/>
     [java]     <Group DEF='BackgroundGroup'>
     [java]       <Background DEF='GradualBackground'/>
     [java]       <Script DEF='colorTypeConversionScript'>
     [java]         <field name='colorInput' accessType='inputOnly' type='SFColor'/>
     [java]         <field name='colorsOutput' accessType='outputOnly' type='MFColor'/>
     [java] <![CDATA[
     [java] ecmascript:
     [java] 
     [java] function colorInput (eventValue) // Example source code
     [java] {
     [java]    colorsOutput = new MFColor(eventValue); // assigning value sends output event
     [java] // Browser.print('colorInput=' + eventValue + ', colorsOutput=' + colorsOutput + '\n');
     [java] }
     [java] ]]>
     [java]       </Script>
     [java]       <ColorInterpolator DEF='ColorAnimator' key='0 0.5 1' keyValue='0.9411765 1 1 0.29411766 0 0.50980395 0.9411765 1 1'>
     [java]         <!-- AZURE to INDIGO and back again -->
     [java]       </ColorInterpolator>
     [java]       <TimeSensor DEF='ColorClock' cycleInterval='60.0' loop='true'/>
     [java]       <ROUTE fromField='colorsOutput' fromNode='colorTypeConversionScript' toField='skyColor' toNode='GradualBackground'/>
     [java]       <ROUTE fromField='value_changed' fromNode='ColorAnimator' toField='colorInput' toNode='colorTypeConversionScript'/>
     [java]       <ROUTE fromField='fraction_changed' fromNode='ColorClock' toField='set_fraction' toNode='ColorAnimator'/>
     [java]     </Group>
     [java]     <ProtoDeclare name='ArtDeco01Material' appinfo='tooltip: ArtDeco01Material prototype is a Material node'>
     [java]       <ProtoInterface>
     [java]         <field name='description' accessType='inputOutput' appinfo='tooltip for descriptionField' type='SFString' value='ArtDeco01Material prototype is a Material node'/>
     [java]         <field name='enabled' accessType='inputOutput' type='SFBool' value='true'/>
     [java]       </ProtoInterface>
     [java]       <ProtoBody>
     [java]         <!-- Initial node of ProtoBody determines prototype node type -->
     [java]         <Material ambientIntensity='0.25' diffuseColor='0.282435 0.085159 0.134462' shininess='0.127273' specularColor='0.276305 0.11431 0.139857'/>
     [java]         <!-- [HelloWorldProgram diagnostic] should be connected to scene graph: artDeco01ProtoDeclare.getNodeType()="Material" -->
     [java]         <!-- presence of follow-on TouchSensor shows that additional nodes are allowed in ProtoBody after initial node, regardless of node types -->
     [java]         <TouchSensor description='within ProtoBody'>
     [java]           <IS>
     [java]             <connect nodeField='description' protoField='description'/>
     [java]             <connect nodeField='enabled' protoField='enabled'/>
     [java]           </IS>
     [java]         </TouchSensor>
     [java]       </ProtoBody>
     [java]     </ProtoDeclare>
     [java]     <ExternProtoDeclare name='ArtDeco02Material' appinfo='this is a different Material node' url='"http://X3dGraphics.com/examples/X3dForWebAuthors/Chapter14Prototypes/ArtDecoPrototypesExcerpt.x3d#ArtDeco02Material" "http://X3dGraphics.com/examples/X3dForWebAuthors/Chapter14Prototypes/ArtDecoPrototypesExcerpt.x3dv#ArtDeco02Material"'>
     [java]       <!-- [HelloWorldProgram diagnostic] artDeco02ExternProtoDeclare.getNodeType()="ERROR_UNKNOWN_EXTERNPROTODECLARE_NODE_TYPE: ExternProtoDeclare name='ArtDeco02Material' type cannot be remotely accessed at run time. TODO X3DJSAIL needs to add further capability that retrieves the ExternProtoDeclare file." -->
     [java]       <field name='description' accessType='inputOutput' appinfo='tooltip for descriptionField' type='SFString'/>
     [java]     </ExternProtoDeclare>
     [java]     <!-- Tested ArtDeco01ProtoInstance, ArtDeco02ProtoInstance for improper node type when ProtoInstance is added in wrong place -->
     [java]     <Shape DEF='TestShape1'>
     [java]       <Appearance DEF='TestAppearance1'>
     [java]         <!-- ArtDeco01Material prototype goes here... TODO ensure setContainerField is handled in exported Java -->
     [java]         <ProtoInstance name='ArtDeco01Material' containerField='material'>
     [java]           <!-- [HelloWorldProgram diagnostic] ArtDeco01ProtoInstance.getNodeType()="Material" -->
     [java]           <fieldValue name='description' value='ArtDeco01Material can substitute for a Material node'/>
     [java]         </ProtoInstance>
     [java]       </Appearance>
     [java]       <Sphere radius='0.001'/>
     [java]     </Shape>
     [java]     <Shape DEF='TestShape2'>
     [java]       <Appearance DEF='TestAppearance2'>
     [java]         <!-- ArtDeco02Material prototype goes here... TODO ensure setContainerField is handled in exported Java -->
     [java]         <ProtoInstance DEF='ArtDeco02MaterialDEF' name='ArtDeco02Material' containerField='material'>
     [java]           <!-- [HelloWorldProgram diagnostic] ArtDeco02ProtoInstance.getNodeType()="ERROR_UNKNOWN_EXTERNPROTODECLARE_NODE_TYPE: ExternProtoDeclare name='ArtDeco02Material' type cannot be remotely accessed at run time. TODO X3DJSAIL needs to add further capability that retrieves the ExternProtoDeclare file." -->
     [java]           <fieldValue name='description' value='ArtDeco02Material can substitute for another Material node'/>
     [java]         </ProtoInstance>
     [java]       </Appearance>
     [java]       <Cone bottomRadius='0.001' height='0.001'/>
     [java]     </Shape>
     [java]     <Shape DEF='TestShape3'>
     [java]       <Appearance DEF='TestAppearance3'>
     [java]         <!-- ArtDeco02Material ProtoInstance USE goes here. Note that name field is NOT defined as part of ProtoInstance USE. -->
     [java]         <ProtoInstance USE='ArtDeco02MaterialDEF' containerField='material'/>
     [java]       </Appearance>
     [java]       <Cylinder height='0.001' radius='0.001'/>
     [java]     </Shape>
     [java]     <Inline DEF='inlineSceneDef' url='"someOtherScene.x3d" "https://www.web3d.org/specifications/java/examples/someOtherScene.x3d"'/>
     [java]     <IMPORT AS='WorldInfoDEF2' importedDEF='WorldInfoDEF' inlineDEF='inlineSceneDef'/>
     [java]     <EXPORT AS='WorldInfoDEF3' localDEF='WorldInfoDEF'/>
     [java]     <ProtoDeclare name='MaterialModulator' appinfo='mimic a Material node and modulate fields as an animation effect' documentation='http://x3dgraphics.com/examples/X3dForWebAuthors/Chapter14Prototypes/MaterialModulatorIndex.html'>
     [java]       <ProtoInterface>
     [java]         <field name='enabled' accessType='inputOutput' type='SFBool' value='true'/>
     [java]         <field name='diffuseColor' accessType='inputOutput' type='SFColor' value='0 0 0'/>
     [java]         <field name='emissiveColor' accessType='inputOutput' type='SFColor' value='0.05 0.05 0.5'/>
     [java]         <field name='specularColor' accessType='inputOutput' type='SFColor' value='0 0 0'/>
     [java]         <field name='transparency' accessType='inputOutput' type='SFFloat' value='0.0'/>
     [java]         <field name='shininess' accessType='inputOutput' type='SFFloat' value='0.0'/>
     [java]         <field name='ambientIntensity' accessType='inputOutput' type='SFFloat' value='0.0'/>
     [java]       </ProtoInterface>
     [java]       <ProtoBody>
     [java]         <Material DEF='MaterialNode'>
     [java]           <IS>
     [java]             <connect nodeField='diffuseColor' protoField='diffuseColor'/>
     [java]             <connect nodeField='emissiveColor' protoField='emissiveColor'/>
     [java]             <connect nodeField='specularColor' protoField='specularColor'/>
     [java]             <connect nodeField='transparency' protoField='transparency'/>
     [java]             <connect nodeField='shininess' protoField='shininess'/>
     [java]             <connect nodeField='ambientIntensity' protoField='ambientIntensity'/>
     [java]           </IS>
     [java]         </Material>
     [java]         <!-- Only first node (the node type) is renderable, others are along for the ride -->
     [java]         <Script DEF='MaterialModulatorScript'>
     [java]           <field name='enabled' accessType='inputOutput' type='SFBool'/>
     [java]           <field name='diffuseColor' accessType='inputOutput' type='SFColor'/>
     [java]           <field name='newColor' accessType='outputOnly' type='SFColor'/>
     [java]           <field name='clockTrigger' accessType='inputOnly' type='SFTime'/>
     [java]           <IS>
     [java]             <connect nodeField='enabled' protoField='enabled'/>
     [java]             <connect nodeField='diffuseColor' protoField='diffuseColor'/>
     [java]           </IS>
     [java] <![CDATA[
     [java] ecmascript:
     [java] function initialize ()
     [java] {
     [java]     newColor = diffuseColor; // start with correct color
     [java] }
     [java] function set_enabled (newValue)
     [java] {
     [java] 	enabled = newValue;
     [java] }
     [java] function clockTrigger (timeValue)
     [java] {
     [java]     if (!enabled) return;
     [java]     red   = newColor.r;
     [java]     green = newColor.g;
     [java]     blue  = newColor.b;
     [java]     
     [java]     // note different modulation rates for each color component, % is modulus operator
     [java]     newColor = new SFColor ((red + 0.02) % 1, (green + 0.03) % 1, (blue + 0.04) % 1);
     [java] 	if (enabled)
     [java] 	{
     [java] 		Browser.print ('diffuseColor=(' + red + ',' + green + ',' + blue + ') newColor=' + newColor.toString() + '\n');
     [java] 	}
     [java] }
     [java] ]]>
     [java]         </Script>
     [java]       </ProtoBody>
     [java]     </ProtoDeclare>
     [java]     <!-- Test success: declarative statement createDeclarativeShapeTests() -->
     [java]     <Group DEF='DeclarativeGroupExample'>
     [java]       <Shape>
     [java]         <MetadataString DEF='FindableMetadataStringTest' name='findThisNameValue' value='"test case"'/>
     [java]         <Appearance DEF='DeclarativeAppearanceExample'>
     [java]           <!-- DeclarativeMaterialExample gets overridden by subsequently added MaterialModulator ProtoInstance -->
     [java]           <ProtoInstance DEF='MyMaterialModulator' name='MaterialModulator' containerField='material'/>
     [java]         </Appearance>
     [java]         <Cone bottom='false' bottomRadius='0.05' height='0.1'/>
     [java]       </Shape>
     [java]       <!-- Test success: declarativeGroup.addChild() singleton pipeline method -->
     [java]     </Group>
     [java]     <!-- Test success: declarative statement addChild() -->
     [java]     <!-- Test success: x3dModel.findNodeByDEF(DeclarativeAppearanceExample) = <Appearance DEF='DeclarativeAppearanceExample'/> i.e. <Appearance DEF='DeclarativeAppearanceExample'> <!- - DeclarativeMaterialExample gets overridden by subsequently added MaterialModulator ProtoInstance - -> <ProtoInstance DEF='MyMaterialModulator' name='MaterialModulator' containerField='material'/> </Appearance> -->
     [java]     <!-- Test success: x3dModel.findElementByNameValue(findThisNameValue) = <MetadataString DEF='FindableMetadataStringTest' name='findThisNameValue' value='"test case"'/> -->
     [java]     <!-- Test success: x3dModel.findElementByNameValue("ArtDeco01Material", "ProtoDeclare") found -->
     [java]     <!-- Test success: x3dModel.findElementByNameValue("MaterialModulator", "ProtoDeclare") found -->
     [java]     <!-- Test success: x3dModel.findElementByNameValue("MaterialModulator", "ProtoInstance") found -->
     [java]     <Group DEF='TestFieldObjectsGroup'>
     [java]       <!-- testFieldObjects() results -->
     [java]       <!-- SFBool default=true, true=true, false=false, negate()=true -->
     [java]       <!-- MFBool default=, initial=true false true, negate()=false true false -->
     [java]       <!-- SFFloat default=0.0, initial=1.0, setValue(2)=2.0, setValue(3.0f)=3.0, setValue(4.0)=4.0 -->
     [java]       <!-- MFFloat default=, initial=1 2 3, append(5)=1 2 3 5, inserts(3,4)(0,0)=0 1 2 3 4 5, append(6)=0 1 2 3 4 5 6, size()=7 -->
     [java]       <!-- ... get1Value[3]=3.0, remove[1]=0 2 3 4 5 6, set1Value(0,10)=10 2 3 4 5 6, multiply(2)=20 4 6 8 10 12, clear= -->
     [java]       <!-- SFVec3f default=0 0 0, initial=1 2 3, setValue=4 5 6, multiply(2)=8 10 12, normalize()=0.45584232 0.5698029 0.68376344, regex matches()=true -->
     [java]       <!-- regex test SFVec3f().matches("1 2 3")=true, regex test SFVec3f().matches("1 2 3 4")=false, regex test (SFRotationObject.matches("0 0 0 0")=true, failure detecting illegal (zero axis) rotation value -->
     [java]     </Group>
     [java]     <Sound location='0 1.6 0'>
     [java]       <!-- set sound-ellipsoid location height at 1.6m to match typical avatar height -->
     [java]       <AudioClip description='chimes' url='"chimes.wav" "https://www.web3d.org/x3d/content/examples/ConformanceNist/Sounds/AudioClip/chimes.wav"'>
     [java]         <!-- Scene example fragment from https://www.web3d.org/x3d/content/examples/ConformanceNist/Sounds/AudioClip/default.x3d -->
     [java]       </AudioClip>
     [java]     </Sound>
     [java]     <Sound location='0 1.6 0'>
     [java]       <!-- set sound-ellipsoid location height at 1.6m to match typical avatar height -->
     [java]       <MovieTexture containerField='source' description='mpgsys.mpg from ConformanceNist suite' url='"mpgsys.mpg" "https://www.web3d.org/x3d/content/examples/ConformanceNist/Appearance/MovieTexture/mpgsys.mpg"'>
     [java]         <!-- Scene example fragment from https://www.web3d.org/x3d/content/examples/ConformanceNist/Appearance/MovieTexture/mpeg1-systems.x3d -->
     [java]         <!-- Expected containerField='source', allowed containerField values="texture" "source" "back" "bottom" "front" "left" "right" "top" "backTexture" "bottomTexture" "frontTexture" "leftTexture" "rightTexture" "topTexture" "watchList" -->
     [java]       </MovieTexture>
     [java]     </Sound>
     [java]     <!-- Test success: AnchorObject.isNode()=true, siteAnchor.isNode()=true -->
     [java]     <!-- Test success: AnchorObject.isStatement()=false, siteAnchor.isStatement()=false -->
     [java]     <!-- Test success: ROUTEObject.isNode()=false, orbitPositionROUTE.isNode()=false -->
     [java]     <!-- Test success: ROUTEObject.isStatement()=true, orbitPositionROUTE.isStatement()=true -->
     [java]     <!-- Test success: CommentsBlock.isNode()=false, testComments.isNode()=false -->
     [java]     <!-- Test failure: CommentsBlock.isStatement()=true, testComments.isStatement()=true -->
     [java]     <Shape DEF='ExtrusionShape'>
     [java]       <!-- ExampleExtrusion isCrossSectionClosed()=true, crossSection='[1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0]' -->
     [java]       <!-- ExampleExtrusion isSpineClosed()=false, spine='[0.0, 0.0, 0.0, 0.0, 1.0, 0.0]' -->
     [java]       <Appearance DEF='TransparentAppearance'>
     [java]         <Material transparency='1.0'/>
     [java]       </Appearance>
     [java]       <Extrusion DEF='ExampleExtrusion'/>
     [java]     </Shape>
     [java]     <Group>
     [java]       <!-- Test MFNode children array as an ordered list consisting of comments, statements, ProtoInstance and nodes -->
     [java]       <ProtoDeclare name='NewWorldInfo'>
     [java]         <ProtoInterface>
     [java]           <field name='description' accessType='initializeOnly' type='SFString'/>
     [java]         </ProtoInterface>
     [java]         <ProtoBody>
     [java]           <WorldInfo/>
     [java]         </ProtoBody>
     [java]       </ProtoDeclare>
     [java]       <ProtoInstance DEF='Proto1' name='NewWorldInfo'>
     [java]         <fieldValue name='description' value='testing 1 2 3'/>
     [java]       </ProtoInstance>
     [java]       <Group DEF='Node2'>
     [java]         <!-- intentionally empty -->
     [java]       </Group>
     [java]       <ProtoInstance DEF='Proto3' name='NewWorldInfo'/>
     [java]       <Transform DEF='Node4'>
     [java]         <!-- intentionally empty -->
     [java]       </Transform>
     [java]       <!-- Test satisfactorily creates MFNode children array as an ordered list with mixed content -->
     [java]     </Group>
     [java]     <ProtoDeclare name='ShaderProto'>
     [java]       <ProtoBody>
     [java]         <ProgramShader/>
     [java]       </ProtoBody>
     [java]     </ProtoDeclare>
     [java]     <Shape>
     [java]       <Appearance>
     [java]         <!-- Test MFNode shaders array as an ordered list consisting of comments, ProtoInstance and nodes -->
     [java]         <!-- Test satisfactorily creates MFNode shaders array as an ordered list with mixed content -->
     [java]         <ProgramShader DEF='TestShader1'>
     [java]           <ShaderProgram DEF='TestShader2'/>
     [java]         </ProgramShader>
     [java]         <ProtoInstance DEF='TestShader3' name='ShaderProto' containerField='shaders'/>
     [java]         <ComposedShader DEF='TestShader4'>
     [java]           <ShaderPart DEF='TestShader5'/>
     [java]         </ComposedShader>
     [java]       </Appearance>
     [java]     </Shape>
     [java]     <Transform DEF='SpecialtyNodes'>
     [java]       <CADLayer>
     [java]         <CADAssembly>
     [java]           <CADPart>
     [java]             <CADFace/>
     [java]           </CADPart>
     [java]         </CADAssembly>
     [java]       </CADLayer>
     [java]       <EspduTransform geoSystem='"GD" "WE"'/>
     [java]       <ReceiverPdu geoSystem='"GD" "WE"'/>
     [java]       <SignalPdu geoSystem='"GD" "WE"'/>
     [java]       <TransmitterPdu geoSystem='"GD" "WE"'/>
     [java]       <DISEntityManager>
     [java]         <DISEntityTypeMapping/>
     [java]       </DISEntityManager>
     [java]     </Transform>
     [java]   </Scene>
     [java] </X3D>
     [java] 
     [java] ===========================================
     [java] x3dModel.toStringXML()
     [java] 
     [java] <?xml version="1.0" encoding="UTF-8"?>
     [java] <!DOCTYPE X3D PUBLIC "ISO//Web3D//DTD X3D 3.3//EN" "http://www.web3d.org/specifications/x3d-3.3.dtd">
     [java] <X3D profile='Immersive' version='3.3' xmlns:xsd='http://www.w3.org/2001/XMLSchema-instance' xsd:noNamespaceSchemaLocation='http://www.web3d.org/specifications/x3d-3.3.xsd'>
     [java]   <!-- x3dVersionComparisonTest for this model: supportsX3dVersion(X3DObject.VERSION_3_0)=true -->
     [java]   <head>
     [java]     <!-- comment #1 -->
     [java]     <!-- comment #2 -->
     [java]     <!-- comment #3 -->
     [java]     <!-- comment #4 -->
     [java]     <component name='Navigation' level='3'/>
     [java]     <component name='Shaders' level='1'/>
     [java]     <component name='CADGeometry' level='2'/>
     [java]     <component name='DIS' level='2'/>
     [java]     <component name='H-Anim' level='1'/>
     [java]     <component name='Grouping' level='1'/>
     [java]     <component name='Layering' level='1'/>
     [java]     <unit name='AngleUnitConversion' category='angle' conversionFactor='1.0'/>
     [java]     <unit name='LengthUnitConversion' category='length' conversionFactor='1.0'/>
     [java]     <unit name='ForceFromPoundsToNewtons' category='force' conversionFactor='4.4482'/>
     [java]     <meta content='HelloWorldProgramOutput.x3d' name='title'/>
     [java]     <meta content='continued development and testing in progress' name='info'/>
     [java]     <meta content='Example HelloWorldProgram creates an X3D model using the X3D Java Scene Access Interface Library (X3DJSAIL)' name='description'/>
     [java]     <meta content='https://www.web3d.org/specifications/java/X3DJSAIL.html' name='reference'/>
     [java]     <meta content='HelloWorldProgramOutput.java' name='generator'/>
     [java]     <meta content='6 September 2016' name='created'/>
     [java]     <meta content='13 January 2020' name='modified'/>
     [java]     <meta content='X3D Java Scene Access Interface Library (X3DJSAIL)' name='generator'/>
     [java]     <meta content='https://www.web3d.org/specifications/java/examples/HelloWorldProgram.java' name='generator'/>
     [java]     <meta content='Netbeans http://www.netbeans.org' name='generator'/>
     [java]     <meta content='Don Brutzman' name='creator'/>
     [java]     <meta content='https://sourceforge.net/p/x3d/code/HEAD/tree/www.web3d.org/x3d/stylesheets/java/examples/HelloWorldProgramOutput.x3d' name='reference'/>
     [java]     <meta content='Console output, ClassicVRML encoding, VRML97 encoding and pretty-print documentation:' name='reference'/>
     [java]     <meta content='HelloWorldProgramOutput.txt' name='reference'/>
     [java]     <meta content='HelloWorldProgramOutput.x3dv' name='reference'/>
     [java]     <meta content='HelloWorldProgramOutput.wrl' name='reference'/>
     [java]     <meta content='HelloWorldProgramOutput.html' name='reference'/>
     [java]     <meta content='https://savage.nps.edu/X3dValidator?url=https://www.web3d.org/specifications/java/examples/HelloWorldProgramOutput.x3d' name='reference'/>
     [java]     <meta content='https://www.web3d.org/specifications/java/examples/HelloWorldProgramOutput.x3d' name='identifier'/>
     [java]     <meta content='../license.html' name='license'/>
     [java]   </head>
     [java]   <Scene>
     [java]     <ViewpointGroup description='Available viewpoints'>
     [java]       <Viewpoint DEF='DefaultView' description='Hello X3DJSAIL'/>
     [java]       <Viewpoint DEF='TopDownView' description='top-down view from above' orientation='1 0 0 -1.570796' position='0 100 0'/>
     [java]     </ViewpointGroup>
     [java]     <NavigationInfo avatarSize='0.25 1.6 0.75' transitionType='"LINEAR"' type='"EXAMINE" "FLY" "ANY"'/>
     [java]     <WorldInfo DEF='WorldInfoDEF' title='HelloWorldProgram produced by X3D Java SAI Library (X3DJSAIL)'/>
     [java]     <WorldInfo USE='WorldInfoDEF'/>
     [java]     <WorldInfo USE='WorldInfoDEF'/>
     [java]     <MetadataString DEF='scene.addChildMetadata' name='test' value='"Top-level root Metadata node beneath Scene needs to be one of &apos;-children&apos; in JSON encoding"'/>
     [java]     <LayerSet DEF='scene.addChildLayerSetTest' order='0'/>
     [java]     <Transform DEF='LogoGeometryTransform' translation='0 1.5 0'>
     [java]       <Anchor description='select for X3D Java SAI Library (X3DJSAIL) description' url='"../X3DJSAIL.html" "https://www.web3d.org/specifications/java/X3DJSAIL.html"'>
     [java]         <Shape DEF='BoxShape'>
     [java]           <Appearance>
     [java]             <Material DEF='GreenMaterial' diffuseColor='0 1 1' emissiveColor='0.8 0 0' transparency='0.1'/>
     [java]             <ImageTexture url='"images/X3dJavaSceneAccessInterfaceSaiLibrary.png" "https://www.web3d.org/specifications/java/examples/images/X3dJavaSceneAccessInterfaceSaiLibrary.png"'/>
     [java]           </Appearance>
     [java]           <Box DEF='test-NMTOKEN_regex.0123456789' class='untextured'/>
     [java]         </Shape>
     [java]       </Anchor>
     [java]     </Transform>
     [java]     <Shape DEF='LineShape'>
     [java]       <Appearance>
     [java]         <Material emissiveColor='0.6 0.19607843 0.8'/>
     [java]       </Appearance>
     [java]       <IndexedLineSet coordIndex='0 1 2 3 4 0'>
     [java]         <!-- Coordinate 3-tuple point count: 6 -->
     [java]         <Coordinate point='0 1.5 0 2 1.5 0 2 1.5 -2 -2 1.5 -2 -2 1.5 0 0 1.5 0'/>
     [java]       </IndexedLineSet>
     [java]     </Shape>
     [java]     <PositionInterpolator DEF='BoxPathAnimator' key='0 0.125 0.375 0.625 0.875 1' keyValue='0 1.5 0 2 1.5 0 2 1.5 -2 -2 1.5 -2 -2 1.5 0 0 1.5 0'/>
     [java]     <TimeSensor DEF='OrbitClock' cycleInterval='8.0' loop='true'/>
     [java]     <ROUTE fromField='fraction_changed' fromNode='OrbitClock' toField='set_fraction' toNode='BoxPathAnimator'/>
     [java]     <ROUTE fromField='value_changed' fromNode='BoxPathAnimator' toField='set_translation' toNode='LogoGeometryTransform'/>
     [java]     <Transform DEF='TextTransform' translation='0 -1.5 0'>
     [java]       <Shape>
     [java]         <Appearance>
     [java]           <Material USE='GreenMaterial'/>
     [java]         </Appearance>
     [java]         <Text string='"X3D Java" "SAI Library" "X3DJSAIL"'>
     [java]           <!-- Comment example A, plain quotation marks: He said, "Immel did it!" -->
     [java]           <!-- Comment example B, XML character entities: He said, &quot;Immel did it!&quot; -->
     [java]           <MetadataSet name='EscapedQuotationMarksMetadataSet'>
     [java]             <MetadataString name='quotesTestC' containerField='value' value='"MFString example C, backslash-escaped quotes: He said, \"Immel did it!\""'/>
     [java]             <MetadataString name='extraChildTest' containerField='value' value='"checks MetadataSetObject addValue() method"'/>
     [java]           </MetadataSet>
     [java]           <FontStyle family='"SERIF"' justify='"MIDDLE" "MIDDLE"'/>
     [java]         </Text>
     [java]       </Shape>
     [java]       <Collision>
     [java]         <!-- test containerField='proxy' -->
     [java]         <Shape DEF='ProxyShape' containerField='proxy'>
     [java]           <!-- alternative XML encoding: Text string='"One, Two, Comment" "" "He said, \&quot;Immel did it!\&quot;"' -->
     [java]           <!-- alternative XML encoding: Text string='"One, Two, Comment" "" "He said, \&quot;Immel did it!\&quot;" ""' -->
     [java]           <!-- alternative Java source: .setString(new String [] {"One, Two, Comment", "", "He said, \"Immel did it!\""}) -->
     [java]           <!-- reference: https://www.web3d.org/x3d/content/examples/Basic/X3dSpecifications/StringArrayEncodingExamplesIndex.html -->
     [java]           <Text string='"One, Two, Text" "" "He said, \"Immel did it!\" \"\""'/>
     [java]         </Shape>
     [java]       </Collision>
     [java]       <!-- It's a beautiful world -->
     [java]       <!-- ... for you! -->
     [java]       <!-- https://en.wikipedia.org/wiki/Beautiful_World_(Devo_song) -->
     [java]     </Transform>
     [java]     <!-- repeatedly spin 180 degrees as a readable special effect -->
     [java]     <OrientationInterpolator DEF='SpinInterpolator' key='0 0.5 1' keyValue='0 1 0 4.712389 0 1 0 0 0 1 0 1.5707964'/>
     [java]     <TimeSensor DEF='SpinClock' cycleInterval='5.0' loop='true'/>
     [java]     <ROUTE fromField='fraction_changed' fromNode='SpinClock' toField='set_fraction' toNode='SpinInterpolator'/>
     [java]     <ROUTE fromField='value_changed' fromNode='SpinInterpolator' toField='rotation' toNode='TextTransform'/>
     [java]     <Group DEF='BackgroundGroup'>
     [java]       <Background DEF='GradualBackground'/>
     [java]       <Script DEF='colorTypeConversionScript'>
     [java]         <field name='colorInput' accessType='inputOnly' type='SFColor'/>
     [java]         <field name='colorsOutput' accessType='outputOnly' type='MFColor'/>
     [java] <![CDATA[
     [java] ecmascript:
     [java] 
     [java] function colorInput (eventValue) // Example source code
     [java] {
     [java]    colorsOutput = new MFColor(eventValue); // assigning value sends output event
     [java] // Browser.print('colorInput=' + eventValue + ', colorsOutput=' + colorsOutput + '\n');
     [java] }
     [java] ]]>
     [java]       </Script>
     [java]       <ColorInterpolator DEF='ColorAnimator' key='0 0.5 1' keyValue='0.9411765 1 1 0.29411766 0 0.50980395 0.9411765 1 1'>
     [java]         <!-- AZURE to INDIGO and back again -->
     [java]       </ColorInterpolator>
     [java]       <TimeSensor DEF='ColorClock' cycleInterval='60.0' loop='true'/>
     [java]       <ROUTE fromField='colorsOutput' fromNode='colorTypeConversionScript' toField='skyColor' toNode='GradualBackground'/>
     [java]       <ROUTE fromField='value_changed' fromNode='ColorAnimator' toField='colorInput' toNode='colorTypeConversionScript'/>
     [java]       <ROUTE fromField='fraction_changed' fromNode='ColorClock' toField='set_fraction' toNode='ColorAnimator'/>
     [java]     </Group>
     [java]     <ProtoDeclare name='ArtDeco01Material' appinfo='tooltip: ArtDeco01Material prototype is a Material node'>
     [java]       <ProtoInterface>
     [java]         <field name='description' accessType='inputOutput' appinfo='tooltip for descriptionField' type='SFString' value='ArtDeco01Material prototype is a Material node'/>
     [java]         <field name='enabled' accessType='inputOutput' type='SFBool' value='true'/>
     [java]       </ProtoInterface>
     [java]       <ProtoBody>
     [java]         <!-- Initial node of ProtoBody determines prototype node type -->
     [java]         <Material ambientIntensity='0.25' diffuseColor='0.282435 0.085159 0.134462' shininess='0.127273' specularColor='0.276305 0.11431 0.139857'/>
     [java]         <!-- [HelloWorldProgram diagnostic] should be connected to scene graph: artDeco01ProtoDeclare.getNodeType()="Material" -->
     [java]         <!-- presence of follow-on TouchSensor shows that additional nodes are allowed in ProtoBody after initial node, regardless of node types -->
     [java]         <TouchSensor description='within ProtoBody'>
     [java]           <IS>
     [java]             <connect nodeField='description' protoField='description'/>
     [java]             <connect nodeField='enabled' protoField='enabled'/>
     [java]           </IS>
     [java]         </TouchSensor>
     [java]       </ProtoBody>
     [java]     </ProtoDeclare>
     [java]     <ExternProtoDeclare name='ArtDeco02Material' appinfo='this is a different Material node' url='"http://X3dGraphics.com/examples/X3dForWebAuthors/Chapter14Prototypes/ArtDecoPrototypesExcerpt.x3d#ArtDeco02Material" "http://X3dGraphics.com/examples/X3dForWebAuthors/Chapter14Prototypes/ArtDecoPrototypesExcerpt.x3dv#ArtDeco02Material"'>
     [java]       <!-- [HelloWorldProgram diagnostic] artDeco02ExternProtoDeclare.getNodeType()="ERROR_UNKNOWN_EXTERNPROTODECLARE_NODE_TYPE: ExternProtoDeclare name='ArtDeco02Material' type cannot be remotely accessed at run time. TODO X3DJSAIL needs to add further capability that retrieves the ExternProtoDeclare file." -->
     [java]       <field name='description' accessType='inputOutput' appinfo='tooltip for descriptionField' type='SFString'/>
     [java]     </ExternProtoDeclare>
     [java]     <!-- Tested ArtDeco01ProtoInstance, ArtDeco02ProtoInstance for improper node type when ProtoInstance is added in wrong place -->
     [java]     <Shape DEF='TestShape1'>
     [java]       <Appearance DEF='TestAppearance1'>
     [java]         <!-- ArtDeco01Material prototype goes here... TODO ensure setContainerField is handled in exported Java -->
     [java]         <ProtoInstance name='ArtDeco01Material' containerField='material'>
     [java]           <!-- [HelloWorldProgram diagnostic] ArtDeco01ProtoInstance.getNodeType()="Material" -->
     [java]           <fieldValue name='description' value='ArtDeco01Material can substitute for a Material node'/>
     [java]         </ProtoInstance>
     [java]       </Appearance>
     [java]       <Sphere radius='0.001'/>
     [java]     </Shape>
     [java]     <Shape DEF='TestShape2'>
     [java]       <Appearance DEF='TestAppearance2'>
     [java]         <!-- ArtDeco02Material prototype goes here... TODO ensure setContainerField is handled in exported Java -->
     [java]         <ProtoInstance DEF='ArtDeco02MaterialDEF' name='ArtDeco02Material' containerField='material'>
     [java]           <!-- [HelloWorldProgram diagnostic] ArtDeco02ProtoInstance.getNodeType()="ERROR_UNKNOWN_EXTERNPROTODECLARE_NODE_TYPE: ExternProtoDeclare name='ArtDeco02Material' type cannot be remotely accessed at run time. TODO X3DJSAIL needs to add further capability that retrieves the ExternProtoDeclare file." -->
     [java]           <fieldValue name='description' value='ArtDeco02Material can substitute for another Material node'/>
     [java]         </ProtoInstance>
     [java]       </Appearance>
     [java]       <Cone bottomRadius='0.001' height='0.001'/>
     [java]     </Shape>
     [java]     <Shape DEF='TestShape3'>
     [java]       <Appearance DEF='TestAppearance3'>
     [java]         <!-- ArtDeco02Material ProtoInstance USE goes here. Note that name field is NOT defined as part of ProtoInstance USE. -->
     [java]         <ProtoInstance USE='ArtDeco02MaterialDEF' containerField='material'/>
     [java]       </Appearance>
     [java]       <Cylinder height='0.001' radius='0.001'/>
     [java]     </Shape>
     [java]     <Inline DEF='inlineSceneDef' url='"someOtherScene.x3d" "https://www.web3d.org/specifications/java/examples/someOtherScene.x3d"'/>
     [java]     <IMPORT AS='WorldInfoDEF2' importedDEF='WorldInfoDEF' inlineDEF='inlineSceneDef'/>
     [java]     <EXPORT AS='WorldInfoDEF3' localDEF='WorldInfoDEF'/>
     [java]     <ProtoDeclare name='MaterialModulator' appinfo='mimic a Material node and modulate fields as an animation effect' documentation='http://x3dgraphics.com/examples/X3dForWebAuthors/Chapter14Prototypes/MaterialModulatorIndex.html'>
     [java]       <ProtoInterface>
     [java]         <field name='enabled' accessType='inputOutput' type='SFBool' value='true'/>
     [java]         <field name='diffuseColor' accessType='inputOutput' type='SFColor' value='0 0 0'/>
     [java]         <field name='emissiveColor' accessType='inputOutput' type='SFColor' value='0.05 0.05 0.5'/>
     [java]         <field name='specularColor' accessType='inputOutput' type='SFColor' value='0 0 0'/>
     [java]         <field name='transparency' accessType='inputOutput' type='SFFloat' value='0.0'/>
     [java]         <field name='shininess' accessType='inputOutput' type='SFFloat' value='0.0'/>
     [java]         <field name='ambientIntensity' accessType='inputOutput' type='SFFloat' value='0.0'/>
     [java]       </ProtoInterface>
     [java]       <ProtoBody>
     [java]         <Material DEF='MaterialNode'>
     [java]           <IS>
     [java]             <connect nodeField='diffuseColor' protoField='diffuseColor'/>
     [java]             <connect nodeField='emissiveColor' protoField='emissiveColor'/>
     [java]             <connect nodeField='specularColor' protoField='specularColor'/>
     [java]             <connect nodeField='transparency' protoField='transparency'/>
     [java]             <connect nodeField='shininess' protoField='shininess'/>
     [java]             <connect nodeField='ambientIntensity' protoField='ambientIntensity'/>
     [java]           </IS>
     [java]         </Material>
     [java]         <!-- Only first node (the node type) is renderable, others are along for the ride -->
     [java]         <Script DEF='MaterialModulatorScript'>
     [java]           <field name='enabled' accessType='inputOutput' type='SFBool'/>
     [java]           <field name='diffuseColor' accessType='inputOutput' type='SFColor'/>
     [java]           <field name='newColor' accessType='outputOnly' type='SFColor'/>
     [java]           <field name='clockTrigger' accessType='inputOnly' type='SFTime'/>
     [java]           <IS>
     [java]             <connect nodeField='enabled' protoField='enabled'/>
     [java]             <connect nodeField='diffuseColor' protoField='diffuseColor'/>
     [java]           </IS>
     [java] <![CDATA[
     [java] ecmascript:
     [java] function initialize ()
     [java] {
     [java]     newColor = diffuseColor; // start with correct color
     [java] }
     [java] function set_enabled (newValue)
     [java] {
     [java] 	enabled = newValue;
     [java] }
     [java] function clockTrigger (timeValue)
     [java] {
     [java]     if (!enabled) return;
     [java]     red   = newColor.r;
     [java]     green = newColor.g;
     [java]     blue  = newColor.b;
     [java]     
     [java]     // note different modulation rates for each color component, % is modulus operator
     [java]     newColor = new SFColor ((red + 0.02) % 1, (green + 0.03) % 1, (blue + 0.04) % 1);
     [java] 	if (enabled)
     [java] 	{
     [java] 		Browser.print ('diffuseColor=(' + red + ',' + green + ',' + blue + ') newColor=' + newColor.toString() + '\n');
     [java] 	}
     [java] }
     [java] ]]>
     [java]         </Script>
     [java]       </ProtoBody>
     [java]     </ProtoDeclare>
     [java]     <!-- Test success: declarative statement createDeclarativeShapeTests() -->
     [java]     <Group DEF='DeclarativeGroupExample'>
     [java]       <Shape>
     [java]         <MetadataString DEF='FindableMetadataStringTest' name='findThisNameValue' value='"test case"'/>
     [java]         <Appearance DEF='DeclarativeAppearanceExample'>
     [java]           <!-- DeclarativeMaterialExample gets overridden by subsequently added MaterialModulator ProtoInstance -->
     [java]           <ProtoInstance DEF='MyMaterialModulator' name='MaterialModulator' containerField='material'/>
     [java]         </Appearance>
     [java]         <Cone bottom='false' bottomRadius='0.05' height='0.1'/>
     [java]       </Shape>
     [java]       <!-- Test success: declarativeGroup.addChild() singleton pipeline method -->
     [java]     </Group>
     [java]     <!-- Test success: declarative statement addChild() -->
     [java]     <!-- Test success: x3dModel.findNodeByDEF(DeclarativeAppearanceExample) = <Appearance DEF='DeclarativeAppearanceExample'/> i.e. <Appearance DEF='DeclarativeAppearanceExample'> <!- - DeclarativeMaterialExample gets overridden by subsequently added MaterialModulator ProtoInstance - -> <ProtoInstance DEF='MyMaterialModulator' name='MaterialModulator' containerField='material'/> </Appearance> -->
     [java]     <!-- Test success: x3dModel.findElementByNameValue(findThisNameValue) = <MetadataString DEF='FindableMetadataStringTest' name='findThisNameValue' value='"test case"'/> -->
     [java]     <!-- Test success: x3dModel.findElementByNameValue("ArtDeco01Material", "ProtoDeclare") found -->
     [java]     <!-- Test success: x3dModel.findElementByNameValue("MaterialModulator", "ProtoDeclare") found -->
     [java]     <!-- Test success: x3dModel.findElementByNameValue("MaterialModulator", "ProtoInstance") found -->
     [java]     <Group DEF='TestFieldObjectsGroup'>
     [java]       <!-- testFieldObjects() results -->
     [java]       <!-- SFBool default=true, true=true, false=false, negate()=true -->
     [java]       <!-- MFBool default=, initial=true false true, negate()=false true false -->
     [java]       <!-- SFFloat default=0.0, initial=1.0, setValue(2)=2.0, setValue(3.0f)=3.0, setValue(4.0)=4.0 -->
     [java]       <!-- MFFloat default=, initial=1 2 3, append(5)=1 2 3 5, inserts(3,4)(0,0)=0 1 2 3 4 5, append(6)=0 1 2 3 4 5 6, size()=7 -->
     [java]       <!-- ... get1Value[3]=3.0, remove[1]=0 2 3 4 5 6, set1Value(0,10)=10 2 3 4 5 6, multiply(2)=20 4 6 8 10 12, clear= -->
     [java]       <!-- SFVec3f default=0 0 0, initial=1 2 3, setValue=4 5 6, multiply(2)=8 10 12, normalize()=0.45584232 0.5698029 0.68376344, regex matches()=true -->
     [java]       <!-- regex test SFVec3f().matches("1 2 3")=true, regex test SFVec3f().matches("1 2 3 4")=false, regex test (SFRotationObject.matches("0 0 0 0")=true, failure detecting illegal (zero axis) rotation value -->
     [java]     </Group>
     [java]     <Sound location='0 1.6 0'>
     [java]       <!-- set sound-ellipsoid location height at 1.6m to match typical avatar height -->
     [java]       <AudioClip description='chimes' url='"chimes.wav" "https://www.web3d.org/x3d/content/examples/ConformanceNist/Sounds/AudioClip/chimes.wav"'>
     [java]         <!-- Scene example fragment from https://www.web3d.org/x3d/content/examples/ConformanceNist/Sounds/AudioClip/default.x3d -->
     [java]       </AudioClip>
     [java]     </Sound>
     [java]     <Sound location='0 1.6 0'>
     [java]       <!-- set sound-ellipsoid location height at 1.6m to match typical avatar height -->
     [java]       <MovieTexture containerField='source' description='mpgsys.mpg from ConformanceNist suite' url='"mpgsys.mpg" "https://www.web3d.org/x3d/content/examples/ConformanceNist/Appearance/MovieTexture/mpgsys.mpg"'>
     [java]         <!-- Scene example fragment from https://www.web3d.org/x3d/content/examples/ConformanceNist/Appearance/MovieTexture/mpeg1-systems.x3d -->
     [java]         <!-- Expected containerField='source', allowed containerField values="texture" "source" "back" "bottom" "front" "left" "right" "top" "backTexture" "bottomTexture" "frontTexture" "leftTexture" "rightTexture" "topTexture" "watchList" -->
     [java]       </MovieTexture>
     [java]     </Sound>
     [java]     <!-- Test success: AnchorObject.isNode()=true, siteAnchor.isNode()=true -->
     [java]     <!-- Test success: AnchorObject.isStatement()=false, siteAnchor.isStatement()=false -->
     [java]     <!-- Test success: ROUTEObject.isNode()=false, orbitPositionROUTE.isNode()=false -->
     [java]     <!-- Test success: ROUTEObject.isStatement()=true, orbitPositionROUTE.isStatement()=true -->
     [java]     <!-- Test success: CommentsBlock.isNode()=false, testComments.isNode()=false -->
     [java]     <!-- Test failure: CommentsBlock.isStatement()=true, testComments.isStatement()=true -->
     [java]     <Shape DEF='ExtrusionShape'>
     [java]       <!-- ExampleExtrusion isCrossSectionClosed()=true, crossSection='[1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0]' -->
     [java]       <!-- ExampleExtrusion isSpineClosed()=false, spine='[0.0, 0.0, 0.0, 0.0, 1.0, 0.0]' -->
     [java]       <Appearance DEF='TransparentAppearance'>
     [java]         <Material transparency='1.0'/>
     [java]       </Appearance>
     [java]       <Extrusion DEF='ExampleExtrusion'/>
     [java]     </Shape>
     [java]     <Group>
     [java]       <!-- Test MFNode children array as an ordered list consisting of comments, statements, ProtoInstance and nodes -->
     [java]       <ProtoDeclare name='NewWorldInfo'>
     [java]         <ProtoInterface>
     [java]           <field name='description' accessType='initializeOnly' type='SFString'/>
     [java]         </ProtoInterface>
     [java]         <ProtoBody>
     [java]           <WorldInfo/>
     [java]         </ProtoBody>
     [java]       </ProtoDeclare>
     [java]       <ProtoInstance DEF='Proto1' name='NewWorldInfo'>
     [java]         <fieldValue name='description' value='testing 1 2 3'/>
     [java]       </ProtoInstance>
     [java]       <Group DEF='Node2'>
     [java]         <!-- intentionally empty -->
     [java]       </Group>
     [java]       <ProtoInstance DEF='Proto3' name='NewWorldInfo'/>
     [java]       <Transform DEF='Node4'>
     [java]         <!-- intentionally empty -->
     [java]       </Transform>
     [java]       <!-- Test satisfactorily creates MFNode children array as an ordered list with mixed content -->
     [java]     </Group>
     [java]     <ProtoDeclare name='ShaderProto'>
     [java]       <ProtoBody>
     [java]         <ProgramShader/>
     [java]       </ProtoBody>
     [java]     </ProtoDeclare>
     [java]     <Shape>
     [java]       <Appearance>
     [java]         <!-- Test MFNode shaders array as an ordered list consisting of comments, ProtoInstance and nodes -->
     [java]         <!-- Test satisfactorily creates MFNode shaders array as an ordered list with mixed content -->
     [java]         <ProgramShader DEF='TestShader1'>
     [java]           <ShaderProgram DEF='TestShader2'/>
     [java]         </ProgramShader>
     [java]         <ProtoInstance DEF='TestShader3' name='ShaderProto' containerField='shaders'/>
     [java]         <ComposedShader DEF='TestShader4'>
     [java]           <ShaderPart DEF='TestShader5'/>
     [java]         </ComposedShader>
     [java]       </Appearance>
     [java]     </Shape>
     [java]     <Transform DEF='SpecialtyNodes'>
     [java]       <CADLayer>
     [java]         <CADAssembly>
     [java]           <CADPart>
     [java]             <CADFace/>
     [java]           </CADPart>
     [java]         </CADAssembly>
     [java]       </CADLayer>
     [java]       <EspduTransform geoSystem='"GD" "WE"'/>
     [java]       <ReceiverPdu geoSystem='"GD" "WE"'/>
     [java]       <SignalPdu geoSystem='"GD" "WE"'/>
     [java]       <TransmitterPdu geoSystem='"GD" "WE"'/>
     [java]       <DISEntityManager>
     [java]         <DISEntityTypeMapping/>
     [java]       </DISEntityManager>
     [java]     </Transform>
     [java]   </Scene>
     [java] </X3D>
     [java] 
     [java] ===========================================
     [java] x3dModel.toStringClassicVRML()
     [java] 
     [java] #X3D V3.3 utf8
     [java] PROFILE Immersive
     [java] # Scene
     [java]   children [
     [java]   ViewpointGroup { 
     [java]      description "Available viewpoints"
     [java]        children [
     [java]       DEF DefaultView Viewpoint { 
     [java]          description "Hello X3DJSAIL"
     [java]          }
     [java] DEF TopDownView Viewpoint { 
     [java]          description "top-down view from above"
     [java]          orientation 1 0 0 -1.570796
     [java]          position 0 100 0
     [java]          }
     [java]       ]
     [java]     }
     [java] NavigationInfo { 
     [java]      avatarSize [ 0.25 1.6 0.75 ]
     [java]      transitionType [ "LINEAR" ]
     [java]      type [ "EXAMINE" "FLY" "ANY" ]
     [java]      }
     [java] DEF WorldInfoDEF WorldInfo { 
     [java]      title "HelloWorldProgram produced by X3D Java SAI Library (X3DJSAIL)"
     [java]      }
     [java] USE WorldInfoDEF
     [java] USE WorldInfoDEF
     [java] DEF scene.addChildMetadata MetadataString { 
     [java]      name "test"
     [java]      value [ "Top-level root Metadata node beneath Scene needs to be one of &apos;-children&apos; in JSON encoding" ]
     [java]      }
     [java] DEF scene.addChildLayerSetTest LayerSet { 
     [java]      order [ 0 ]
     [java]      }
     [java] DEF LogoGeometryTransform Transform { 
     [java]      translation 0 1.5 0
     [java]        children [
     [java]       Anchor { 
     [java]          description "select for X3D Java SAI Library (X3DJSAIL) description"
     [java]          url [ "../X3DJSAIL.html" "https://www.web3d.org/specifications/java/X3DJSAIL.html" ]
     [java]            children [
     [java]           DEF BoxShape Shape { 
     [java]               appearance Appearance { 
     [java]                 material DEF GreenMaterial Material { 
     [java]                  diffuseColor 0 1 1
     [java]                  emissiveColor 0.8 0 0
     [java]                  transparency 0.1
     [java]                  }
     [java]                texture ImageTexture { 
     [java]                  url [ "images/X3dJavaSceneAccessInterfaceSaiLibrary.png" "https://www.web3d.org/specifications/java/examples/images/X3dJavaSceneAccessInterfaceSaiLibrary.png" ]
     [java]                  }
     [java]               }
     [java]              geometry DEF test-NMTOKEN_regex.0123456789 Box { 
     [java]                # class "untextured"
     [java]                }
     [java]             }
     [java]           ]
     [java]         }
     [java]       ]
     [java]     }
     [java] DEF LineShape Shape { 
     [java]       appearance Appearance { 
     [java]         material Material { 
     [java]          emissiveColor 0.6 0.19607843 0.8
     [java]          }
     [java]       }
     [java]      geometry IndexedLineSet { 
     [java]        coordIndex [ 0 1 2 3 4 0 ]
     [java]         coord Coordinate { 
     [java]          point [ 0 1.5 0 2 1.5 0 2 1.5 -2 -2 1.5 -2 -2 1.5 0 0 1.5 0 ]
     [java]          }
     [java]       # Coordinate 3-tuple point count: 6
     [java]             }
     [java]     }
     [java] DEF BoxPathAnimator PositionInterpolator { 
     [java]      key [ 0 0.125 0.375 0.625 0.875 1 ]
     [java]      keyValue [ 0 1.5 0 2 1.5 0 2 1.5 -2 -2 1.5 -2 -2 1.5 0 0 1.5 0 ]
     [java]      }
     [java] DEF OrbitClock TimeSensor { 
     [java]      cycleInterval 8.0
     [java]      loop true
     [java]      }
     [java] ROUTE OrbitClock.fraction_changed TO BoxPathAnimator.set_fraction
     [java]     ROUTE BoxPathAnimator.value_changed TO LogoGeometryTransform.set_translation
     [java]     DEF TextTransform Transform { 
     [java]      translation 0 -1.5 0
     [java]        children [
     [java]       Shape { 
     [java]           appearance Appearance { 
     [java]             material USE GreenMaterial
     [java]           }
     [java]          geometry Text { 
     [java]            string [ "X3D Java" "SAI Library" "X3DJSAIL" ]
     [java]             metadata MetadataSet { 
     [java]              name "EscapedQuotationMarksMetadataSet"
     [java]                value [
     [java]               MetadataString { 
     [java]                  name "quotesTestC"
     [java]                  value [ "MFString example C, backslash-escaped quotes: He said, \"Immel did it!\"" ]
     [java]                  }
     [java] MetadataString { 
     [java]                  name "extraChildTest"
     [java]                  value [ "checks MetadataSetObject addValue() method" ]
     [java]                  }
     [java]               ]
     [java]             }
     [java]            fontStyle FontStyle { 
     [java]              family [ "SERIF" ]
     [java]              justify [ "MIDDLE" "MIDDLE" ]
     [java]              }
     [java]           # Comment example A, plain quotation marks: He said, "Immel did it!"
     [java]           # Comment example B, XML character entities: He said, &quot;Immel did it!&quot;
     [java]                     }
     [java]         }
     [java] Collision { 
     [java]            children [
     [java]           # test containerField='proxy'
     [java]                       ]
     [java]          proxy DEF ProxyShape Shape { 
     [java]             geometry Text { 
     [java]              string [ "One, Two, Text" "" "He said, \"Immel did it!\" \"\"" ]
     [java]              }
     [java]           #  alternative XML encoding: Text string='"One, Two, Comment" "" "He said, \&quot;Immel did it!\&quot;"' 
     [java]           #  alternative XML encoding: Text string='"One, Two, Comment" "" "He said, \&quot;Immel did it!\&quot;" ""' 
     [java]           #  alternative Java source: .setString(new String [] {"One, Two, Comment", "", "He said, \"Immel did it!\""})
     [java]           #  reference: https://www.web3d.org/x3d/content/examples/Basic/X3dSpecifications/StringArrayEncodingExamplesIndex.html 
     [java]                     }
     [java]         }
     [java] # It's a beautiful world
     [java]         # ... for you!
     [java]         # https://en.wikipedia.org/wiki/Beautiful_World_(Devo_song)
     [java]               ]
     [java]     }
     [java] # repeatedly spin 180 degrees as a readable special effect
     [java]     DEF SpinInterpolator OrientationInterpolator { 
     [java]      key [ 0 0.5 1 ]
     [java]      keyValue [ 0 1 0 4.712389 0 1 0 0 0 1 0 1.5707964 ]
     [java]      }
     [java] DEF SpinClock TimeSensor { 
     [java]      cycleInterval 5.0
     [java]      loop true
     [java]      }
     [java] ROUTE SpinClock.fraction_changed TO SpinInterpolator.set_fraction
     [java]     ROUTE SpinInterpolator.value_changed TO TextTransform.rotation
     [java]     DEF BackgroundGroup Group { 
     [java]        children [
     [java]       DEF GradualBackground Background { 
     [java]          }
     [java] DEF colorTypeConversionScript Script { 
     [java]           inputOnly SFColor colorInput
     [java]           outputOnly MFColor colorsOutput          url [ "ecmascript:
     [java] 
     [java] function colorInput (eventValue) // Example source code
     [java] {
     [java]    colorsOutput = new MFColor(eventValue); // assigning value sends output event
     [java] // Browser.print('colorInput=' + eventValue + ', colorsOutput=' + colorsOutput + '\n');
     [java] }
     [java] " ]
     [java] }
     [java] DEF ColorAnimator ColorInterpolator { 
     [java]          key [ 0 0.5 1 ]
     [java]          keyValue [ 0.9411765 1 1 0.29411766 0 0.50980395 0.9411765 1 1 ]
     [java]          # AZURE to INDIGO and back again
     [java]                 }
     [java] DEF ColorClock TimeSensor { 
     [java]          cycleInterval 60.0
     [java]          loop true
     [java]          }
     [java] ROUTE colorTypeConversionScript.colorsOutput TO GradualBackground.skyColor
     [java]         ROUTE ColorAnimator.value_changed TO colorTypeConversionScript.colorInput
     [java]         ROUTE ColorClock.fraction_changed TO ColorAnimator.set_fraction
     [java]               ]
     [java]     }
     [java] PROTO ArtDeco01Material [
     [java]            # [appinfo] "tooltip: ArtDeco01Material prototype is a Material node"
     [java]       # ProtoInterface
     [java]         inputOutput SFString description "ArtDeco01Material prototype is a Material node" # [appinfo] "tooltip for descriptionField"
     [java]       
     [java]         inputOutput SFBool enabled true] {
     [java]     
     [java]       # ProtoBody
     [java]       # Initial node of ProtoBody determines prototype node type
     [java]       Material { 
     [java]        ambientIntensity 0.25
     [java]        diffuseColor 0.282435 0.085159 0.134462
     [java]        shininess 0.127273
     [java]        specularColor 0.276305 0.11431 0.139857
     [java]        }
     [java] # [HelloWorldProgram diagnostic] should be connected to scene graph: artDeco01ProtoDeclare.getNodeType()="Material"
     [java]       #  presence of follow-on TouchSensor shows that additional nodes are allowed in ProtoBody after initial node, regardless of node types
     [java]       TouchSensor { 
     [java]         description IS description
     [java]         enabled IS enabled
     [java]        nodeField "description"
     [java] protoField "description"
     [java] nodeField "enabled"
     [java] protoField "enabled"
     [java] }
     [java] }
     [java]     EXTERNPROTO ArtDeco02Material [
     [java]            # [appinfo] "this is a different Material node"
     [java]      url [ "http://X3dGraphics.com/examples/X3dForWebAuthors/Chapter14Prototypes/ArtDecoPrototypesExcerpt.x3d#ArtDeco02Material" "http://X3dGraphics.com/examples/X3dForWebAuthors/Chapter14Prototypes/ArtDecoPrototypesExcerpt.x3dv#ArtDeco02Material" ]
     [java]       inputOutput SFString description # [appinfo] "tooltip for descriptionField"
     [java]     # [HelloWorldProgram diagnostic] artDeco02ExternProtoDeclare.getNodeType()="ERROR_UNKNOWN_EXTERNPROTODECLARE_NODE_TYPE: ExternProtoDeclare name='ArtDeco02Material' type cannot be remotely accessed at run time. TODO X3DJSAIL needs to add further capability that retrieves the ExternProtoDeclare file."
     [java]     ]
     [java]     # Tested ArtDeco01ProtoInstance, ArtDeco02ProtoInstance for improper node type when ProtoInstance is added in wrong place
     [java]     DEF TestShape1 Shape { 
     [java]       appearance DEF TestAppearance1 Appearance { 
     [java]         material ArtDeco01Material { name "ArtDeco01Material"
     [java] 
     [java]           description "ArtDeco01Material can substitute for a Material node"# [HelloWorldProgram diagnostic] ArtDeco01ProtoInstance.getNodeType()="Material"
     [java]                 }
     [java]       # ArtDeco01Material prototype goes here... TODO ensure setContainerField is handled in exported Java
     [java]             }
     [java]      geometry Sphere { 
     [java]        radius 0.001
     [java]        }
     [java]     }
     [java] DEF TestShape2 Shape { 
     [java]       appearance DEF TestAppearance2 Appearance { 
     [java]         material DEF ArtDeco02MaterialDEF ArtDeco02Material { name "ArtDeco02Material"
     [java] 
     [java]           description "ArtDeco02Material can substitute for another Material node"# [HelloWorldProgram diagnostic] ArtDeco02ProtoInstance.getNodeType()="ERROR_UNKNOWN_EXTERNPROTODECLARE_NODE_TYPE: ExternProtoDeclare name='ArtDeco02Material' type cannot be remotely accessed at run time. TODO X3DJSAIL needs to add further capability that retrieves the ExternProtoDeclare file."
     [java]                 }
     [java]       # ArtDeco02Material prototype goes here... TODO ensure setContainerField is handled in exported Java
     [java]             }
     [java]      geometry Cone { 
     [java]        bottomRadius 0.001
     [java]        height 0.001
     [java]        }
     [java]     }
     [java] DEF TestShape3 Shape { 
     [java]       appearance DEF TestAppearance3 Appearance { 
     [java]         material USE ArtDeco02MaterialDEF
     [java]         }
     [java]       # ArtDeco02Material ProtoInstance USE goes here. Note that name field is NOT defined as part of ProtoInstance USE. 
     [java]             }
     [java]      geometry Cylinder { 
     [java]        height 0.001
     [java]        radius 0.001
     [java]        }
     [java]     }
     [java] DEF inlineSceneDef Inline { 
     [java]      url [ "someOtherScene.x3d" "https://www.web3d.org/specifications/java/examples/someOtherScene.x3d" ]
     [java]      }
     [java] IMPORT inlineSceneDef.WorldInfoDEF AS WorldInfoDEF2 
     [java]     EXPORT WorldInfoDEF AS WorldInfoDEF3 
     [java]     PROTO MaterialModulator [
     [java]            # [appinfo] "mimic a Material node and modulate fields as an animation effect"
     [java]       # [documentation] "http://x3dgraphics.com/examples/X3dForWebAuthors/Chapter14Prototypes/MaterialModulatorIndex.html"
     [java]      
     [java]       # ProtoInterface
     [java]         inputOutput SFBool enabled true
     [java]         inputOutput SFColor diffuseColor 0 0 0
     [java]         inputOutput SFColor emissiveColor 0.05 0.05 0.5
     [java]         inputOutput SFColor specularColor 0 0 0
     [java]         inputOutput SFFloat transparency 0.0
     [java]         inputOutput SFFloat shininess 0.0
     [java]         inputOutput SFFloat ambientIntensity 0.0] {
     [java]     
     [java]       # ProtoBody
     [java]       DEF MaterialNode Material { 
     [java]         ambientIntensity IS ambientIntensity
     [java]         diffuseColor IS diffuseColor
     [java]         emissiveColor IS emissiveColor
     [java]         shininess IS shininess
     [java]         specularColor IS specularColor
     [java]         transparency IS transparency
     [java]        nodeField "diffuseColor"
     [java] protoField "diffuseColor"
     [java] nodeField "emissiveColor"
     [java] protoField "emissiveColor"
     [java] nodeField "specularColor"
     [java] protoField "specularColor"
     [java] nodeField "transparency"
     [java] protoField "transparency"
     [java] nodeField "shininess"
     [java] protoField "shininess"
     [java] nodeField "ambientIntensity"
     [java] protoField "ambientIntensity"
     [java] }
     [java] # Only first node (the node type) is renderable, others are along for the ride
     [java]       DEF MaterialModulatorScript Script { 
     [java]         inputOutput SFBool enabled
     [java]         inputOutput SFColor diffuseColor
     [java]         outputOnly SFColor newColor
     [java]         inputOnly SFTime clockTriggernodeField "enabled"
     [java] protoField "enabled"
     [java] nodeField "diffuseColor"
     [java] protoField "diffuseColor"
     [java]         url [ "ecmascript:
     [java] function initialize ()
     [java] {
     [java]     newColor = diffuseColor; // start with correct color
     [java] }
     [java] function set_enabled (newValue)
     [java] {
     [java] 	enabled = newValue;
     [java] }
     [java] function clockTrigger (timeValue)
     [java] {
     [java]     if (!enabled) return;
     [java]     red   = newColor.r;
     [java]     green = newColor.g;
     [java]     blue  = newColor.b;
     [java]     
     [java]     // note different modulation rates for each color component, % is modulus operator
     [java]     newColor = new SFColor ((red + 0.02) % 1, (green + 0.03) % 1, (blue + 0.04) % 1);
     [java] 	if (enabled)
     [java] 	{
     [java] 		Browser.print ('diffuseColor=(' + red + ',' + green + ',' + blue + ') newColor=' + newColor.toString() + '\n');
     [java] 	}
     [java] }
     [java] " ]
     [java] }
     [java] }
     [java]     # Test success: declarative statement createDeclarativeShapeTests()
     [java]     DEF DeclarativeGroupExample Group { 
     [java]        children [
     [java]       Shape { 
     [java]           metadata DEF FindableMetadataStringTest MetadataString { 
     [java]            name "findThisNameValue"
     [java]            value [ "test case" ]
     [java]            }
     [java]          appearance DEF DeclarativeAppearanceExample Appearance { 
     [java]             material DEF MyMaterialModulator MaterialModulator { name "MaterialModulator"
     [java]             }
     [java]           # DeclarativeMaterialExample gets overridden by subsequently added MaterialModulator ProtoInstance
     [java]                     }
     [java]          geometry Cone { 
     [java]            bottom false
     [java]            bottomRadius 0.05
     [java]            height 0.1
     [java]            }
     [java]         }
     [java] # Test success: declarativeGroup.addChild() singleton pipeline method
     [java]               ]
     [java]     }
     [java] # Test success: declarative statement addChild()
     [java]     # Test success: x3dModel.findNodeByDEF(DeclarativeAppearanceExample) = <Appearance DEF='DeclarativeAppearanceExample'/> i.e. <Appearance DEF='DeclarativeAppearanceExample'> <!-- DeclarativeMaterialExample gets overridden by subsequently added MaterialModulator ProtoInstance --> <ProtoInstance DEF='MyMaterialModulator' name='MaterialModulator' containerField='material'/> </Appearance>
     [java]     # Test success: x3dModel.findElementByNameValue(findThisNameValue) = <MetadataString DEF='FindableMetadataStringTest' name='findThisNameValue' value='"test case"'/>
     [java]     # Test success: x3dModel.findElementByNameValue("ArtDeco01Material", "ProtoDeclare") found
     [java]     # Test success: x3dModel.findElementByNameValue("MaterialModulator", "ProtoDeclare") found
     [java]     # Test success: x3dModel.findElementByNameValue("MaterialModulator", "ProtoInstance") found
     [java]     DEF TestFieldObjectsGroup Group { 
     [java]        children [
     [java]       # testFieldObjects() results
     [java]         # SFBool default=true, true=true, false=false, negate()=true
     [java]         # MFBool default=, initial=true false true, negate()=false true false
     [java]         # SFFloat default=0.0, initial=1.0, setValue(2)=2.0, setValue(3.0f)=3.0, setValue(4.0)=4.0
     [java]         # MFFloat default=, initial=1 2 3, append(5)=1 2 3 5, inserts(3,4)(0,0)=0 1 2 3 4 5, append(6)=0 1 2 3 4 5 6, size()=7
     [java]         # ... get1Value[3]=3.0, remove[1]=0 2 3 4 5 6, set1Value(0,10)=10 2 3 4 5 6, multiply(2)=20 4 6 8 10 12, clear=
     [java]         # SFVec3f default=0 0 0, initial=1 2 3, setValue=4 5 6, multiply(2)=8 10 12, normalize()=0.45584232 0.5698029 0.68376344, regex matches()=true
     [java]         # regex test SFVec3f().matches("1 2 3")=true, regex test SFVec3f().matches("1 2 3 4")=false, regex test (SFRotationObject.matches("0 0 0 0")=true, failure detecting illegal (zero axis) rotation value
     [java]               ]
     [java]     }
     [java] Sound { 
     [java]      location 0 1.6 0
     [java]       source AudioClip { 
     [java]        description "chimes"
     [java]        url [ "chimes.wav" "https://www.web3d.org/x3d/content/examples/ConformanceNist/Sounds/AudioClip/chimes.wav" ]
     [java]        # Scene example fragment from https://www.web3d.org/x3d/content/examples/ConformanceNist/Sounds/AudioClip/default.x3d
     [java]             }
     [java]     # set sound-ellipsoid location height at 1.6m to match typical avatar height
     [java]         }
     [java] Sound { 
     [java]      location 0 1.6 0
     [java]       source MovieTexture { 
     [java]        description "mpgsys.mpg from ConformanceNist suite"
     [java]        url [ "mpgsys.mpg" "https://www.web3d.org/x3d/content/examples/ConformanceNist/Appearance/MovieTexture/mpgsys.mpg" ]
     [java]        # Scene example fragment from https://www.web3d.org/x3d/content/examples/ConformanceNist/Appearance/MovieTexture/mpeg1-systems.x3d
     [java]       # Expected containerField='source', allowed containerField values="texture" "source" "back" "bottom" "front" "left" "right" "top" "backTexture" "bottomTexture" "frontTexture" "leftTexture" "rightTexture" "topTexture" "watchList"
     [java]             }
     [java]     # set sound-ellipsoid location height at 1.6m to match typical avatar height
     [java]         }
     [java] # Test success: AnchorObject.isNode()=true, siteAnchor.isNode()=true
     [java]     # Test success: AnchorObject.isStatement()=false, siteAnchor.isStatement()=false
     [java]     # Test success: ROUTEObject.isNode()=false, orbitPositionROUTE.isNode()=false
     [java]     # Test success: ROUTEObject.isStatement()=true, orbitPositionROUTE.isStatement()=true
     [java]     # Test success: CommentsBlock.isNode()=false, testComments.isNode()=false
     [java]     # Test failure: CommentsBlock.isStatement()=true, testComments.isStatement()=true
     [java]     DEF ExtrusionShape Shape { 
     [java]       appearance DEF TransparentAppearance Appearance { 
     [java]         material Material { 
     [java]          transparency 1.0
     [java]          }
     [java]       }
     [java]      geometry DEF ExampleExtrusion Extrusion { 
     [java]        }
     [java]     # ExampleExtrusion isCrossSectionClosed()=true, crossSection='[1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0]'
     [java]     # ExampleExtrusion isSpineClosed()=false, spine='[0.0, 0.0, 0.0, 0.0, 1.0, 0.0]'
     [java]         }
     [java] Group { 
     [java]        children [
     [java]       # Test MFNode children array as an ordered list consisting of comments, statements, ProtoInstance and nodes
     [java]         PROTO NewWorldInfo [
     [java]         
     [java]           # ProtoInterface
     [java]             initializeOnly SFString description] {
     [java]         
     [java]           # ProtoBody
     [java]           WorldInfo { 
     [java]            }
     [java] }
     [java]         DEF Proto1 NewWorldInfo { name "NewWorldInfo"
     [java] 
     [java]           description "testing 1 2 3"        }
     [java] DEF Node2 Group { 
     [java]            children [
     [java]           # intentionally empty
     [java]                       ]
     [java]         }
     [java] DEF Proto3 NewWorldInfo { name "NewWorldInfo"
     [java]         }
     [java] DEF Node4 Transform { 
     [java]            children [
     [java]           # intentionally empty
     [java]                       ]
     [java]         }
     [java] # Test satisfactorily creates MFNode children array as an ordered list with mixed content
     [java]               ]
     [java]     }
     [java] PROTO ShaderProto [
     [java]     ] {
     [java]     
     [java]       # ProtoBody
     [java]       ProgramShader { 
     [java]        }
     [java] }
     [java]     Shape { 
     [java]       appearance Appearance { 
     [java]          shaders [
     [java]         DEF TestShader1 ProgramShader { 
     [java]              programs [
     [java]             DEF TestShader2 ShaderProgram { 
     [java]                }
     [java]             ]
     [java]           }
     [java] DEF TestShader3 ShaderProto { name "ShaderProto"
     [java]           }
     [java] DEF TestShader4 ComposedShader { 
     [java]              parts [
     [java]             DEF TestShader5 ShaderPart { 
     [java]                }
     [java]             ]
     [java]           }
     [java]         ]
     [java]       # Test MFNode shaders array as an ordered list consisting of comments, ProtoInstance and nodes
     [java]       # Test satisfactorily creates MFNode shaders array as an ordered list with mixed content
     [java]             }
     [java]     }
     [java] DEF SpecialtyNodes Transform { 
     [java]        children [
     [java]       CADLayer { 
     [java]            children [
     [java]           CADAssembly { 
     [java]                children [
     [java]               CADPart { 
     [java]                    children [
     [java]                   CADFace { 
     [java]                      }
     [java]                   ]
     [java]                 }
     [java]               ]
     [java]             }
     [java]           ]
     [java]         }
     [java] EspduTransform { 
     [java]          geoSystem [ "GD" "WE" ]
     [java]          }
     [java] ReceiverPdu { 
     [java]          geoSystem [ "GD" "WE" ]
     [java]          }
     [java] SignalPdu { 
     [java]          geoSystem [ "GD" "WE" ]
     [java]          }
     [java] TransmitterPdu { 
     [java]          geoSystem [ "GD" "WE" ]
     [java]          }
     [java] DISEntityManager { 
     [java]            mapping [
     [java]           DISEntityTypeMapping { 
     [java]              }
     [java]           ]
     [java]         }
     [java]       ]
     [java]     }
     [java]   ]
     [java] # head
     [java] COMPONENT Navigation:3
     [java] COMPONENT Shaders:1
     [java] COMPONENT CADGeometry:2
     [java] COMPONENT DIS:2
     [java] COMPONENT H-Anim:1
     [java] COMPONENT Grouping:1
     [java] COMPONENT Layering:1
     [java] UNIT angle AngleUnitConversion 1.0
     [java] UNIT length LengthUnitConversion 1.0
     [java] UNIT force ForceFromPoundsToNewtons 4.4482
     [java] META "title" "HelloWorldProgramOutput.x3d"
     [java] META "info" "continued development and testing in progress"
     [java] META "description" "Example HelloWorldProgram creates an X3D model using the X3D Java Scene Access Interface Library (X3DJSAIL)"
     [java] META "reference" "https://www.web3d.org/specifications/java/X3DJSAIL.html"
     [java] META "generator" "HelloWorldProgramOutput.java"
     [java] META "created" "6 September 2016"
     [java] META "modified" "13 January 2020"
     [java] META "generator" "X3D Java Scene Access Interface Library (X3DJSAIL)"
     [java] META "generator" "https://www.web3d.org/specifications/java/examples/HelloWorldProgram.java"
     [java] META "generator" "Netbeans http://www.netbeans.org"
     [java] META "creator" "Don Brutzman"
     [java] META "reference" "https://sourceforge.net/p/x3d/code/HEAD/tree/www.web3d.org/x3d/stylesheets/java/examples/HelloWorldProgramOutput.x3d"
     [java] META "reference" "Console output, ClassicVRML encoding, VRML97 encoding and pretty-print documentation:"
     [java] META "reference" "HelloWorldProgramOutput.txt"
     [java] META "reference" "HelloWorldProgramOutput.x3dv"
     [java] META "reference" "HelloWorldProgramOutput.wrl"
     [java] META "reference" "HelloWorldProgramOutput.html"
     [java] META "reference" "https://savage.nps.edu/X3dValidator?url=https://www.web3d.org/specifications/java/examples/HelloWorldProgramOutput.x3d"
     [java] META "identifier" "https://www.web3d.org/specifications/java/examples/HelloWorldProgramOutput.x3d"
     [java] META "license" "../license.html"
     [java] # comment #1
     [java] # comment #2
     [java] # comment #3
     [java] # comment #4
     [java] # x3dVersionComparisonTest for this model: supportsX3dVersion(X3DObject.VERSION_3_0)=true
     [java] 
     [java] ===========================================
     [java] x3dModel.toStringVRML97()
     [java] 
     [java] #VRML V2.0 utf8
     [java] #PROFILE Immersive
     [java] # Scene
     [java]   children [
     [java]   ViewpointGroup { 
     [java]      description "Available viewpoints"
     [java]        children [
     [java]       DEF DefaultView Viewpoint { 
     [java]          description "Hello X3DJSAIL"
     [java]          }
     [java] DEF TopDownView Viewpoint { 
     [java]          description "top-down view from above"
     [java]          orientation 1 0 0 -1.570796
     [java]          position 0 100 0
     [java]          }
     [java]       ]
     [java]     }
     [java] NavigationInfo { 
     [java]      avatarSize [ 0.25 1.6 0.75 ]
     [java]      transitionType [ "LINEAR" ]
     [java]      type [ "EXAMINE" "FLY" "ANY" ]
     [java]      }
     [java] DEF WorldInfoDEF WorldInfo { 
     [java]      title "HelloWorldProgram produced by X3D Java SAI Library (X3DJSAIL)"
     [java]      }
     [java] USE WorldInfoDEF
     [java] USE WorldInfoDEF
     [java] DEF scene.addChildMetadata MetadataString { 
     [java]      name "test"
     [java]      value [ "Top-level root Metadata node beneath Scene needs to be one of &apos;-children&apos; in JSON encoding" ]
     [java]      }
     [java] DEF scene.addChildLayerSetTest LayerSet { 
     [java]      order [ 0 ]
     [java]      }
     [java] DEF LogoGeometryTransform Transform { 
     [java]      translation 0 1.5 0
     [java]        children [
     [java]       Anchor { 
     [java]          description "select for X3D Java SAI Library (X3DJSAIL) description"
     [java]          url [ "../X3DJSAIL.html" "https://www.web3d.org/specifications/java/X3DJSAIL.html" ]
     [java]            children [
     [java]           DEF BoxShape Shape { 
     [java]               appearance Appearance { 
     [java]                 material DEF GreenMaterial Material { 
     [java]                  diffuseColor 0 1 1
     [java]                  emissiveColor 0.8 0 0
     [java]                  transparency 0.1
     [java]                  }
     [java]                texture ImageTexture { 
     [java]                  url [ "images/X3dJavaSceneAccessInterfaceSaiLibrary.png" "https://www.web3d.org/specifications/java/examples/images/X3dJavaSceneAccessInterfaceSaiLibrary.png" ]
     [java]                  }
     [java]               }
     [java]              geometry DEF test-NMTOKEN_regex.0123456789 Box { 
     [java]                # class "untextured"
     [java]                }
     [java]             }
     [java]           ]
     [java]         }
     [java]       ]
     [java]     }
     [java] DEF LineShape Shape { 
     [java]       appearance Appearance { 
     [java]         material Material { 
     [java]          emissiveColor 0.6 0.19607843 0.8
     [java]          }
     [java]       }
     [java]      geometry IndexedLineSet { 
     [java]        coordIndex [ 0 1 2 3 4 0 ]
     [java]         coord Coordinate { 
     [java]          point [ 0 1.5 0 2 1.5 0 2 1.5 -2 -2 1.5 -2 -2 1.5 0 0 1.5 0 ]
     [java]          }
     [java]       # Coordinate 3-tuple point count: 6
     [java]             }
     [java]     }
     [java] DEF BoxPathAnimator PositionInterpolator { 
     [java]      key [ 0 0.125 0.375 0.625 0.875 1 ]
     [java]      keyValue [ 0 1.5 0 2 1.5 0 2 1.5 -2 -2 1.5 -2 -2 1.5 0 0 1.5 0 ]
     [java]      }
     [java] DEF OrbitClock TimeSensor { 
     [java]      cycleInterval 8.0
     [java]      loop true
     [java]      }
     [java] ROUTE OrbitClock.fraction_changed TO BoxPathAnimator.set_fraction
     [java]     ROUTE BoxPathAnimator.value_changed TO LogoGeometryTransform.set_translation
     [java]     DEF TextTransform Transform { 
     [java]      translation 0 -1.5 0
     [java]        children [
     [java]       Shape { 
     [java]           appearance Appearance { 
     [java]             material USE GreenMaterial
     [java]           }
     [java]          geometry Text { 
     [java]            string [ "X3D Java" "SAI Library" "X3DJSAIL" ]
     [java]             metadata MetadataSet { 
     [java]              name "EscapedQuotationMarksMetadataSet"
     [java]                value [
     [java]               MetadataString { 
     [java]                  name "quotesTestC"
     [java]                  value [ "MFString example C, backslash-escaped quotes: He said, \"Immel did it!\"" ]
     [java]                  }
     [java] MetadataString { 
     [java]                  name "extraChildTest"
     [java]                  value [ "checks MetadataSetObject addValue() method" ]
     [java]                  }
     [java]               ]
     [java]             }
     [java]            fontStyle FontStyle { 
     [java]              family [ "SERIF" ]
     [java]              justify [ "MIDDLE" "MIDDLE" ]
     [java]              }
     [java]           # Comment example A, plain quotation marks: He said, "Immel did it!"
     [java]           # Comment example B, XML character entities: He said, &quot;Immel did it!&quot;
     [java]                     }
     [java]         }
     [java] Collision { 
     [java]            children [
     [java]           # test containerField='proxy'
     [java]                       ]
     [java]          proxy DEF ProxyShape Shape { 
     [java]             geometry Text { 
     [java]              string [ "One, Two, Text" "" "He said, \"Immel did it!\" \"\"" ]
     [java]              }
     [java]           #  alternative XML encoding: Text string='"One, Two, Comment" "" "He said, \&quot;Immel did it!\&quot;"' 
     [java]           #  alternative XML encoding: Text string='"One, Two, Comment" "" "He said, \&quot;Immel did it!\&quot;" ""' 
     [java]           #  alternative Java source: .setString(new String [] {"One, Two, Comment", "", "He said, \"Immel did it!\""})
     [java]           #  reference: https://www.web3d.org/x3d/content/examples/Basic/X3dSpecifications/StringArrayEncodingExamplesIndex.html 
     [java]                     }
     [java]         }
     [java] # It's a beautiful world
     [java]         # ... for you!
     [java]         # https://en.wikipedia.org/wiki/Beautiful_World_(Devo_song)
     [java]               ]
     [java]     }
     [java] # repeatedly spin 180 degrees as a readable special effect
     [java]     DEF SpinInterpolator OrientationInterpolator { 
     [java]      key [ 0 0.5 1 ]
     [java]      keyValue [ 0 1 0 4.712389 0 1 0 0 0 1 0 1.5707964 ]
     [java]      }
     [java] DEF SpinClock TimeSensor { 
     [java]      cycleInterval 5.0
     [java]      loop true
     [java]      }
     [java] ROUTE SpinClock.fraction_changed TO SpinInterpolator.set_fraction
     [java]     ROUTE SpinInterpolator.value_changed TO TextTransform.rotation
     [java]     DEF BackgroundGroup Group { 
     [java]        children [
     [java]       DEF GradualBackground Background { 
     [java]          }
     [java] DEF colorTypeConversionScript Script { 
     [java]           inputOnly SFColor colorInput
     [java]           outputOnly MFColor colorsOutput          url [ "ecmascript:
     [java] 
     [java] function colorInput (eventValue) // Example source code
     [java] {
     [java]    colorsOutput = new MFColor(eventValue); // assigning value sends output event
     [java] // Browser.print('colorInput=' + eventValue + ', colorsOutput=' + colorsOutput + '\n');
     [java] }
     [java] " ]
     [java] }
     [java] DEF ColorAnimator ColorInterpolator { 
     [java]          key [ 0 0.5 1 ]
     [java]          keyValue [ 0.9411765 1 1 0.29411766 0 0.50980395 0.9411765 1 1 ]
     [java]          # AZURE to INDIGO and back again
     [java]                 }
     [java] DEF ColorClock TimeSensor { 
     [java]          cycleInterval 60.0
     [java]          loop true
     [java]          }
     [java] ROUTE colorTypeConversionScript.colorsOutput TO GradualBackground.skyColor
     [java]         ROUTE ColorAnimator.value_changed TO colorTypeConversionScript.colorInput
     [java]         ROUTE ColorClock.fraction_changed TO ColorAnimator.set_fraction
     [java]               ]
     [java]     }
     [java] PROTO ArtDeco01Material [
     [java]            # [appinfo] "tooltip: ArtDeco01Material prototype is a Material node"
     [java]       # ProtoInterface
     [java]         inputOutput SFString description "ArtDeco01Material prototype is a Material node" # [appinfo] "tooltip for descriptionField"
     [java]       
     [java]         inputOutput SFBool enabled true] {
     [java]     
     [java]       # ProtoBody
     [java]       # Initial node of ProtoBody determines prototype node type
     [java]       Material { 
     [java]        ambientIntensity 0.25
     [java]        diffuseColor 0.282435 0.085159 0.134462
     [java]        shininess 0.127273
     [java]        specularColor 0.276305 0.11431 0.139857
     [java]        }
     [java] # [HelloWorldProgram diagnostic] should be connected to scene graph: artDeco01ProtoDeclare.getNodeType()="Material"
     [java]       #  presence of follow-on TouchSensor shows that additional nodes are allowed in ProtoBody after initial node, regardless of node types
     [java]       TouchSensor { 
     [java]         description IS description
     [java]         enabled IS enabled
     [java]        nodeField "description"
     [java] protoField "description"
     [java] nodeField "enabled"
     [java] protoField "enabled"
     [java] }
     [java] }
     [java]     EXTERNPROTO ArtDeco02Material [
     [java]            # [appinfo] "this is a different Material node"
     [java]      url [ "http://X3dGraphics.com/examples/X3dForWebAuthors/Chapter14Prototypes/ArtDecoPrototypesExcerpt.x3d#ArtDeco02Material" "http://X3dGraphics.com/examples/X3dForWebAuthors/Chapter14Prototypes/ArtDecoPrototypesExcerpt.x3dv#ArtDeco02Material" ]
     [java]       inputOutput SFString description # [appinfo] "tooltip for descriptionField"
     [java]     # [HelloWorldProgram diagnostic] artDeco02ExternProtoDeclare.getNodeType()="ERROR_UNKNOWN_EXTERNPROTODECLARE_NODE_TYPE: ExternProtoDeclare name='ArtDeco02Material' type cannot be remotely accessed at run time. TODO X3DJSAIL needs to add further capability that retrieves the ExternProtoDeclare file."
     [java]     ]
     [java]     # Tested ArtDeco01ProtoInstance, ArtDeco02ProtoInstance for improper node type when ProtoInstance is added in wrong place
     [java]     DEF TestShape1 Shape { 
     [java]       appearance DEF TestAppearance1 Appearance { 
     [java]         material ArtDeco01Material { name "ArtDeco01Material"
     [java] 
     [java]           description "ArtDeco01Material can substitute for a Material node"# [HelloWorldProgram diagnostic] ArtDeco01ProtoInstance.getNodeType()="Material"
     [java]                 }
     [java]       # ArtDeco01Material prototype goes here... TODO ensure setContainerField is handled in exported Java
     [java]             }
     [java]      geometry Sphere { 
     [java]        radius 0.001
     [java]        }
     [java]     }
     [java] DEF TestShape2 Shape { 
     [java]       appearance DEF TestAppearance2 Appearance { 
     [java]         material DEF ArtDeco02MaterialDEF ArtDeco02Material { name "ArtDeco02Material"
     [java] 
     [java]           description "ArtDeco02Material can substitute for another Material node"# [HelloWorldProgram diagnostic] ArtDeco02ProtoInstance.getNodeType()="ERROR_UNKNOWN_EXTERNPROTODECLARE_NODE_TYPE: ExternProtoDeclare name='ArtDeco02Material' type cannot be remotely accessed at run time. TODO X3DJSAIL needs to add further capability that retrieves the ExternProtoDeclare file."
     [java]                 }
     [java]       # ArtDeco02Material prototype goes here... TODO ensure setContainerField is handled in exported Java
     [java]             }
     [java]      geometry Cone { 
     [java]        bottomRadius 0.001
     [java]        height 0.001
     [java]        }
     [java]     }
     [java] DEF TestShape3 Shape { 
     [java]       appearance DEF TestAppearance3 Appearance { 
     [java]         material USE ArtDeco02MaterialDEF
     [java]         }
     [java]       # ArtDeco02Material ProtoInstance USE goes here. Note that name field is NOT defined as part of ProtoInstance USE. 
     [java]             }
     [java]      geometry Cylinder { 
     [java]        height 0.001
     [java]        radius 0.001
     [java]        }
     [java]     }
     [java] DEF inlineSceneDef Inline { 
     [java]      url [ "someOtherScene.x3d" "https://www.web3d.org/specifications/java/examples/someOtherScene.x3d" ]
     [java]      }
     [java] IMPORT inlineSceneDef.WorldInfoDEF AS WorldInfoDEF2 
     [java]     EXPORT WorldInfoDEF AS WorldInfoDEF3 
     [java]     PROTO MaterialModulator [
     [java]            # [appinfo] "mimic a Material node and modulate fields as an animation effect"
     [java]       # [documentation] "http://x3dgraphics.com/examples/X3dForWebAuthors/Chapter14Prototypes/MaterialModulatorIndex.html"
     [java]      
     [java]       # ProtoInterface
     [java]         inputOutput SFBool enabled true
     [java]         inputOutput SFColor diffuseColor 0 0 0
     [java]         inputOutput SFColor emissiveColor 0.05 0.05 0.5
     [java]         inputOutput SFColor specularColor 0 0 0
     [java]         inputOutput SFFloat transparency 0.0
     [java]         inputOutput SFFloat shininess 0.0
     [java]         inputOutput SFFloat ambientIntensity 0.0] {
     [java]     
     [java]       # ProtoBody
     [java]       DEF MaterialNode Material { 
     [java]         ambientIntensity IS ambientIntensity
     [java]         diffuseColor IS diffuseColor
     [java]         emissiveColor IS emissiveColor
     [java]         shininess IS shininess
     [java]         specularColor IS specularColor
     [java]         transparency IS transparency
     [java]        nodeField "diffuseColor"
     [java] protoField "diffuseColor"
     [java] nodeField "emissiveColor"
     [java] protoField "emissiveColor"
     [java] nodeField "specularColor"
     [java] protoField "specularColor"
     [java] nodeField "transparency"
     [java] protoField "transparency"
     [java] nodeField "shininess"
     [java] protoField "shininess"
     [java] nodeField "ambientIntensity"
     [java] protoField "ambientIntensity"
     [java] }
     [java] # Only first node (the node type) is renderable, others are along for the ride
     [java]       DEF MaterialModulatorScript Script { 
     [java]         inputOutput SFBool enabled
     [java]         inputOutput SFColor diffuseColor
     [java]         outputOnly SFColor newColor
     [java]         inputOnly SFTime clockTriggernodeField "enabled"
     [java] protoField "enabled"
     [java] nodeField "diffuseColor"
     [java] protoField "diffuseColor"
     [java]         url [ "ecmascript:
     [java] function initialize ()
     [java] {
     [java]     newColor = diffuseColor; // start with correct color
     [java] }
     [java] function set_enabled (newValue)
     [java] {
     [java] 	enabled = newValue;
     [java] }
     [java] function clockTrigger (timeValue)
     [java] {
     [java]     if (!enabled) return;
     [java]     red   = newColor.r;
     [java]     green = newColor.g;
     [java]     blue  = newColor.b;
     [java]     
     [java]     // note different modulation rates for each color component, % is modulus operator
     [java]     newColor = new SFColor ((red + 0.02) % 1, (green + 0.03) % 1, (blue + 0.04) % 1);
     [java] 	if (enabled)
     [java] 	{
     [java] 		Browser.print ('diffuseColor=(' + red + ',' + green + ',' + blue + ') newColor=' + newColor.toString() + '\n');
     [java] 	}
     [java] }
     [java] " ]
     [java] }
     [java] }
     [java]     # Test success: declarative statement createDeclarativeShapeTests()
     [java]     DEF DeclarativeGroupExample Group { 
     [java]        children [
     [java]       Shape { 
     [java]           metadata DEF FindableMetadataStringTest MetadataString { 
     [java]            name "findThisNameValue"
     [java]            value [ "test case" ]
     [java]            }
     [java]          appearance DEF DeclarativeAppearanceExample Appearance { 
     [java]             material DEF MyMaterialModulator MaterialModulator { name "MaterialModulator"
     [java]             }
     [java]           # DeclarativeMaterialExample gets overridden by subsequently added MaterialModulator ProtoInstance
     [java]                     }
     [java]          geometry Cone { 
     [java]            bottom false
     [java]            bottomRadius 0.05
     [java]            height 0.1
     [java]            }
     [java]         }
     [java] # Test success: declarativeGroup.addChild() singleton pipeline method
     [java]               ]
     [java]     }
     [java] # Test success: declarative statement addChild()
     [java]     # Test success: x3dModel.findNodeByDEF(DeclarativeAppearanceExample) = <Appearance DEF='DeclarativeAppearanceExample'/> i.e. <Appearance DEF='DeclarativeAppearanceExample'> <!-- DeclarativeMaterialExample gets overridden by subsequently added MaterialModulator ProtoInstance --> <ProtoInstance DEF='MyMaterialModulator' name='MaterialModulator' containerField='material'/> </Appearance>
     [java]     # Test success: x3dModel.findElementByNameValue(findThisNameValue) = <MetadataString DEF='FindableMetadataStringTest' name='findThisNameValue' value='"test case"'/>
     [java]     # Test success: x3dModel.findElementByNameValue("ArtDeco01Material", "ProtoDeclare") found
     [java]     # Test success: x3dModel.findElementByNameValue("MaterialModulator", "ProtoDeclare") found
     [java]     # Test success: x3dModel.findElementByNameValue("MaterialModulator", "ProtoInstance") found
     [java]     DEF TestFieldObjectsGroup Group { 
     [java]        children [
     [java]       # testFieldObjects() results
     [java]         # SFBool default=true, true=true, false=false, negate()=true
     [java]         # MFBool default=, initial=true false true, negate()=false true false
     [java]         # SFFloat default=0.0, initial=1.0, setValue(2)=2.0, setValue(3.0f)=3.0, setValue(4.0)=4.0
     [java]         # MFFloat default=, initial=1 2 3, append(5)=1 2 3 5, inserts(3,4)(0,0)=0 1 2 3 4 5, append(6)=0 1 2 3 4 5 6, size()=7
     [java]         # ... get1Value[3]=3.0, remove[1]=0 2 3 4 5 6, set1Value(0,10)=10 2 3 4 5 6, multiply(2)=20 4 6 8 10 12, clear=
     [java]         # SFVec3f default=0 0 0, initial=1 2 3, setValue=4 5 6, multiply(2)=8 10 12, normalize()=0.45584232 0.5698029 0.68376344, regex matches()=true
     [java]         # regex test SFVec3f().matches("1 2 3")=true, regex test SFVec3f().matches("1 2 3 4")=false, regex test (SFRotationObject.matches("0 0 0 0")=true, failure detecting illegal (zero axis) rotation value
     [java]               ]
     [java]     }
     [java] Sound { 
     [java]      location 0 1.6 0
     [java]       source AudioClip { 
     [java]        description "chimes"
     [java]        url [ "chimes.wav" "https://www.web3d.org/x3d/content/examples/ConformanceNist/Sounds/AudioClip/chimes.wav" ]
     [java]        # Scene example fragment from https://www.web3d.org/x3d/content/examples/ConformanceNist/Sounds/AudioClip/default.x3d
     [java]             }
     [java]     # set sound-ellipsoid location height at 1.6m to match typical avatar height
     [java]         }
     [java] Sound { 
     [java]      location 0 1.6 0
     [java]       source MovieTexture { 
     [java]        description "mpgsys.mpg from ConformanceNist suite"
     [java]        url [ "mpgsys.mpg" "https://www.web3d.org/x3d/content/examples/ConformanceNist/Appearance/MovieTexture/mpgsys.mpg" ]
     [java]        # Scene example fragment from https://www.web3d.org/x3d/content/examples/ConformanceNist/Appearance/MovieTexture/mpeg1-systems.x3d
     [java]       # Expected containerField='source', allowed containerField values="texture" "source" "back" "bottom" "front" "left" "right" "top" "backTexture" "bottomTexture" "frontTexture" "leftTexture" "rightTexture" "topTexture" "watchList"
     [java]             }
     [java]     # set sound-ellipsoid location height at 1.6m to match typical avatar height
     [java]         }
     [java] # Test success: AnchorObject.isNode()=true, siteAnchor.isNode()=true
     [java]     # Test success: AnchorObject.isStatement()=false, siteAnchor.isStatement()=false
     [java]     # Test success: ROUTEObject.isNode()=false, orbitPositionROUTE.isNode()=false
     [java]     # Test success: ROUTEObject.isStatement()=true, orbitPositionROUTE.isStatement()=true
     [java]     # Test success: CommentsBlock.isNode()=false, testComments.isNode()=false
     [java]     # Test failure: CommentsBlock.isStatement()=true, testComments.isStatement()=true
     [java]     DEF ExtrusionShape Shape { 
     [java]       appearance DEF TransparentAppearance Appearance { 
     [java]         material Material { 
     [java]          transparency 1.0
     [java]          }
     [java]       }
     [java]      geometry DEF ExampleExtrusion Extrusion { 
     [java]        }
     [java]     # ExampleExtrusion isCrossSectionClosed()=true, crossSection='[1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0]'
     [java]     # ExampleExtrusion isSpineClosed()=false, spine='[0.0, 0.0, 0.0, 0.0, 1.0, 0.0]'
     [java]         }
     [java] Group { 
     [java]        children [
     [java]       # Test MFNode children array as an ordered list consisting of comments, statements, ProtoInstance and nodes
     [java]         PROTO NewWorldInfo [
     [java]         
     [java]           # ProtoInterface
     [java]             initializeOnly SFString description] {
     [java]         
     [java]           # ProtoBody
     [java]           WorldInfo { 
     [java]            }
     [java] }
     [java]         DEF Proto1 NewWorldInfo { name "NewWorldInfo"
     [java] 
     [java]           description "testing 1 2 3"        }
     [java] DEF Node2 Group { 
     [java]            children [
     [java]           # intentionally empty
     [java]                       ]
     [java]         }
     [java] DEF Proto3 NewWorldInfo { name "NewWorldInfo"
     [java]         }
     [java] DEF Node4 Transform { 
     [java]            children [
     [java]           # intentionally empty
     [java]                       ]
     [java]         }
     [java] # Test satisfactorily creates MFNode children array as an ordered list with mixed content
     [java]               ]
     [java]     }
     [java] PROTO ShaderProto [
     [java]     ] {
     [java]     
     [java]       # ProtoBody
     [java]       ProgramShader { 
     [java]        }
     [java] }
     [java]     Shape { 
     [java]       appearance Appearance { 
     [java]          shaders [
     [java]         DEF TestShader1 ProgramShader { 
     [java]              programs [
     [java]             DEF TestShader2 ShaderProgram { 
     [java]                }
     [java]             ]
     [java]           }
     [java] DEF TestShader3 ShaderProto { name "ShaderProto"
     [java]           }
     [java] DEF TestShader4 ComposedShader { 
     [java]              parts [
     [java]             DEF TestShader5 ShaderPart { 
     [java]                }
     [java]             ]
     [java]           }
     [java]         ]
     [java]       # Test MFNode shaders array as an ordered list consisting of comments, ProtoInstance and nodes
     [java]       # Test satisfactorily creates MFNode shaders array as an ordered list with mixed content
     [java]             }
     [java]     }
     [java] DEF SpecialtyNodes Transform { 
     [java]        children [
     [java]       CADLayer { 
     [java]            children [
     [java]           CADAssembly { 
     [java]                children [
     [java]               CADPart { 
     [java]                    children [
     [java]                   CADFace { 
     [java]                      }
     [java]                   ]
     [java]                 }
     [java]               ]
     [java]             }
     [java]           ]
     [java]         }
     [java] EspduTransform { 
     [java]          geoSystem [ "GD" "WE" ]
     [java]          }
     [java] ReceiverPdu { 
     [java]          geoSystem [ "GD" "WE" ]
     [java]          }
     [java] SignalPdu { 
     [java]          geoSystem [ "GD" "WE" ]
     [java]          }
     [java] TransmitterPdu { 
     [java]          geoSystem [ "GD" "WE" ]
     [java]          }
     [java] DISEntityManager { 
     [java]            mapping [
     [java]           DISEntityTypeMapping { 
     [java]              }
     [java]           ]
     [java]         }
     [java]       ]
     [java]     }
     [java]   ]
     [java] # head
     [java] #COMPONENT Navigation:3
     [java] #COMPONENT Shaders:1
     [java] #COMPONENT CADGeometry:2
     [java] #COMPONENT DIS:2
     [java] #COMPONENT H-Anim:1
     [java] #COMPONENT Grouping:1
     [java] #COMPONENT Layering:1
     [java] #UNIT angle AngleUnitConversion 1.0
     [java] #UNIT length LengthUnitConversion 1.0
     [java] #UNIT force ForceFromPoundsToNewtons 4.4482
     [java] #META "title" "HelloWorldProgramOutput.x3d"
     [java] #META "info" "continued development and testing in progress"
     [java] #META "description" "Example HelloWorldProgram creates an X3D model using the X3D Java Scene Access Interface Library (X3DJSAIL)"
     [java] #META "reference" "https://www.web3d.org/specifications/java/X3DJSAIL.html"
     [java] #META "generator" "HelloWorldProgramOutput.java"
     [java] #META "created" "6 September 2016"
     [java] #META "modified" "13 January 2020"
     [java] #META "generator" "X3D Java Scene Access Interface Library (X3DJSAIL)"
     [java] #META "generator" "https://www.web3d.org/specifications/java/examples/HelloWorldProgram.java"
     [java] #META "generator" "Netbeans http://www.netbeans.org"
     [java] #META "creator" "Don Brutzman"
     [java] #META "reference" "https://sourceforge.net/p/x3d/code/HEAD/tree/www.web3d.org/x3d/stylesheets/java/examples/HelloWorldProgramOutput.x3d"
     [java] #META "reference" "Console output, ClassicVRML encoding, VRML97 encoding and pretty-print documentation:"
     [java] #META "reference" "HelloWorldProgramOutput.txt"
     [java] #META "reference" "HelloWorldProgramOutput.x3dv"
     [java] #META "reference" "HelloWorldProgramOutput.wrl"
     [java] #META "reference" "HelloWorldProgramOutput.html"
     [java] #META "reference" "https://savage.nps.edu/X3dValidator?url=https://www.web3d.org/specifications/java/examples/HelloWorldProgramOutput.x3d"
     [java] #META "identifier" "https://www.web3d.org/specifications/java/examples/HelloWorldProgramOutput.x3d"
     [java] #META "license" "../license.html"
     [java] # comment #1
     [java] # comment #2
     [java] # comment #3
     [java] # comment #4
     [java] # x3dVersionComparisonTest for this model: supportsX3dVersion(X3DObject.VERSION_3_0)=true
     [java] 
     [java] ===========================================
     [java] Create .x3d (X3D XML Encoding) version of model
     [java] Warning: toFileX3D() is overwriting prior file HelloWorldProgramOutput.x3d
     [java] helloWorldObject.toFileX3D("HelloWorldProgramOutput.x3d") success: true
     [java] C:\x3d-code\www.web3d.org\x3d\stylesheets\java\classes\HelloWorldProgramOutput.x3d
     [java] ===========================================
     [java] Create .xml (X3D XML Encoding) version of model
     [java] Warning: toFileX3D() is overwriting prior file HelloWorldProgramOutput.xml
     [java] helloWorldObject.toFileXML("HelloWorldProgramOutput.xml") success: true
     [java] C:\x3d-code\www.web3d.org\x3d\stylesheets\java\classes\HelloWorldProgramOutput.xml
     [java] ===========================================
     [java] Create pretty-print .html documentation of model
     [java] Warning: toFileStylesheetConversion(X3dExtrusionToSvgViaXslt1.1.xslt) is overwriting prior file HelloWorldProgramOutput.svg
     [java] Warning: toFileStylesheetConversion(X3dToXhtml.xslt) is overwriting prior file HelloWorldProgramOutput.html
     [java] helloWorldObject.toFileHtmlDocumentation("HelloWorldProgramOutput.html") success: true
     [java] C:\x3d-code\www.web3d.org\x3d\stylesheets\java\classes\HelloWorldProgramOutput.html
     [java] ===========================================
     [java] Create .x3d (X3D XML Encoding) cleaned-up version of model using X3D Tidy
     [java] Warning: toFileStylesheetConversion(X3dTidy.xslt) is overwriting prior file HelloWorldProgramOutputTidy.x3d
     [java] *** revision: &lt;meta name='modified' content='13 January 2020'/&gt;
     [java] helloWorldObject.toFileX3dTidy("HelloWorldProgramOutputTidy.x3d") success: true
     [java] C:\x3d-code\www.web3d.org\x3d\stylesheets\java\classes\HelloWorldProgramOutputTidy.x3d
     [java] ===========================================
     [java] Create .md (Markdown) file for model meta information using X3dModelMetaToMarkdown.xslt
     [java] Warning: toFileStylesheetConversion(X3dModelMetaToMarkdown.xslt) is overwriting prior file HelloWorldProgramOutput.md
     [java] helloWorldObject.toFileModelMetaMarkdown("HelloWorldProgramOutput.md") success: true
     [java] C:\x3d-code\www.web3d.org\x3d\stylesheets\java\classes\HelloWorldProgramOutput.md
     [java] ===========================================
     [java] Create X3D ClassicVRML Encoding of model
     [java] Warning: toFileClassicVRML() is overwriting prior file HelloWorldProgramOutput.x3dv
     [java] helloWorldObject.toFileClassicVRML("HelloWorldProgramOutput.x3dv") success: true
     [java] C:\x3d-code\www.web3d.org\x3d\stylesheets\java\classes\HelloWorldProgramOutput.x3dv
     [java] ===========================================
     [java] Create VRML97 Encoding of model
     [java] Warning: toFileVRML97() is overwriting prior file HelloWorldProgramOutput.wrl
     [java] helloWorldObject.toFileVRML97("HelloWorldProgramOutput.wrl") success: true
     [java] C:\x3d-code\www.web3d.org\x3d\stylesheets\java\classes\HelloWorldProgramOutput.wrl
     [java] ===========================================
     [java] Create pretty-print HTML documentation of model using ConfigurationProperties.getXsltEngine()=SAXON9HE and stylesheet X3dToXhtml.xslt
     [java] Warning: toFileStylesheetConversion(X3dExtrusionToSvgViaXslt1.1.xslt) is overwriting prior file HelloWorldProgramOutput.svg
     [java] Warning: toFileStylesheetConversion(X3dToXhtml.xslt) is overwriting prior file HelloWorldProgramOutput.html
     [java] helloWorldObject.toFileHtmlDocumentation("HelloWorldProgramOutput.html") success: true
     [java] C:\x3d-code\www.web3d.org\x3d\stylesheets\java\classes\HelloWorldProgramOutput.html
     [java] ===========================================
     [java] Create concise Java source of model using stylesheet X3dToJava.xslt
     [java] Warning: toFileStylesheetConversion(X3dToJava.xslt) is overwriting prior file HelloWorldProgramOutput.java
     [java] [meta] name='info' content='continued development and testing in progress'
     [java] helloWorldObject.toFileJava("HelloWorldProgramOutput.java") success: true
     [java] C:\x3d-code\www.web3d.org\x3d\stylesheets\java\classes\HelloWorldProgramOutput.java
     [java] Test toStringJava()
     [java] 
     [java] [meta] name='info' content='continued development and testing in progress'
     [java] import java.util.*;
     [java] import org.web3d.x3d.jsail.Core.*;
     [java] import org.web3d.x3d.jsail.CADGeometry.*;
     [java] import org.web3d.x3d.jsail.DIS.*;
     [java] import org.web3d.x3d.jsail.EnvironmentalEffects.*;
     [java] import org.web3d.x3d.jsail.fields.*;
     [java] import org.web3d.x3d.jsail.Geometry3D.*;
     [java] import org.web3d.x3d.jsail.Grouping.*;
     [java] import org.web3d.x3d.jsail.Interpolation.*;
     [java] import org.web3d.x3d.jsail.Layering.*;
     [java] import org.web3d.x3d.jsail.Navigation.*;
     [java] import org.web3d.x3d.jsail.Networking.*;
     [java] import org.web3d.x3d.jsail.PointingDeviceSensor.*;
     [java] import org.web3d.x3d.jsail.Rendering.*;
     [java] import org.web3d.x3d.jsail.Scripting.*;
     [java] import org.web3d.x3d.jsail.Shaders.*;
     [java] import org.web3d.x3d.jsail.Shape.*;
     [java] import org.web3d.x3d.jsail.Sound.*;
     [java] import org.web3d.x3d.jsail.Text.*;
     [java] import org.web3d.x3d.jsail.Texturing.*;
     [java] import org.web3d.x3d.jsail.Time.*;
     [java] 
     [java] // Javadoc annotations follow, see below for source.
     [java] /**
     [java]  * <p> Example HelloWorldProgram creates an X3D model using the X3D Java Scene Access Interface Library (X3DJSAIL). </p>
     [java]  <p> Related links: temporaryJavaOutputFile.java source, <a href="https://www.web3d.org/x3d/content/examples/X3dResources.html" target="_blank">X3D Resources</a>, <a href="https://www.web3d.org/x3d/content/examples/X3dSceneAuthoringHints.html" target="_blank">X3D Scene Authoring Hints</a>, and <a href="https://www.web3d.org/x3d/content/X3dTooltips.html" target="_blank">X3D Tooltips</a>. </p>
     [java] 	<table style="color:black; border:0px solid; border-spacing:10px 0px;">
     [java]         <caption>Scene Meta Information</caption>
     [java] 		<tr style="background-color:silver; border-color:silver;">
     [java] 			<td style="text-align:center; padding:10px 0px;"><i>meta tags</i></td>
     [java] 			<td style="text-align:left;   padding:10px 0px;">temporaryJavaOutputFile&nbsp; Document Metadata </td>
     [java] 		</tr>
     [java] 
     [java] 		<tr>
     [java] 			<td style="text-align:right; vertical-align: text-top;"> <i> title </i> </td>
     [java] 			<td> <a href="https://www.web3d.org/specifications/java/examples/HelloWorldProgramOutput.x3d">HelloWorldProgramOutput.x3d</a> </td>
     [java] 		</tr>
     [java] 		<tr>
     [java] 			<td style="text-align:right; vertical-align: text-top;"> <i> info </i> </td>
     [java] 			<td> continued development and testing in progress </td>
     [java] 		</tr>
     [java] 		<tr>
     [java] 			<td style="text-align:right; vertical-align: text-top;"> <i> description </i> </td>
     [java] 			<td> Example HelloWorldProgram creates an X3D model using the X3D Java Scene Access Interface Library (X3DJSAIL) </td>
     [java] 		</tr>
     [java] 		<tr>
     [java] 			<td style="text-align:right; vertical-align: text-top;"> <i> reference </i> </td>
     [java] 			<td> <a href="https://www.web3d.org/specifications/java/X3DJSAIL.html" target="_blank">https://www.web3d.org/specifications/java/X3DJSAIL.html</a> </td>
     [java] 		</tr>
     [java] 		<tr>
     [java] 			<td style="text-align:right; vertical-align: text-top;"> <i> generator </i> </td>
     [java] 			<td> HelloWorldProgramOutput.java </td>
     [java] 		</tr>
     [java] 		<tr>
     [java] 			<td style="text-align:right; vertical-align: text-top;"> <i> created </i> </td>
     [java] 			<td> 6 September 2016 </td>
     [java] 		</tr>
     [java] 		<tr>
     [java] 			<td style="text-align:right; vertical-align: text-top;"> <i> modified </i> </td>
     [java] 			<td> 13 January 2020 </td>
     [java] 		</tr>
     [java] 		<tr>
     [java] 			<td style="text-align:right; vertical-align: text-top;"> <i> generator </i> </td>
     [java] 			<td> X3D Java Scene Access Interface Library (X3DJSAIL) </td>
     [java] 		</tr>
     [java] 		<tr>
     [java] 			<td style="text-align:right; vertical-align: text-top;"> <i> generator </i> </td>
     [java] 			<td> <a href="https://www.web3d.org/specifications/java/examples/HelloWorldProgram.java" target="_blank">https://www.web3d.org/specifications/java/examples/HelloWorldProgram.java</a> </td>
     [java] 		</tr>
     [java] 		<tr>
     [java] 			<td style="text-align:right; vertical-align: text-top;"> <i> generator </i> </td>
     [java] 			<td> Netbeans <a href="http://www.netbeans.org" target="_blank">http://www.netbeans.org</a> </td>
     [java] 		</tr>
     [java] 		<tr>
     [java] 			<td style="text-align:right; vertical-align: text-top;"> <i> creator </i> </td>
     [java] 			<td> Don Brutzman </td>
     [java] 		</tr>
     [java] 		<tr>
     [java] 			<td style="text-align:right; vertical-align: text-top;"> <i> reference </i> </td>
     [java] 			<td> <a href="https://sourceforge.net/p/x3d/code/HEAD/tree/www.web3d.org/x3d/stylesheets/java/examples/HelloWorldProgramOutput.x3d" target="_blank">https://sourceforge.net/p/x3d/code/HEAD/tree/www.web3d.org/x3d/stylesheets/java/examples/HelloWorldProgramOutput.x3d</a> </td>
     [java] 		</tr>
     [java] 		<tr>
     [java] 			<td style="text-align:right; vertical-align: text-top;"> <i> reference </i> </td>
     [java] 			<td> Console output, ClassicVRML encoding, VRML97 encoding and pretty-print documentation: </td>
     [java] 		</tr>
     [java] 		<tr>
     [java] 			<td style="text-align:right; vertical-align: text-top;"> <i> reference </i> </td>
     [java] 			<td> HelloWorldProgramOutput.txt </td>
     [java] 		</tr>
     [java] 		<tr>
     [java] 			<td style="text-align:right; vertical-align: text-top;"> <i> reference </i> </td>
     [java] 			<td> <a href="https://www.web3d.org/specifications/java/examples/HelloWorldProgramOutput.x3dv">HelloWorldProgramOutput.x3dv</a> </td>
     [java] 		</tr>
     [java] 		<tr>
     [java] 			<td style="text-align:right; vertical-align: text-top;"> <i> reference </i> </td>
     [java] 			<td> HelloWorldProgramOutput.wrl </td>
     [java] 		</tr>
     [java] 		<tr>
     [java] 			<td style="text-align:right; vertical-align: text-top;"> <i> reference </i> </td>
     [java] 			<td> <a href="https://www.web3d.org/specifications/java/examples/HelloWorldProgramOutput.html">HelloWorldProgramOutput.html</a> </td>
     [java] 		</tr>
     [java] 		<tr>
     [java] 			<td style="text-align:right; vertical-align: text-top;"> <i> reference </i> </td>
     [java] 			<td> <a href="https://savage.nps.edu/X3dValidator?url=https://www.web3d.org/specifications/java/examples/HelloWorldProgramOutput.x3d" target="_blank">https://savage.nps.edu/X3dValidator?url=https://www.web3d.org/specifications/java/examples/HelloWorldProgramOutput.x3d</a> </td>
     [java] 		</tr>
     [java] 		<tr>
     [java] 			<td style="text-align:right; vertical-align: text-top;"> <i> identifier </i> </td>
     [java] 			<td> <a href="https://www.web3d.org/specifications/java/examples/HelloWorldProgramOutput.x3d" target="_blank">https://www.web3d.org/specifications/java/examples/HelloWorldProgramOutput.x3d</a> </td>
     [java] 		</tr>
     [java] 		<tr>
     [java] 			<td style="text-align:right; vertical-align: text-top;"> <i> license </i> </td>
     [java] 			<td> <a href="https://www.web3d.org/specifications/java/examples/../license.html">../license.html</a> </td>
     [java] 		</tr>
     [java] 		<tr style="background-color:silver; border-color:silver;">
     [java] 			<td style="text-align:center;" colspan="2">  &nbsp; </td>
     [java] 		</tr>
     [java] 	</table>
     [java] 
     [java] 	<p>
     [java] 		This program uses the
     [java] 		<a href="https://www.web3d.org/specifications/java/X3DJSAIL.html" target="_blank">X3D Java Scene Access Interface Library (X3DJSAIL)</a>.
     [java] 		It has been produced using the 
     [java] 		<a href="https://www.web3d.org/x3d/stylesheets/X3dToJava.xslt" target="_blank">X3dToJava.xslt</a>
     [java] 		stylesheet to create Java source code from an <code>.x3d</code> model.
     [java] 	</p>
     [java] 
     [java] 	* @author Don Brutzman
     [java]  */
     [java] 
     [java] public class temporaryJavaOutputFile
     [java] {
     [java] 	/** Default constructor to create this object. */
     [java] 	public temporaryJavaOutputFile ()
     [java] 	{
     [java] 	  initialize();
     [java] 	}
     [java] 
     [java] 	/** Create and initialize the X3D model for this object. */
     [java] 	public final void initialize()
     [java] 	{
     [java]   x3dModel = new X3DObject().setProfile(X3DObject.PROFILE_IMMERSIVE).setVersion(X3DObject.VERSION_3_3)
     [java]   .addComments(" x3dVersionComparisonTest for this model: supportsX3dVersion(X3DObject.VERSION_3_0)=true ")
     [java]   .setHead(new headObject()
     [java]     .addComments(" comment #1 ")
     [java]     .addComments(" comment #2 ")
     [java]     .addComments(" comment #3 ")
     [java]     .addComments(" comment #4 ")
     [java]     .addComponent(new componentObject().setName("Navigation").setLevel(3))
     [java]     .addComponent(new componentObject().setName("Shaders").setLevel(1))
     [java]     .addComponent(new componentObject().setName("CADGeometry").setLevel(2))
     [java]     .addComponent(new componentObject().setName("DIS").setLevel(2))
     [java]     .addComponent(new componentObject().setName("H-Anim").setLevel(1))
     [java]     .addComponent(new componentObject().setName("Grouping").setLevel(1))
     [java]     .addComponent(new componentObject().setName("Layering").setLevel(1))
     [java]     .addUnit(new unitObject().setName("AngleUnitConversion").setCategory("angle").setConversionFactor(1.0))
     [java]     .addUnit(new unitObject().setName("LengthUnitConversion").setCategory("length").setConversionFactor(1.0))
     [java]     .addUnit(new unitObject().setName("ForceFromPoundsToNewtons").setCategory("force").setConversionFactor(4.4482))
     [java]     .addMeta(new metaObject().setName(metaObject.NAME_TITLE      ).setContent("HelloWorldProgramOutput.x3d"))
     [java]     .addMeta(new metaObject().setName(metaObject.NAME_INFO       ).setContent("continued development and testing in progress"))
     [java]     .addMeta(new metaObject().setName(metaObject.NAME_DESCRIPTION).setContent("Example HelloWorldProgram creates an X3D model using the X3D Java Scene Access Interface Library (X3DJSAIL)"))
     [java]     .addMeta(new metaObject().setName(metaObject.NAME_REFERENCE  ).setContent("https://www.web3d.org/specifications/java/X3DJSAIL.html"))
     [java]     .addMeta(new metaObject().setName(metaObject.NAME_GENERATOR  ).setContent("HelloWorldProgramOutput.java"))
     [java]     .addMeta(new metaObject().setName(metaObject.NAME_CREATED    ).setContent("6 September 2016"))
     [java]     .addMeta(new metaObject().setName(metaObject.NAME_MODIFIED   ).setContent("13 January 2020"))
     [java]     .addMeta(new metaObject().setName(metaObject.NAME_GENERATOR  ).setContent("X3D Java Scene Access Interface Library (X3DJSAIL)"))
     [java]     .addMeta(new metaObject().setName(metaObject.NAME_GENERATOR  ).setContent("https://www.web3d.org/specifications/java/examples/HelloWorldProgram.java"))
     [java]     .addMeta(new metaObject().setName(metaObject.NAME_GENERATOR  ).setContent("Netbeans http://www.netbeans.org"))
     [java]     .addMeta(new metaObject().setName(metaObject.NAME_CREATOR    ).setContent("Don Brutzman"))
     [java]     .addMeta(new metaObject().setName(metaObject.NAME_REFERENCE  ).setContent("https://sourceforge.net/p/x3d/code/HEAD/tree/www.web3d.org/x3d/stylesheets/java/examples/HelloWorldProgramOutput.x3d"))
     [java]     .addMeta(new metaObject().setName(metaObject.NAME_REFERENCE  ).setContent("Console output, ClassicVRML encoding, VRML97 encoding and pretty-print documentation:"))
     [java]     .addMeta(new metaObject().setName(metaObject.NAME_REFERENCE  ).setContent("HelloWorldProgramOutput.txt"))
     [java]     .addMeta(new metaObject().setName(metaObject.NAME_REFERENCE  ).setContent("HelloWorldProgramOutput.x3dv"))
     [java]     .addMeta(new metaObject().setName(metaObject.NAME_REFERENCE  ).setContent("HelloWorldProgramOutput.wrl"))
     [java]     .addMeta(new metaObject().setName(metaObject.NAME_REFERENCE  ).setContent("HelloWorldProgramOutput.html"))
     [java]     .addMeta(new metaObject().setName(metaObject.NAME_REFERENCE  ).setContent("https://savage.nps.edu/X3dValidator?url=https://www.web3d.org/specifications/java/examples/HelloWorldProgramOutput.x3d"))
     [java]     .addMeta(new metaObject().setName(metaObject.NAME_IDENTIFIER ).setContent("https://www.web3d.org/specifications/java/examples/HelloWorldProgramOutput.x3d"))
     [java]     .addMeta(new metaObject().setName(metaObject.NAME_LICENSE    ).setContent("../license.html")))
     [java]   .setScene(new SceneObject()
     [java]     .addChild(new ViewpointGroupObject().setDescription("Available viewpoints")
     [java]       .addChild(new ViewpointObject("DefaultView").setDescription("Hello X3DJSAIL"))
     [java]       .addChild(new ViewpointObject("TopDownView").setDescription("top-down view from above").setOrientation(1.0f,0.0f,0.0f,-1.570796f).setPosition(0.0f,100.0f,0.0f)))
     [java]     .addChild(new NavigationInfoObject().setType(new String[] {"EXAMINE","FLY","ANY"}))
     [java]     .addChild(new WorldInfoObject("WorldInfoDEF").setTitle("HelloWorldProgram produced by X3D Java SAI Library (X3DJSAIL)"))
     [java]     .addChild(new WorldInfoObject().setUSE("WorldInfoDEF"))
     [java]     .addChild(new WorldInfoObject().setUSE("WorldInfoDEF"))
     [java]     .addMetadata(new MetadataStringObject("scene.addChildMetadata").setName("test").setValue(new String[] {"Top-level root Metadata node beneath Scene needs to be one of '-children' in JSON encoding"}))
     [java]     .addLayerSet(new LayerSetObject("scene.addChildLayerSetTest"))
     [java]     .addChild(new TransformObject("LogoGeometryTransform").setTranslation(0.0f,1.5f,0.0f)
     [java]       .addChild(new AnchorObject().setDescription("select for X3D Java SAI Library (X3DJSAIL) description").setUrl(new String[] {"../X3DJSAIL.html","https://www.web3d.org/specifications/java/X3DJSAIL.html"})
     [java]         .addChild(new ShapeObject("BoxShape")
     [java]           .setAppearance(new AppearanceObject()
     [java]             .setMaterial(new MaterialObject("GreenMaterial").setDiffuseColor(0.0f,1.0f,1.0f).setEmissiveColor(0.8f,0.0f,0.0f).setTransparency(0.1f))
     [java]             .setTexture(new ImageTextureObject().setUrl(new String[] {"images/X3dJavaSceneAccessInterfaceSaiLibrary.png","https://www.web3d.org/specifications/java/examples/images/X3dJavaSceneAccessInterfaceSaiLibrary.png"})))
     [java]           .setGeometry(new BoxObject("test-NMTOKEN_regex.0123456789").setCssClass("untextured")))))
     [java]     .addChild(new ShapeObject("LineShape")
     [java]       .setAppearance(new AppearanceObject()
     [java]         .setMaterial(new MaterialObject().setEmissiveColor(0.6f,0.19607843f,0.8f)))
     [java]       .setGeometry(new IndexedLineSetObject().setCoordIndex(new int[] {0,1,2,3,4,0})
     [java]         .addComments(" Coordinate 3-tuple point count: 6 ")
     [java]         .setCoord(new CoordinateObject().setPoint(new MFVec3fObject(new float[] {0.0f,1.5f,0.0f,2.0f,1.5f,0.0f,2.0f,1.5f,-2.0f,-2.0f,1.5f,-2.0f,-2.0f,1.5f,0.0f,0.0f,1.5f,0.0f})))))
     [java]     .addChild(new PositionInterpolatorObject("BoxPathAnimator").setKey(new float[] {0.0f,0.125f,0.375f,0.625f,0.875f,1.0f}).setKeyValue(new MFVec3fObject(new float[] {0.0f,1.5f,0.0f,2.0f,1.5f,0.0f,2.0f,1.5f,-2.0f,-2.0f,1.5f,-2.0f,-2.0f,1.5f,0.0f,0.0f,1.5f,0.0f})))
     [java]     .addChild(new TimeSensorObject("OrbitClock").setCycleInterval(8.0).setLoop(true))
     [java]     .addChild(new ROUTEObject().setFromNode("OrbitClock").setFromField("fraction_changed").setToNode("BoxPathAnimator").setToField("set_fraction"))
     [java]     .addChild(new ROUTEObject().setFromNode("BoxPathAnimator").setFromField("value_changed").setToNode("LogoGeometryTransform").setToField("set_translation"))
     [java]     .addChild(new TransformObject("TextTransform").setTranslation(0.0f,-1.5f,0.0f)
     [java]       .addChild(new ShapeObject()
     [java]         .setAppearance(new AppearanceObject()
     [java]           .setMaterial(new MaterialObject().setUSE("GreenMaterial")))
     [java]         .setGeometry(new TextObject().setString(new String[] {"X3D Java","SAI Library","X3DJSAIL"})
     [java]           .addComments(" Comment example A, plain quotation marks: He said, \"Immel did it!\" ")
     [java]           .addComments(" Comment example B, XML character entities: He said, &quot;Immel did it!&quot; ")
     [java]           .setMetadata(new MetadataSetObject().setName("EscapedQuotationMarksMetadataSet")
     [java]             .addValue(new MetadataStringObject().setName("quotesTestC").setValue(new String[] {"MFString example C, backslash-escaped quotes: He said, \"Immel did it!\""}))
     [java]             .addValue(new MetadataStringObject().setName("extraChildTest").setValue(new String[] {"checks MetadataSetObject addValue() method"})))
     [java]           .setFontStyle(new FontStyleObject().setJustify(FontStyleObject.JUSTIFY_MIDDLE_MIDDLE))))
     [java]       .addChild(new CollisionObject()
     [java]         .addComments(" test containerField='proxy' ")
     [java]         .setProxy(new ShapeObject("ProxyShape")
     [java]           .addComments(" alternative XML encoding: Text string='\"One, Two, Comment\" \"\" \"He said, \\&quot;Immel did it!\\&quot;\"' ")
     [java]           .addComments(" alternative XML encoding: Text string='\"One, Two, Comment\" \"\" \"He said, \\&quot;Immel did it!\\&quot;\" \"\"' ")
     [java]           .addComments(" alternative Java source: .setString(new String [] {\"One, Two, Comment\", \"\", \"He said, \\\"Immel did it!\\\"\"}) ")
     [java]           .addComments(" reference: https://www.web3d.org/x3d/content/examples/Basic/X3dSpecifications/StringArrayEncodingExamplesIndex.html ")
     [java]           .setGeometry(new TextObject().setString(new String[] {"One, Two, Text","","He said, \"Immel did it!\" \"\""}))))
     [java]       .addComments(" It's a beautiful world ")
     [java]       .addComments(" ... for you! ")
     [java]       .addComments(" https://en.wikipedia.org/wiki/Beautiful_World_(Devo_song) "))
     [java]     .addComments(" repeatedly spin 180 degrees as a readable special effect ")
     [java]     .addChild(new OrientationInterpolatorObject("SpinInterpolator").setKey(new float[] {0.0f,0.5f,1.0f}).setKeyValue(new MFRotationObject(new float[] {0.0f,1.0f,0.0f,4.712389f,0.0f,1.0f,0.0f,0.0f,0.0f,1.0f,0.0f,1.5707964f})))
     [java]     .addChild(new TimeSensorObject("SpinClock").setCycleInterval(5.0).setLoop(true))
     [java]     .addChild(new ROUTEObject().setFromNode("SpinClock").setFromField("fraction_changed").setToNode("SpinInterpolator").setToField("set_fraction"))
     [java]     .addChild(new ROUTEObject().setFromNode("SpinInterpolator").setFromField("value_changed").setToNode("TextTransform").setToField("rotation"))
     [java]     .addChild(new GroupObject("BackgroundGroup")
     [java]       .addChild(new BackgroundObject("GradualBackground"))
     [java]       .addChild(new ScriptObject("colorTypeConversionScript").setSourceCode("\n" + 
     [java] "\n" + 
     [java] "ecmascript:" + "\n" + 
     [java] "\n" + 
     [java] "function colorInput (eventValue) // Example source code" + "\n" + 
     [java] "{" + "\n" + 
     [java] "   colorsOutput = new MFColor(eventValue); // assigning value sends output event" + "\n" + 
     [java] "// Browser.print('colorInput=' + eventValue + ', colorsOutput=' + colorsOutput + '\\n');" + "\n" + 
     [java] "}" + "\n")
     [java]         .addField(new fieldObject().setName("colorInput").setType(fieldObject.TYPE_SFCOLOR).setAccessType(fieldObject.ACCESSTYPE_INPUTONLY))
     [java]         .addField(new fieldObject().setName("colorsOutput").setType(fieldObject.TYPE_MFCOLOR).setAccessType(fieldObject.ACCESSTYPE_OUTPUTONLY)))
     [java]       .addChild(new ColorInterpolatorObject("ColorAnimator").setKey(new float[] {0.0f,0.5f,1.0f}).setKeyValue(new MFColorObject(new float[] {0.9411765f,1.0f,1.0f,0.29411766f,0.0f,0.50980395f,0.9411765f,1.0f,1.0f}))
     [java]         .addComments(" AZURE to INDIGO and back again "))
     [java]       .addChild(new TimeSensorObject("ColorClock").setCycleInterval(60.0).setLoop(true))
     [java]       .addChild(new ROUTEObject().setFromNode("colorTypeConversionScript").setFromField("colorsOutput").setToNode("GradualBackground").setToField("skyColor"))
     [java]       .addChild(new ROUTEObject().setFromNode("ColorAnimator").setFromField("value_changed").setToNode("colorTypeConversionScript").setToField("colorInput"))
     [java]       .addChild(new ROUTEObject().setFromNode("ColorClock").setFromField("fraction_changed").setToNode("ColorAnimator").setToField("set_fraction")))
     [java]     .addChild(new ProtoDeclareObject("ArtDeco01Material").setName("ArtDeco01Material").setAppinfo("tooltip: ArtDeco01Material prototype is a Material node")
     [java]       .setProtoInterface(new ProtoInterfaceObject()
     [java]         .addField(new fieldObject().setName("description").setType(fieldObject.TYPE_SFSTRING).setAccessType(fieldObject.ACCESSTYPE_INPUTOUTPUT).setValue("ArtDeco01Material prototype is a Material node").setAppinfo("tooltip for descriptionField"))
     [java]         .addField(new fieldObject().setName("enabled").setType(fieldObject.TYPE_SFBOOL).setAccessType(fieldObject.ACCESSTYPE_INPUTOUTPUT).setValue(true)))
     [java]       .setProtoBody(new ProtoBodyObject()
     [java]         .addComments(" Initial node of ProtoBody determines prototype node type ")
     [java]         .addChild(new MaterialObject().setAmbientIntensity(0.25f).setDiffuseColor(0.282435f,0.085159f,0.134462f).setShininess(0.127273f).setSpecularColor(0.276305f,0.11431f,0.139857f))
     [java]         .addComments(" [HelloWorldProgram diagnostic] should be connected to scene graph: artDeco01ProtoDeclare.getNodeType()=\"Material\" ")
     [java]         .addComments(" presence of follow-on TouchSensor shows that additional nodes are allowed in ProtoBody after initial node, regardless of node types ")
     [java]         .addChild(new TouchSensorObject().setDescription("within ProtoBody")
     [java]           .setIS(new ISObject()
     [java]             .addConnect(new connectObject().setNodeField("description").setProtoField("description"))
     [java]             .addConnect(new connectObject().setNodeField("enabled").setProtoField("enabled"))))))
     [java]     .addChild(new ExternProtoDeclareObject("ArtDeco02Material").setName("ArtDeco02Material").setAppinfo("this is a different Material node").setUrl(new String[] {"http://X3dGraphics.com/examples/X3dForWebAuthors/Chapter14Prototypes/ArtDecoPrototypesExcerpt.x3d#ArtDeco02Material","http://X3dGraphics.com/examples/X3dForWebAuthors/Chapter14Prototypes/ArtDecoPrototypesExcerpt.x3dv#ArtDeco02Material"})
     [java]       .addComments(" [HelloWorldProgram diagnostic] artDeco02ExternProtoDeclare.getNodeType()=\"ERROR_UNKNOWN_EXTERNPROTODECLARE_NODE_TYPE: ExternProtoDeclare name='ArtDeco02Material' type cannot be remotely accessed at run time. TODO X3DJSAIL needs to add further capability that retrieves the ExternProtoDeclare file.\" ")
     [java]       .addField(new fieldObject().setName("description").setType(fieldObject.TYPE_SFSTRING).setAccessType(fieldObject.ACCESSTYPE_INPUTOUTPUT).setAppinfo("tooltip for descriptionField")))
     [java]     .addComments(" Tested ArtDeco01ProtoInstance, ArtDeco02ProtoInstance for improper node type when ProtoInstance is added in wrong place ")
     [java]     .addChild(new ShapeObject("TestShape1")
     [java]       .setAppearance(new AppearanceObject("TestAppearance1")
     [java]         .addComments(" ArtDeco01Material prototype goes here... TODO ensure setContainerField is handled in exported Java ")
     [java]         .setMaterial(new ProtoInstanceObject("ArtDeco01Material")
     [java]           .addComments(" [HelloWorldProgram diagnostic] ArtDeco01ProtoInstance.getNodeType()=\"Material\" ")
     [java]           .addFieldValue(new fieldValueObject().setName("description").setValue("ArtDeco01Material can substitute for a Material node"))))
     [java]       .setGeometry(new SphereObject().setRadius(0.001f)))
     [java]     .addChild(new ShapeObject("TestShape2")
     [java]       .setAppearance(new AppearanceObject("TestAppearance2")
     [java]         .addComments(" ArtDeco02Material prototype goes here... TODO ensure setContainerField is handled in exported Java ")
     [java]         .setMaterial(new ProtoInstanceObject("ArtDeco02Material", "ArtDeco02MaterialDEF")
     [java]           .addComments(" [HelloWorldProgram diagnostic] ArtDeco02ProtoInstance.getNodeType()=\"ERROR_UNKNOWN_EXTERNPROTODECLARE_NODE_TYPE: ExternProtoDeclare name='ArtDeco02Material' type cannot be remotely accessed at run time. TODO X3DJSAIL needs to add further capability that retrieves the ExternProtoDeclare file.\" ")
     [java]           .addFieldValue(new fieldValueObject().setName("description").setValue("ArtDeco02Material can substitute for another Material node"))))
     [java]       .setGeometry(new ConeObject().setBottomRadius(0.001f).setHeight(0.001f)))
     [java]     .addChild(new ShapeObject("TestShape3")
     [java]       .setAppearance(new AppearanceObject("TestAppearance3")
     [java]         .addComments(" ArtDeco02Material ProtoInstance USE goes here. Note that name field is NOT defined as part of ProtoInstance USE. ")
     [java]         .setMaterial(new ProtoInstanceObject().setUSE("ArtDeco02MaterialDEF")))
     [java]       .setGeometry(new CylinderObject().setHeight(0.001f).setRadius(0.001f)))
     [java]     .addChild(new InlineObject("inlineSceneDef").setUrl(new String[] {"someOtherScene.x3d","https://www.web3d.org/specifications/java/examples/someOtherScene.x3d"}))
     [java]     .addChild(new IMPORTObject().setImportedDEF("WorldInfoDEF").setInlineDEF("inlineSceneDef").setAS("WorldInfoDEF2"))
     [java]     .addChild(new EXPORTObject().setLocalDEF("WorldInfoDEF").setAS("WorldInfoDEF3"))
     [java]     .addChild(new ProtoDeclareObject("MaterialModulator").setName("MaterialModulator").setAppinfo("mimic a Material node and modulate fields as an animation effect").setDocumentation("http://x3dgraphics.com/examples/X3dForWebAuthors/Chapter14Prototypes/MaterialModulatorIndex.html")
     [java]       .setProtoInterface(new ProtoInterfaceObject()
     [java]         .addField(new fieldObject().setName("enabled").setType(fieldObject.TYPE_SFBOOL).setAccessType(fieldObject.ACCESSTYPE_INPUTOUTPUT).setValue(true))
     [java]         .addField(new fieldObject().setName("diffuseColor").setType(fieldObject.TYPE_SFCOLOR).setAccessType(fieldObject.ACCESSTYPE_INPUTOUTPUT).setValue(new SFColorObject(0.0f,0.0f,0.0f)))
     [java]         .addField(new fieldObject().setName("emissiveColor").setType(fieldObject.TYPE_SFCOLOR).setAccessType(fieldObject.ACCESSTYPE_INPUTOUTPUT).setValue(new SFColorObject(0.05f,0.05f,0.5f)))
     [java]         .addField(new fieldObject().setName("specularColor").setType(fieldObject.TYPE_SFCOLOR).setAccessType(fieldObject.ACCESSTYPE_INPUTOUTPUT).setValue(new SFColorObject(0.0f,0.0f,0.0f)))
     [java]         .addField(new fieldObject().setName("transparency").setType(fieldObject.TYPE_SFFLOAT).setAccessType(fieldObject.ACCESSTYPE_INPUTOUTPUT).setValue(0.0f))
     [java]         .addField(new fieldObject().setName("shininess").setType(fieldObject.TYPE_SFFLOAT).setAccessType(fieldObject.ACCESSTYPE_INPUTOUTPUT).setValue(0.0f))
     [java]         .addField(new fieldObject().setName("ambientIntensity").setType(fieldObject.TYPE_SFFLOAT).setAccessType(fieldObject.ACCESSTYPE_INPUTOUTPUT).setValue(0.0f)))
     [java]       .setProtoBody(new ProtoBodyObject()
     [java]         .addChild(new MaterialObject("MaterialNode")
     [java]           .setIS(new ISObject()
     [java]             .addConnect(new connectObject().setNodeField("diffuseColor").setProtoField("diffuseColor"))
     [java]             .addConnect(new connectObject().setNodeField("emissiveColor").setProtoField("emissiveColor"))
     [java]             .addConnect(new connectObject().setNodeField("specularColor").setProtoField("specularColor"))
     [java]             .addConnect(new connectObject().setNodeField("transparency").setProtoField("transparency"))
     [java]             .addConnect(new connectObject().setNodeField("shininess").setProtoField("shininess"))
     [java]             .addConnect(new connectObject().setNodeField("ambientIntensity").setProtoField("ambientIntensity"))))
     [java]         .addComments(" Only first node (the node type) is renderable, others are along for the ride ")
     [java]         .addChild(new ScriptObject("MaterialModulatorScript").setSourceCode("\n" + 
     [java] "\n" + 
     [java] "ecmascript:" + "\n" + 
     [java] "function initialize ()" + "\n" + 
     [java] "{" + "\n" + 
     [java] "    newColor = diffuseColor; // start with correct color" + "\n" + 
     [java] "}" + "\n" + 
     [java] "function set_enabled (newValue)" + "\n" + 
     [java] "{" + "\n" + 
     [java] "	enabled = newValue;" + "\n" + 
     [java] "}" + "\n" + 
     [java] "function clockTrigger (timeValue)" + "\n" + 
     [java] "{" + "\n" + 
     [java] "    if (!enabled) return;" + "\n" + 
     [java] "    red   = newColor.r;" + "\n" + 
     [java] "    green = newColor.g;" + "\n" + 
     [java] "    blue  = newColor.b;" + "\n" + 
     [java] "    " + "\n" + 
     [java] "    // note different modulation rates for each color component, % is modulus operator" + "\n" + 
     [java] "    newColor = new SFColor ((red + 0.02) % 1, (green + 0.03) % 1, (blue + 0.04) % 1);" + "\n" + 
     [java] "	if (enabled)" + "\n" + 
     [java] "	{" + "\n" + 
     [java] "		Browser.print ('diffuseColor=(' + red + ',' + green + ',' + blue + ') newColor=' + newColor.toString() + '\\n');" + "\n" + 
     [java] "	}" + "\n" + 
     [java] "}" + "\n")
     [java]           .addField(new fieldObject().setName("enabled").setType(fieldObject.TYPE_SFBOOL).setAccessType(fieldObject.ACCESSTYPE_INPUTOUTPUT))
     [java]           .addField(new fieldObject().setName("diffuseColor").setType(fieldObject.TYPE_SFCOLOR).setAccessType(fieldObject.ACCESSTYPE_INPUTOUTPUT))
     [java]           .addField(new fieldObject().setName("newColor").setType(fieldObject.TYPE_SFCOLOR).setAccessType(fieldObject.ACCESSTYPE_OUTPUTONLY))
     [java]           .addField(new fieldObject().setName("clockTrigger").setType(fieldObject.TYPE_SFTIME).setAccessType(fieldObject.ACCESSTYPE_INPUTONLY))
     [java]           .setIS(new ISObject()
     [java]             .addConnect(new connectObject().setNodeField("enabled").setProtoField("enabled"))
     [java]             .addConnect(new connectObject().setNodeField("diffuseColor").setProtoField("diffuseColor"))))))
     [java]     .addComments(" Test success: declarative statement createDeclarativeShapeTests() ")
     [java]     .addChild(new GroupObject("DeclarativeGroupExample")
     [java]       .addChild(new ShapeObject()
     [java]         .setMetadata(new MetadataStringObject("FindableMetadataStringTest").setName("findThisNameValue").setValue(new String[] {"test case"}))
     [java]         .setAppearance(new AppearanceObject("DeclarativeAppearanceExample")
     [java]           .addComments(" DeclarativeMaterialExample gets overridden by subsequently added MaterialModulator ProtoInstance ")
     [java]           .setMaterial(new ProtoInstanceObject("MaterialModulator", "MyMaterialModulator")))
     [java]         .setGeometry(new ConeObject().setBottom(false).setBottomRadius(0.05f).setHeight(0.1f)))
     [java]       .addComments(" Test success: declarativeGroup.addChild() singleton pipeline method "))
     [java]     .addComments(" Test success: declarative statement addChild() ")
     [java]     .addComments(" Test success: x3dModel.findNodeByDEF(DeclarativeAppearanceExample) = <Appearance DEF='DeclarativeAppearanceExample'/> i.e. <Appearance DEF='DeclarativeAppearanceExample'> <!- - DeclarativeMaterialExample gets overridden by subsequently added MaterialModulator ProtoInstance - -> <ProtoInstance DEF='MyMaterialModulator' name='MaterialModulator' containerField='material'/> </Appearance> ")
     [java]     .addComments(" Test success: x3dModel.findElementByNameValue(findThisNameValue) = <MetadataString DEF='FindableMetadataStringTest' name='findThisNameValue' value='\"test case\"'/> ")
     [java]     .addComments(" Test success: x3dModel.findElementByNameValue(\"ArtDeco01Material\", \"ProtoDeclare\") found ")
     [java]     .addComments(" Test success: x3dModel.findElementByNameValue(\"MaterialModulator\", \"ProtoDeclare\") found ")
     [java]     .addComments(" Test success: x3dModel.findElementByNameValue(\"MaterialModulator\", \"ProtoInstance\") found ")
     [java]     .addChild(new GroupObject("TestFieldObjectsGroup")
     [java]       .addComments(" testFieldObjects() results ")
     [java]       .addComments(" SFBool default=true, true=true, false=false, negate()=true ")
     [java]       .addComments(" MFBool default=, initial=true false true, negate()=false true false ")
     [java]       .addComments(" SFFloat default=0.0, initial=1.0, setValue(2)=2.0, setValue(3.0f)=3.0, setValue(4.0)=4.0 ")
     [java]       .addComments(" MFFloat default=, initial=1 2 3, append(5)=1 2 3 5, inserts(3,4)(0,0)=0 1 2 3 4 5, append(6)=0 1 2 3 4 5 6, size()=7 ")
     [java]       .addComments(" ... get1Value[3]=3.0, remove[1]=0 2 3 4 5 6, set1Value(0,10)=10 2 3 4 5 6, multiply(2)=20 4 6 8 10 12, clear= ")
     [java]       .addComments(" SFVec3f default=0 0 0, initial=1 2 3, setValue=4 5 6, multiply(2)=8 10 12, normalize()=0.45584232 0.5698029 0.68376344, regex matches()=true ")
     [java]       .addComments(" regex test SFVec3f().matches(\"1 2 3\")=true, regex test SFVec3f().matches(\"1 2 3 4\")=false, regex test (SFRotationObject.matches(\"0 0 0 0\")=true, failure detecting illegal (zero axis) rotation value "))
     [java]     .addChild(new SoundObject().setLocation(0.0f,1.6f,0.0f)
     [java]       .addComments(" set sound-ellipsoid location height at 1.6m to match typical avatar height ")
     [java]       .setSource(new AudioClipObject().setDescription("chimes").setUrl(new String[] {"chimes.wav","https://www.web3d.org/x3d/content/examples/ConformanceNist/Sounds/AudioClip/chimes.wav"})
     [java]         .addComments(" Scene example fragment from https://www.web3d.org/x3d/content/examples/ConformanceNist/Sounds/AudioClip/default.x3d ")))
     [java]     .addChild(new SoundObject().setLocation(0.0f,1.6f,0.0f)
     [java]       .addComments(" set sound-ellipsoid location height at 1.6m to match typical avatar height ")
     [java]       .setSource(new MovieTextureObject().setDescription("mpgsys.mpg from ConformanceNist suite").setUrl(new String[] {"mpgsys.mpg","https://www.web3d.org/x3d/content/examples/ConformanceNist/Appearance/MovieTexture/mpgsys.mpg"})
     [java]         .addComments(" Scene example fragment from https://www.web3d.org/x3d/content/examples/ConformanceNist/Appearance/MovieTexture/mpeg1-systems.x3d ")
     [java]         .addComments(" Expected containerField='source', allowed containerField values=\"texture\" \"source\" \"back\" \"bottom\" \"front\" \"left\" \"right\" \"top\" \"backTexture\" \"bottomTexture\" \"frontTexture\" \"leftTexture\" \"rightTexture\" \"topTexture\" \"watchList\" ")))
     [java]     .addComments(" Test success: AnchorObject.isNode()=true, siteAnchor.isNode()=true ")
     [java]     .addComments(" Test success: AnchorObject.isStatement()=false, siteAnchor.isStatement()=false ")
     [java]     .addComments(" Test success: ROUTEObject.isNode()=false, orbitPositionROUTE.isNode()=false ")
     [java]     .addComments(" Test success: ROUTEObject.isStatement()=true, orbitPositionROUTE.isStatement()=true ")
     [java]     .addComments(" Test success: CommentsBlock.isNode()=false, testComments.isNode()=false ")
     [java]     .addComments(" Test failure: CommentsBlock.isStatement()=true, testComments.isStatement()=true ")
     [java]     .addChild(new ShapeObject("ExtrusionShape")
     [java]       .addComments(" ExampleExtrusion isCrossSectionClosed()=true, crossSection='[1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0]' ")
     [java]       .addComments(" ExampleExtrusion isSpineClosed()=false, spine='[0.0, 0.0, 0.0, 0.0, 1.0, 0.0]' ")
     [java]       .setAppearance(new AppearanceObject("TransparentAppearance")
     [java]         .setMaterial(new MaterialObject().setTransparency(1.0f)))
     [java]       .setGeometry(new ExtrusionObject("ExampleExtrusion")))
     [java]     .addChild(new GroupObject()
     [java]       .addComments(" Test MFNode children array as an ordered list consisting of comments, statements, ProtoInstance and nodes ")
     [java]       .addChild(new ProtoDeclareObject("NewWorldInfo").setName("NewWorldInfo")
     [java]         .setProtoInterface(new ProtoInterfaceObject()
     [java]           .addField(new fieldObject().setName("description").setType(fieldObject.TYPE_SFSTRING).setAccessType(fieldObject.ACCESSTYPE_INITIALIZEONLY)))
     [java]         .setProtoBody(new ProtoBodyObject()
     [java]           .addChild(new WorldInfoObject())))
     [java]       .addChild(new ProtoInstanceObject("NewWorldInfo", "Proto1")
     [java]         .addFieldValue(new fieldValueObject().setName("description").setValue("testing 1 2 3")))
     [java]       .addChild(new GroupObject("Node2")
     [java]         .addComments(" intentionally empty "))
     [java]       .addChild(new ProtoInstanceObject("NewWorldInfo", "Proto3"))
     [java]       .addChild(new TransformObject("Node4")
     [java]         .addComments(" intentionally empty "))
     [java]       .addComments(" Test satisfactorily creates MFNode children array as an ordered list with mixed content "))
     [java]     .addChild(new ProtoDeclareObject("ShaderProto").setName("ShaderProto")
     [java]       .setProtoBody(new ProtoBodyObject()
     [java]         .addChild(new ProgramShaderObject())))
     [java]     .addChild(new ShapeObject()
     [java]       .setAppearance(new AppearanceObject()
     [java]         .addComments(" Test MFNode shaders array as an ordered list consisting of comments, ProtoInstance and nodes ")
     [java]         .addComments(" Test satisfactorily creates MFNode shaders array as an ordered list with mixed content ")
     [java]         .addShaders(new ProgramShaderObject("TestShader1")
     [java]           .addPrograms(new ShaderProgramObject("TestShader2")))
     [java]         .addShaders(new ProtoInstanceObject("ShaderProto", "TestShader3"))
     [java]         .addShaders(new ComposedShaderObject("TestShader4")
     [java]           .addParts(new ShaderPartObject("TestShader5")))))
     [java]     .addChild(new TransformObject("SpecialtyNodes")
     [java]       .addChild(new CADLayerObject()
     [java]         .addChild(new CADAssemblyObject()
     [java]           .addChild(new CADPartObject()
     [java]             .addChild(new CADFaceObject()))))
     [java]       .addChild(new EspduTransformObject())
     [java]       .addChild(new ReceiverPduObject().setReceivedPower(0.0f))
     [java]       .addChild(new SignalPduObject())
     [java]       .addChild(new TransmitterPduObject().setRelativeAntennaLocation(0.0f,0.0f,0.0f).setTransmitFrequencyBandwidth(0.0f))
     [java]       .addChild(new DISEntityManagerObject()
     [java]         .addMapping(new DISEntityTypeMappingObject()))));
     [java]     }
     [java] 	// end of initialize() method
     [java] 
     [java] 	/** The initialized model object, created within initialize() method. */
     [java] 	private X3DObject x3dModel;
     [java] 
     [java] 	/** Provide a 
     [java] 	 * <a href="https://dzone.com/articles/java-copy-shallow-vs-deep-in-which-you-will-swim" target="_blank">shallow copy</a>
     [java] 	 * of the X3D model.
     [java] 	 * @see <a href="https://www.web3d.org/specifications/java/javadoc/org/web3d/x3d/jsail/Core/X3DObject.html">X3DObject</a>
     [java] 	 * @return temporaryJavaOutputFile model
     [java] 	 */
     [java] 	public X3DObject getX3dModel()
     [java] 	{	  
     [java] 		return x3dModel;
     [java] 	}
     [java] 	   
     [java]     /** Default main() method provided for test purposes, uses CommandLine to set global ConfigurationProperties for this object.
     [java]      * @param args array of input parameters, provided as arguments
     [java] 	 * @see <a href="https://www.web3d.org/specifications/java/javadoc/org/web3d/x3d/jsail/Core/X3DObject.html#handleArguments-java.lang.String:A-">X3DObject.handleArguments(args)</a>
     [java] 	 * @see <a href="https://www.web3d.org/specifications/java/javadoc/org/web3d/x3d/jsail/Core/X3DObject.html#validationReport--">X3DObject.validationReport()</a>
     [java]      * @see <a href="https://www.web3d.org/specifications/java/javadoc/org/web3d/x3d/jsail/CommandLine.html">CommandLine</a>
     [java]      * @see <a href="https://www.web3d.org/specifications/java/javadoc/org/web3d/x3d/jsail/CommandLine.html#USAGE">CommandLine.USAGE</a>
     [java]      * @see <a href="https://www.web3d.org/specifications/java/javadoc/org/web3d/x3d/jsail/ConfigurationProperties.html">ConfigurationProperties</a>
     [java]      */
     [java]     public static void main(String args[])
     [java]     {
     [java]         X3DObject thisExampleX3dObject = new temporaryJavaOutputFile().getX3dModel();
     [java] 
     [java] 		boolean hasArguments = (args != null) && (args.length > 0);
     [java] 		boolean validate = true; // default
     [java] 		boolean argumentsLoadNewModel = false;
     [java] 		String  fileName = new String();
     [java] 
     [java] 		if (args != null)
     [java] 		{
     [java] 			for (String arg : args)
     [java] 			{
     [java] 				if (arg.toLowerCase().startsWith("-v") || arg.toLowerCase().contains("validate"))
     [java] 				{
     [java] 					validate = true; // making sure
     [java] 				}
     [java] 				if (arg.toLowerCase().endsWith(X3DObject.FILE_EXTENSION_X3D) ||
     [java] 					arg.toLowerCase().endsWith(X3DObject.FILE_EXTENSION_CLASSICVRML) ||
     [java] 					arg.toLowerCase().endsWith(X3DObject.FILE_EXTENSION_X3DB) ||
     [java] 					arg.toLowerCase().endsWith(X3DObject.FILE_EXTENSION_VRML97) ||
     [java] 					arg.toLowerCase().endsWith(X3DObject.FILE_EXTENSION_EXI) ||
     [java] 					arg.toLowerCase().endsWith(X3DObject.FILE_EXTENSION_GZIP) ||
     [java] 					arg.toLowerCase().endsWith(X3DObject.FILE_EXTENSION_ZIP) ||
     [java] 					arg.toLowerCase().endsWith(X3DObject.FILE_EXTENSION_HTML) ||
     [java] 					arg.toLowerCase().endsWith(X3DObject.FILE_EXTENSION_XHTML))
     [java] 				{
     [java] 					argumentsLoadNewModel = true;
     [java] 					fileName = arg;
     [java] 				}
     [java] 			}
     [java] 		}
     [java] 		if      (argumentsLoadNewModel)
     [java] 			System.out.println("WARNING: \"temporaryJavaOutputFile\" model invocation is attempting to load file \"" + fileName + "\" instead of simply validating itself... file loading ignored.");
     [java] 		else if (hasArguments) // if no arguments provided, this method produces usage warning
     [java] 			thisExampleX3dObject.handleArguments(args);
     [java] 
     [java] 		if (validate)
     [java] 		{
     [java] 			System.out.print("Java program \"temporaryJavaOutputFile\" self-validation test results: ");
     [java] 			String validationResults = thisExampleX3dObject.validationReport();
     [java] 			System.out.println(validationResults);
     [java] 		}
     [java]     }
     [java] }
     [java] 
     [java] ===========================================
     [java] Create JSON Encoding of model using stylesheet X3dToJson.xslt
     [java] Warning: toFileStylesheetConversion(X3dToJson.xslt) is overwriting prior file HelloWorldProgramOutput.json
     [java] Script DEF=colorTypeConversionScript contains CDATA source-code text, copied as "#sourceText" using "strings" mode
     [java] Script DEF=MaterialModulatorScript contains CDATA source-code text, copied as "#sourceText" using "strings" mode
     [java] helloWorldObject.toFileJSON("HelloWorldProgramOutput.json") success: true
     [java] C:\x3d-code\www.web3d.org\x3d\stylesheets\java\classes\HelloWorldProgramOutput.json
     [java] Test toStringJSON()
     [java] 
     [java] Script DEF=colorTypeConversionScript contains CDATA source-code text, copied as "#sourceText" using "strings" mode
     [java] Script DEF=MaterialModulatorScript contains CDATA source-code text, copied as "#sourceText" using "strings" mode
     [java] { "X3D": {
     [java]     "encoding":"UTF-8",
     [java]     "@profile":"Immersive",
     [java]     "@version":"3.3",
     [java]     "@xsd:noNamespaceSchemaLocation":"http://www.web3d.org/specifications/x3d-3.3.xsd",
     [java]     "JSON schema":"http://www.web3d.org/specifications/x3d-3.3-JSONSchema.json",
     [java]     "-children":[
     [java]       {
     [java]         "#comment":"x3dVersionComparisonTest for this model: supportsX3dVersion(X3DObject.VERSION_3_0)=true"
     [java]       }
     [java]     ],
     [java]     "head": {
     [java]         "-children":[
     [java]           {
     [java]             "#comment":"comment #1"
     [java]           },
     [java]           {
     [java]             "#comment":"comment #2"
     [java]           },
     [java]           {
     [java]             "#comment":"comment #3"
     [java]           },
     [java]           {
     [java]             "#comment":"comment #4"
     [java]           }
     [java]         ],
     [java]         "component": [
     [java]           {
     [java]             "@name":"Navigation",
     [java]             "@level":3
     [java]           },
     [java]           {
     [java]             "@name":"Shaders",
     [java]             "@level":1
     [java]           },
     [java]           {
     [java]             "@name":"CADGeometry",
     [java]             "@level":2
     [java]           },
     [java]           {
     [java]             "@name":"DIS",
     [java]             "@level":2
     [java]           },
     [java]           {
     [java]             "@name":"H-Anim",
     [java]             "@level":1
     [java]           },
     [java]           {
     [java]             "@name":"Grouping",
     [java]             "@level":1
     [java]           },
     [java]           {
     [java]             "@name":"Layering",
     [java]             "@level":1
     [java]           }
     [java]         ],
     [java]         "unit": [
     [java]           {
     [java]             "@name":"AngleUnitConversion",
     [java]             "@category":"angle",
     [java]             "@conversionFactor":1.0
     [java]           },
     [java]           {
     [java]             "@name":"LengthUnitConversion",
     [java]             "@category":"length",
     [java]             "@conversionFactor":1.0
     [java]           },
     [java]           {
     [java]             "@name":"ForceFromPoundsToNewtons",
     [java]             "@category":"force",
     [java]             "@conversionFactor":4.4482
     [java]           }
     [java]         ],
     [java]         "meta": [
     [java]           {
     [java]             "@name":"title",
     [java]             "@content":"HelloWorldProgramOutput.x3d"
     [java]           },
     [java]           {
     [java]             "@name":"info",
     [java]             "@content":"continued development and testing in progress"
     [java]           },
     [java]           {
     [java]             "@name":"description",
     [java]             "@content":"Example HelloWorldProgram creates an X3D model using the X3D Java Scene Access Interface Library (X3DJSAIL)"
     [java]           },
     [java]           {
     [java]             "@name":"reference",
     [java]             "@content":"https://www.web3d.org/specifications/java/X3DJSAIL.html"
     [java]           },
     [java]           {
     [java]             "@name":"generator",
     [java]             "@content":"HelloWorldProgramOutput.java"
     [java]           },
     [java]           {
     [java]             "@name":"created",
     [java]             "@content":"6 September 2016"
     [java]           },
     [java]           {
     [java]             "@name":"modified",
     [java]             "@content":"13 January 2020"
     [java]           },
     [java]           {
     [java]             "@name":"generator",
     [java]             "@content":"X3D Java Scene Access Interface Library (X3DJSAIL)"
     [java]           },
     [java]           {
     [java]             "@name":"generator",
     [java]             "@content":"https://www.web3d.org/specifications/java/examples/HelloWorldProgram.java"
     [java]           },
     [java]           {
     [java]             "@name":"generator",
     [java]             "@content":"Netbeans http://www.netbeans.org"
     [java]           },
     [java]           {
     [java]             "@name":"creator",
     [java]             "@content":"Don Brutzman"
     [java]           },
     [java]           {
     [java]             "@name":"reference",
     [java]             "@content":"https://sourceforge.net/p/x3d/code/HEAD/tree/www.web3d.org/x3d/stylesheets/java/examples/HelloWorldProgramOutput.x3d"
     [java]           },
     [java]           {
     [java]             "@name":"reference",
     [java]             "@content":"Console output, ClassicVRML encoding, VRML97 encoding and pretty-print documentation:"
     [java]           },
     [java]           {
     [java]             "@name":"reference",
     [java]             "@content":"HelloWorldProgramOutput.txt"
     [java]           },
     [java]           {
     [java]             "@name":"reference",
     [java]             "@content":"HelloWorldProgramOutput.x3dv"
     [java]           },
     [java]           {
     [java]             "@name":"reference",
     [java]             "@content":"HelloWorldProgramOutput.wrl"
     [java]           },
     [java]           {
     [java]             "@name":"reference",
     [java]             "@content":"HelloWorldProgramOutput.html"
     [java]           },
     [java]           {
     [java]             "@name":"reference",
     [java]             "@content":"https://savage.nps.edu/X3dValidator?url=https://www.web3d.org/specifications/java/examples/HelloWorldProgramOutput.x3d"
     [java]           },
     [java]           {
     [java]             "@name":"identifier",
     [java]             "@content":"https://www.web3d.org/specifications/java/examples/HelloWorldProgramOutput.x3d"
     [java]           },
     [java]           {
     [java]             "@name":"license",
     [java]             "@content":"../license.html"
     [java]           },
     [java]           {
     [java]             "@name":"translated",
     [java]             "@content":"13 January 2020"
     [java]           },
     [java]           {
     [java]             "@name":"generator",
     [java]             "@content":"X3dToJson.xslt, https://www.web3d.org/x3d/stylesheets/X3dToJson.html"
     [java]           },
     [java]           {
     [java]             "@name":"reference",
     [java]             "@content":"X3D JSON encoding: https://www.web3d.org/wiki/index.php/X3D_JSON_Encoding"
     [java]           }
     [java]         ]
     [java]     },
     [java]     "Scene": {
     [java]         "-children":[
     [java]           { "ViewpointGroup":
     [java]             {
     [java]               "@description":"Available viewpoints",
     [java]               "-children":[
     [java]                 { "Viewpoint":
     [java]                   {
     [java]                     "@DEF":"DefaultView",
     [java]                     "@description":"Hello X3DJSAIL"
     [java]                   }
     [java]                 },
     [java]                 { "Viewpoint":
     [java]                   {
     [java]                     "@DEF":"TopDownView",
     [java]                     "@description":"top-down view from above",
     [java]                     "@orientation":[1,0,0,-1.570796],
     [java]                     "@position":[0,100,0]
     [java]                   }
     [java]                 }
     [java]               ]
     [java]             }
     [java]           },
     [java]           { "NavigationInfo":
     [java]             {
     [java]               "@type":["EXAMINE","FLY","ANY"]
     [java]             }
     [java]           },
     [java]           { "WorldInfo":
     [java]             {
     [java]               "@DEF":"WorldInfoDEF",
     [java]               "@title":"HelloWorldProgram produced by X3D Java SAI Library (X3DJSAIL)"
     [java]             }
     [java]           },
     [java]           { "WorldInfo":
     [java]             {
     [java]               "@USE":"WorldInfoDEF"
     [java]             }
     [java]           },
     [java]           { "WorldInfo":
     [java]             {
     [java]               "@USE":"WorldInfoDEF"
     [java]             }
     [java]           },
     [java]           { "MetadataString":
     [java]             {
     [java]               "@name":"test",
     [java]               "@DEF":"scene.addChildMetadata",
     [java]               "@value":["Top-level root Metadata node beneath Scene needs to be one of '-children' in JSON encoding"]
     [java]             }
     [java]           },
     [java]           { "LayerSet":
     [java]             {
     [java]               "@DEF":"scene.addChildLayerSetTest"
     [java]             }
     [java]           },
     [java]           { "Transform":
     [java]             {
     [java]               "@DEF":"LogoGeometryTransform",
     [java]               "@translation":[0,1.5,0],
     [java]               "-children":[
     [java]                 { "Anchor":
     [java]                   {
     [java]                     "@description":"select for X3D Java SAI Library (X3DJSAIL) description",
     [java]                     "@url":["../X3DJSAIL.html","https://www.web3d.org/specifications/java/X3DJSAIL.html"],
     [java]                     "-children":[
     [java]                       { "Shape":
     [java]                         {
     [java]                           "@DEF":"BoxShape",
     [java]                           "-appearance":
     [java]                             { "Appearance":
     [java]                               {
     [java]                                 "-material":
     [java]                                   { "Material":
     [java]                                     {
     [java]                                       "@DEF":"GreenMaterial",
     [java]                                       "@diffuseColor":[0,1,1],
     [java]                                       "@emissiveColor":[0.8,0,0],
     [java]                                       "@transparency":0.1
     [java]                                     }
     [java]                                   },
     [java]                                 "-texture":
     [java]                                   { "ImageTexture":
     [java]                                     {
     [java]                                       "@url":["images/X3dJavaSceneAccessInterfaceSaiLibrary.png","https://www.web3d.org/specifications/java/examples/images/X3dJavaSceneAccessInterfaceSaiLibrary.png"]
     [java]                                     }
     [java]                                   }
     [java]                               }
     [java]                             },
     [java]                           "-geometry":
     [java]                             { "Box":
     [java]                               {
     [java]                                 "@DEF":"test-NMTOKEN_regex.0123456789",
     [java]                                 "@class":"untextured"
     [java]                               }
     [java]                             }
     [java]                         }
     [java]                       }
     [java]                     ]
     [java]                   }
     [java]                 }
     [java]               ]
     [java]             }
     [java]           },
     [java]           { "Shape":
     [java]             {
     [java]               "@DEF":"LineShape",
     [java]               "-appearance":
     [java]                 { "Appearance":
     [java]                   {
     [java]                     "-material":
     [java]                       { "Material":
     [java]                         {
     [java]                           "@emissiveColor":[0.6,0.19607843,0.8]
     [java]                         }
     [java]                       }
     [java]                   }
     [java]                 },
     [java]               "-geometry":
     [java]                 { "IndexedLineSet":
     [java]                   {
     [java]                     "@coordIndex":[0,1,2,3,4,0],
     [java]                     "-children":[
     [java]                       {
     [java]                         "#comment":"Coordinate 3-tuple point count: 6"
     [java]                       }
     [java]                     ],
     [java]                     "-coord":
     [java]                       { "Coordinate":
     [java]                         {
     [java]                           "@point":[0,1.5,0,2,1.5,0,2,1.5,-2,-2,1.5,-2,-2,1.5,0,0,1.5,0]
     [java]                         }
     [java]                       }
     [java]                   }
     [java]                 }
     [java]             }
     [java]           },
     [java]           { "PositionInterpolator":
     [java]             {
     [java]               "@DEF":"BoxPathAnimator",
     [java]               "@key":[0,0.125,0.375,0.625,0.875,1],
     [java]               "@keyValue":[0,1.5,0,2,1.5,0,2,1.5,-2,-2,1.5,-2,-2,1.5,0,0,1.5,0]
     [java]             }
     [java]           },
     [java]           { "TimeSensor":
     [java]             {
     [java]               "@DEF":"OrbitClock",
     [java]               "@cycleInterval":8.0,
     [java]               "@loop":true
     [java]             }
     [java]           },
     [java]           { "ROUTE":
     [java]             {
     [java]               "@fromField":"fraction_changed",
     [java]               "@fromNode":"OrbitClock",
     [java]               "@toField":"set_fraction",
     [java]               "@toNode":"BoxPathAnimator"
     [java]             }
     [java]           },
     [java]           { "ROUTE":
     [java]             {
     [java]               "@fromField":"value_changed",
     [java]               "@fromNode":"BoxPathAnimator",
     [java]               "@toField":"set_translation",
     [java]               "@toNode":"LogoGeometryTransform"
     [java]             }
     [java]           },
     [java]           { "Transform":
     [java]             {
     [java]               "@DEF":"TextTransform",
     [java]               "@translation":[0,-1.5,0],
     [java]               "-children":[
     [java]                 { "Shape":
     [java]                   {
     [java]                     "-appearance":
     [java]                       { "Appearance":
     [java]                         {
     [java]                           "-material":
     [java]                             { "Material":
     [java]                               {
     [java]                                 "@USE":"GreenMaterial"
     [java]                               }
     [java]                             }
     [java]                         }
     [java]                       },
     [java]                     "-geometry":
     [java]                       { "Text":
     [java]                         {
     [java]                           "@string":["X3D Java","SAI Library","X3DJSAIL"],
     [java]                           "-children":[
     [java]                             {
     [java]                               "#comment":"Comment example A, plain quotation marks: He said, \"Immel did it!\""
     [java]                             },
     [java]                             {
     [java]                               "#comment":"Comment example B, XML character entities: He said, &quot;Immel did it!&quot;"
     [java]                             }
     [java]                           ],
     [java]                           "-metadata":
     [java]                             { "MetadataSet":
     [java]                               {
     [java]                                 "@name":"EscapedQuotationMarksMetadataSet",
     [java]                                 "-value":[
     [java]                                   { "MetadataString":
     [java]                                     {
     [java]                                       "@name":"quotesTestC",
     [java]                                       "@value":["MFString example C, backslash-escaped quotes: He said, \"Immel did it!\""]
     [java]                                     }
     [java]                                   },
     [java]                                   { "MetadataString":
     [java]                                     {
     [java]                                       "@name":"extraChildTest",
     [java]                                       "@value":["checks MetadataSetObject addValue() method"]
     [java]                                     }
     [java]                                   }
     [java]                                 ]
     [java]                               }
     [java]                             },
     [java]                           "-fontStyle":
     [java]                             { "FontStyle":
     [java]                               {
     [java]                                 "@justify":["MIDDLE","MIDDLE"]
     [java]                               }
     [java]                             }
     [java]                         }
     [java]                       }
     [java]                   }
     [java]                 },
     [java]                 { "Collision":
     [java]                   {
     [java]                     "-children":[
     [java]                       {
     [java]                         "#comment":"test containerField='proxy'"
     [java]                       }
     [java]                     ],
     [java]                     "-proxy":
     [java]                       { "Shape":
     [java]                         {
     [java]                           "@DEF":"ProxyShape",
     [java]                           "-children":[
     [java]                             {
     [java]                               "#comment":"alternative XML encoding: Text string='\"One, Two, Comment\" \"\" \"He said, \\&quot;Immel did it!\\&quot;\"'"
     [java]                             },
     [java]                             {
     [java]                               "#comment":"alternative XML encoding: Text string='\"One, Two, Comment\" \"\" \"He said, \\&quot;Immel did it!\\&quot;\" \"\"'"
     [java]                             },
     [java]                             {
     [java]                               "#comment":"alternative Java source: .setString(new String [] {\"One, Two, Comment\", \"\", \"He said, \\\"\"Immel did it!\\\"\"\"})"
     [java]                             },
     [java]                             {
     [java]                               "#comment":"reference: https://www.web3d.org/x3d/content/examples/Basic/X3dSpecifications/StringArrayEncodingExamplesIndex.html"
     [java]                             }
     [java]                           ],
     [java]                           "-geometry":
     [java]                             { "Text":
     [java]                               {
     [java]                                 "@string":["One, Two, Text","","He said, \"Immel did it!\" \"\""]
     [java]                               }
     [java]                             }
     [java]                         }
     [java]                       }
     [java]                   }
     [java]                 },
     [java]                 {
     [java]                   "#comment":"It's a beautiful world"
     [java]                 },
     [java]                 {
     [java]                   "#comment":"... for you!"
     [java]                 },
     [java]                 {
     [java]                   "#comment":"https://en.wikipedia.org/wiki/Beautiful_World_(Devo_song)"
     [java]                 }
     [java]               ]
     [java]             }
     [java]           },
     [java]           {
     [java]             "#comment":"repeatedly spin 180 degrees as a readable special effect"
     [java]           },
     [java]           { "OrientationInterpolator":
     [java]             {
     [java]               "@DEF":"SpinInterpolator",
     [java]               "@key":[0,0.5,1],
     [java]               "@keyValue":[0,1,0,4.712389,0,1,0,0,0,1,0,1.5707964]
     [java]             }
     [java]           },
     [java]           { "TimeSensor":
     [java]             {
     [java]               "@DEF":"SpinClock",
     [java]               "@cycleInterval":5.0,
     [java]               "@loop":true
     [java]             }
     [java]           },
     [java]           { "ROUTE":
     [java]             {
     [java]               "@fromField":"fraction_changed",
     [java]               "@fromNode":"SpinClock",
     [java]               "@toField":"set_fraction",
     [java]               "@toNode":"SpinInterpolator"
     [java]             }
     [java]           },
     [java]           { "ROUTE":
     [java]             {
     [java]               "@fromField":"value_changed",
     [java]               "@fromNode":"SpinInterpolator",
     [java]               "@toField":"rotation",
     [java]               "@toNode":"TextTransform"
     [java]             }
     [java]           },
     [java]           { "Group":
     [java]             {
     [java]               "@DEF":"BackgroundGroup",
     [java]               "-children":[
     [java]                 { "Background":
     [java]                   {
     [java]                     "@DEF":"GradualBackground"
     [java]                   }
     [java]                 },
     [java]                 { "Script":
     [java]                   {
     [java]                     "@DEF":"colorTypeConversionScript",
     [java]                     "field": [
     [java]                       {
     [java]                         "@name":"colorInput",
     [java]                         "@accessType":"inputOnly",
     [java]                         "@type":"SFColor"
     [java]                       },
     [java]                       {
     [java]                         "@name":"colorsOutput",
     [java]                         "@accessType":"outputOnly",
     [java]                         "@type":"MFColor"
     [java]                       }
     [java]                     ],
     [java]                     "#sourceText":[
     [java] "",
     [java] "",
     [java] "ecmascript:",
     [java] "",
     [java] "function colorInput (eventValue) // Example source code",
     [java] "{",
     [java] "   colorsOutput = new MFColor(eventValue); // assigning value sends output event",
     [java] "// Browser.print('colorInput=' + eventValue + ', colorsOutput=' + colorsOutput + '\n');",
     [java] "}",
     [java] "",
     [java] ""
     [java] ]
     [java]                   }
     [java]                 },
     [java]                 { "ColorInterpolator":
     [java]                   {
     [java]                     "@DEF":"ColorAnimator",
     [java]                     "@key":[0,0.5,1],
     [java]                     "@keyValue":[0.9411765,1,1,0.29411766,0,0.50980395,0.9411765,1,1],
     [java]                     "-children":[
     [java]                       {
     [java]                         "#comment":"AZURE to INDIGO and back again"
     [java]                       }
     [java]                     ]
     [java]                   }
     [java]                 },
     [java]                 { "TimeSensor":
     [java]                   {
     [java]                     "@DEF":"ColorClock",
     [java]                     "@cycleInterval":60.0,
     [java]                     "@loop":true
     [java]                   }
     [java]                 },
     [java]                 { "ROUTE":
     [java]                   {
     [java]                     "@fromField":"colorsOutput",
     [java]                     "@fromNode":"colorTypeConversionScript",
     [java]                     "@toField":"skyColor",
     [java]                     "@toNode":"GradualBackground"
     [java]                   }
     [java]                 },
     [java]                 { "ROUTE":
     [java]                   {
     [java]                     "@fromField":"value_changed",
     [java]                     "@fromNode":"ColorAnimator",
     [java]                     "@toField":"colorInput",
     [java]                     "@toNode":"colorTypeConversionScript"
     [java]                   }
     [java]                 },
     [java]                 { "ROUTE":
     [java]                   {
     [java]                     "@fromField":"fraction_changed",
     [java]                     "@fromNode":"ColorClock",
     [java]                     "@toField":"set_fraction",
     [java]                     "@toNode":"ColorAnimator"
     [java]                   }
     [java]                 }
     [java]               ]
     [java]             }
     [java]           },
     [java]           { "ProtoDeclare":
     [java]             {
     [java]               "@name":"ArtDeco01Material",
     [java]               "@appinfo":"tooltip: ArtDeco01Material prototype is a Material node",
     [java]               "ProtoInterface": {
     [java]                   "field": [
     [java]                     {
     [java]                       "@name":"description",
     [java]                       "@accessType":"inputOutput",
     [java]                       "@appinfo":"tooltip for descriptionField",
     [java]                       "@type":"SFString",
     [java]                       "@value":"ArtDeco01Material prototype is a Material node"
     [java]                     },
     [java]                     {
     [java]                       "@name":"enabled",
     [java]                       "@accessType":"inputOutput",
     [java]                       "@type":"SFBool",
     [java]                       "@value":true
     [java]                     }
     [java]                   ]
     [java]               },
     [java]               "ProtoBody": {
     [java]                   "-children":[
     [java]                     {
     [java]                       "#comment":"Initial node of ProtoBody determines prototype node type"
     [java]                     },
     [java]                     { "Material":
     [java]                       {
     [java]                         "@ambientIntensity":0.25,
     [java]                         "@diffuseColor":[0.282435,0.085159,0.134462],
     [java]                         "@shininess":0.127273,
     [java]                         "@specularColor":[0.276305,0.11431,0.139857]
     [java]                       }
     [java]                     },
     [java]                     {
     [java]                       "#comment":"[HelloWorldProgram diagnostic] should be connected to scene graph: artDeco01ProtoDeclare.getNodeType()=\"Material\""
     [java]                     },
     [java]                     {
     [java]                       "#comment":"presence of follow-on TouchSensor shows that additional nodes are allowed in ProtoBody after initial node, regardless of node types"
     [java]                     },
     [java]                     { "TouchSensor":
     [java]                       {
     [java]                         "@description":"within ProtoBody",
     [java]                         "IS": {
     [java]                             "connect": [
     [java]                               {
     [java]                                 "@nodeField":"description",
     [java]                                 "@protoField":"description"
     [java]                               },
     [java]                               {
     [java]                                 "@nodeField":"enabled",
     [java]                                 "@protoField":"enabled"
     [java]                               }
     [java]                             ]
     [java]                         }
     [java]                       }
     [java]                     }
     [java]                   ]
     [java]               }
     [java]             }
     [java]           },
     [java]           { "ExternProtoDeclare":
     [java]             {
     [java]               "@name":"ArtDeco02Material",
     [java]               "@appinfo":"this is a different Material node",
     [java]               "@url":["http://X3dGraphics.com/examples/X3dForWebAuthors/Chapter14Prototypes/ArtDecoPrototypesExcerpt.x3d#ArtDeco02Material","http://X3dGraphics.com/examples/X3dForWebAuthors/Chapter14Prototypes/ArtDecoPrototypesExcerpt.x3dv#ArtDeco02Material"],
     [java]               "-children":[
     [java]                 {
     [java]                   "#comment":"[HelloWorldProgram diagnostic] artDeco02ExternProtoDeclare.getNodeType()=\"ERROR_UNKNOWN_EXTERNPROTODECLARE_NODE_TYPE: ExternProtoDeclare name='ArtDeco02Material' type cannot be remotely accessed at run time. TODO X3DJSAIL needs to add further capability that retrieves the ExternProtoDeclare file.\""
     [java]                 }
     [java]               ],
     [java]               "field": [
     [java]                 {
     [java]                   "@name":"description",
     [java]                   "@accessType":"inputOutput",
     [java]                   "@appinfo":"tooltip for descriptionField",
     [java]                   "@type":"SFString"
     [java]                 }
     [java]               ]
     [java]             }
     [java]           },
     [java]           {
     [java]             "#comment":"Tested ArtDeco01ProtoInstance, ArtDeco02ProtoInstance for improper node type when ProtoInstance is added in wrong place"
     [java]           },
     [java]           { "Shape":
     [java]             {
     [java]               "@DEF":"TestShape1",
     [java]               "-appearance":
     [java]                 { "Appearance":
     [java]                   {
     [java]                     "@DEF":"TestAppearance1",
     [java]                     "-children":[
     [java]                       {
     [java]                         "#comment":"ArtDeco01Material prototype goes here... TODO ensure setContainerField is handled in exported Java"
     [java]                       }
     [java]                     ],
     [java]                     "-material":
     [java]                       { "ProtoInstance":
     [java]                         {
     [java]                           "@name":"ArtDeco01Material",
     [java]                           "-children":[
     [java]                             {
     [java]                               "#comment":"[HelloWorldProgram diagnostic] ArtDeco01ProtoInstance.getNodeType()=\"Material\""
     [java]                             }
     [java]                           ],
     [java]                           "fieldValue": [
     [java]                             {
     [java]                               "@name":"description",
     [java]                               "@value":"ArtDeco01Material can substitute for a Material node"
     [java]                             }
     [java]                           ]
     [java]                         }
     [java]                       }
     [java]                   }
     [java]                 },
     [java]               "-geometry":
     [java]                 { "Sphere":
     [java]                   {
     [java]                     "@radius":0.001
     [java]                   }
     [java]                 }
     [java]             }
     [java]           },
     [java]           { "Shape":
     [java]             {
     [java]               "@DEF":"TestShape2",
     [java]               "-appearance":
     [java]                 { "Appearance":
     [java]                   {
     [java]                     "@DEF":"TestAppearance2",
     [java]                     "-children":[
     [java]                       {
     [java]                         "#comment":"ArtDeco02Material prototype goes here... TODO ensure setContainerField is handled in exported Java"
     [java]                       }
     [java]                     ],
     [java]                     "-material":
     [java]                       { "ProtoInstance":
     [java]                         {
     [java]                           "@name":"ArtDeco02Material",
     [java]                           "@DEF":"ArtDeco02MaterialDEF",
     [java]                           "-children":[
     [java]                             {
     [java]                               "#comment":"[HelloWorldProgram diagnostic] ArtDeco02ProtoInstance.getNodeType()=\"ERROR_UNKNOWN_EXTERNPROTODECLARE_NODE_TYPE: ExternProtoDeclare name='ArtDeco02Material' type cannot be remotely accessed at run time. TODO X3DJSAIL needs to add further capability that retrieves the ExternProtoDeclare file.\""
     [java]                             }
     [java]                           ],
     [java]                           "fieldValue": [
     [java]                             {
     [java]                               "@name":"description",
     [java]                               "@value":"ArtDeco02Material can substitute for another Material node"
     [java]                             }
     [java]                           ]
     [java]                         }
     [java]                       }
     [java]                   }
     [java]                 },
     [java]               "-geometry":
     [java]                 { "Cone":
     [java]                   {
     [java]                     "@bottomRadius":0.001,
     [java]                     "@height":0.001
     [java]                   }
     [java]                 }
     [java]             }
     [java]           },
     [java]           { "Shape":
     [java]             {
     [java]               "@DEF":"TestShape3",
     [java]               "-appearance":
     [java]                 { "Appearance":
     [java]                   {
     [java]                     "@DEF":"TestAppearance3",
     [java]                     "-children":[
     [java]                       {
     [java]                         "#comment":"ArtDeco02Material ProtoInstance USE goes here. Note that name field is NOT defined as part of ProtoInstance USE."
     [java]                       }
     [java]                     ],
     [java]                     "-material":
     [java]                       { "ProtoInstance":
     [java]                         {
     [java]                           "@USE":"ArtDeco02MaterialDEF"
     [java]                         }
     [java]                       }
     [java]                   }
     [java]                 },
     [java]               "-geometry":
     [java]                 { "Cylinder":
     [java]                   {
     [java]                     "@height":0.001,
     [java]                     "@radius":0.001
     [java]                   }
     [java]                 }
     [java]             }
     [java]           },
     [java]           { "Inline":
     [java]             {
     [java]               "@DEF":"inlineSceneDef",
     [java]               "@url":["someOtherScene.x3d","https://www.web3d.org/specifications/java/examples/someOtherScene.x3d"]
     [java]             }
     [java]           },
     [java]           { "IMPORT":
     [java]             {
     [java]               "@AS":"WorldInfoDEF2",
     [java]               "@importedDEF":"WorldInfoDEF",
     [java]               "@inlineDEF":"inlineSceneDef"
     [java]             }
     [java]           },
     [java]           { "EXPORT":
     [java]             {
     [java]               "@AS":"WorldInfoDEF3",
     [java]               "@localDEF":"WorldInfoDEF"
     [java]             }
     [java]           },
     [java]           { "ProtoDeclare":
     [java]             {
     [java]               "@name":"MaterialModulator",
     [java]               "@appinfo":"mimic a Material node and modulate fields as an animation effect",
     [java]               "@documentation":"http://x3dgraphics.com/examples/X3dForWebAuthors/Chapter14Prototypes/MaterialModulatorIndex.html",
     [java]               "ProtoInterface": {
     [java]                   "field": [
     [java]                     {
     [java]                       "@name":"enabled",
     [java]                       "@accessType":"inputOutput",
     [java]                       "@type":"SFBool",
     [java]                       "@value":true
     [java]                     },
     [java]                     {
     [java]                       "@name":"diffuseColor",
     [java]                       "@accessType":"inputOutput",
     [java]                       "@type":"SFColor",
     [java]                       "@value":[0,0,0]
     [java]                     },
     [java]                     {
     [java]                       "@name":"emissiveColor",
     [java]                       "@accessType":"inputOutput",
     [java]                       "@type":"SFColor",
     [java]                       "@value":[0.05,0.05,0.5]
     [java]                     },
     [java]                     {
     [java]                       "@name":"specularColor",
     [java]                       "@accessType":"inputOutput",
     [java]                       "@type":"SFColor",
     [java]                       "@value":[0,0,0]
     [java]                     },
     [java]                     {
     [java]                       "@name":"transparency",
     [java]                       "@accessType":"inputOutput",
     [java]                       "@type":"SFFloat",
     [java]                       "@value":0.0
     [java]                     },
     [java]                     {
     [java]                       "@name":"shininess",
     [java]                       "@accessType":"inputOutput",
     [java]                       "@type":"SFFloat",
     [java]                       "@value":0.0
     [java]                     },
     [java]                     {
     [java]                       "@name":"ambientIntensity",
     [java]                       "@accessType":"inputOutput",
     [java]                       "@type":"SFFloat",
     [java]                       "@value":0.0
     [java]                     }
     [java]                   ]
     [java]               },
     [java]               "ProtoBody": {
     [java]                   "-children":[
     [java]                     { "Material":
     [java]                       {
     [java]                         "@DEF":"MaterialNode",
     [java]                         "IS": {
     [java]                             "connect": [
     [java]                               {
     [java]                                 "@nodeField":"diffuseColor",
     [java]                                 "@protoField":"diffuseColor"
     [java]                               },
     [java]                               {
     [java]                                 "@nodeField":"emissiveColor",
     [java]                                 "@protoField":"emissiveColor"
     [java]                               },
     [java]                               {
     [java]                                 "@nodeField":"specularColor",
     [java]                                 "@protoField":"specularColor"
     [java]                               },
     [java]                               {
     [java]                                 "@nodeField":"transparency",
     [java]                                 "@protoField":"transparency"
     [java]                               },
     [java]                               {
     [java]                                 "@nodeField":"shininess",
     [java]                                 "@protoField":"shininess"
     [java]                               },
     [java]                               {
     [java]                                 "@nodeField":"ambientIntensity",
     [java]                                 "@protoField":"ambientIntensity"
     [java]                               }
     [java]                             ]
     [java]                         }
     [java]                       }
     [java]                     },
     [java]                     {
     [java]                       "#comment":"Only first node (the node type) is renderable, others are along for the ride"
     [java]                     },
     [java]                     { "Script":
     [java]                       {
     [java]                         "@DEF":"MaterialModulatorScript",
     [java]                         "field": [
     [java]                           {
     [java]                             "@name":"enabled",
     [java]                             "@accessType":"inputOutput",
     [java]                             "@type":"SFBool"
     [java]                           },
     [java]                           {
     [java]                             "@name":"diffuseColor",
     [java]                             "@accessType":"inputOutput",
     [java]                             "@type":"SFColor"
     [java]                           },
     [java]                           {
     [java]                             "@name":"newColor",
     [java]                             "@accessType":"outputOnly",
     [java]                             "@type":"SFColor"
     [java]                           },
     [java]                           {
     [java]                             "@name":"clockTrigger",
     [java]                             "@accessType":"inputOnly",
     [java]                             "@type":"SFTime"
     [java]                           }
     [java]                         ],
     [java]                         "IS": {
     [java]                             "connect": [
     [java]                               {
     [java]                                 "@nodeField":"enabled",
     [java]                                 "@protoField":"enabled"
     [java]                               },
     [java]                               {
     [java]                                 "@nodeField":"diffuseColor",
     [java]                                 "@protoField":"diffuseColor"
     [java]                               }
     [java]                             ]
     [java]                         },
     [java]                         "#sourceText":[
     [java] "",
     [java] "",
     [java] "ecmascript:",
     [java] "function initialize ()",
     [java] "{",
     [java] "    newColor = diffuseColor; // start with correct color",
     [java] "}",
     [java] "function set_enabled (newValue)",
     [java] "{",
     [java] "\tenabled = newValue;",
     [java] "}",
     [java] "function clockTrigger (timeValue)",
     [java] "{",
     [java] "    if (!enabled) return;",
     [java] "    red   = newColor.r;",
     [java] "    green = newColor.g;",
     [java] "    blue  = newColor.b;",
     [java] "",
     [java] "    // note different modulation rates for each color component, % is modulus operator",
     [java] "    newColor = new SFColor ((red + 0.02) % 1, (green + 0.03) % 1, (blue + 0.04) % 1);",
     [java] "\tif (enabled)",
     [java] "\t{",
     [java] "\t\tBrowser.print ('diffuseColor=(' + red + ',' + green + ',' + blue + ') newColor=' + newColor.toString() + '\n');",
     [java] "\t}",
     [java] "}",
     [java] "",
     [java] ""
     [java] ]
     [java]                       }
     [java]                     }
     [java]                   ]
     [java]               }
     [java]             }
     [java]           },
     [java]           {
     [java]             "#comment":"Test success: declarative statement createDeclarativeShapeTests()"
     [java]           },
     [java]           { "Group":
     [java]             {
     [java]               "@DEF":"DeclarativeGroupExample",
     [java]               "-children":[
     [java]                 { "Shape":
     [java]                   {
     [java]                     "-metadata":
     [java]                       { "MetadataString":
     [java]                         {
     [java]                           "@name":"findThisNameValue",
     [java]                           "@DEF":"FindableMetadataStringTest",
     [java]                           "@value":["test case"]
     [java]                         }
     [java]                       },
     [java]                     "-appearance":
     [java]                       { "Appearance":
     [java]                         {
     [java]                           "@DEF":"DeclarativeAppearanceExample",
     [java]                           "-children":[
     [java]                             {
     [java]                               "#comment":"DeclarativeMaterialExample gets overridden by subsequently added MaterialModulator ProtoInstance"
     [java]                             }
     [java]                           ],
     [java]                           "-material":
     [java]                             { "ProtoInstance":
     [java]                               {
     [java]                                 "@name":"MaterialModulator",
     [java]                                 "@DEF":"MyMaterialModulator"
     [java]                               }
     [java]                             }
     [java]                         }
     [java]                       },
     [java]                     "-geometry":
     [java]                       { "Cone":
     [java]                         {
     [java]                           "@bottom":false,
     [java]                           "@bottomRadius":0.05,
     [java]                           "@height":0.1
     [java]                         }
     [java]                       }
     [java]                   }
     [java]                 },
     [java]                 {
     [java]                   "#comment":"Test success: declarativeGroup.addChild() singleton pipeline method"
     [java]                 }
     [java]               ]
     [java]             }
     [java]           },
     [java]           {
     [java]             "#comment":"Test success: declarative statement addChild()"
     [java]           },
     [java]           {
     [java]             "#comment":"Test success: x3dModel.findNodeByDEF(DeclarativeAppearanceExample) = <Appearance DEF='DeclarativeAppearanceExample'/> i.e. <Appearance DEF='DeclarativeAppearanceExample'> <!- - DeclarativeMaterialExample gets overridden by subsequently added MaterialModulator ProtoInstance - -> <ProtoInstance DEF='MyMaterialModulator' name='MaterialModulator' containerField='material'/> </Appearance>"
     [java]           },
     [java]           {
     [java]             "#comment":"Test success: x3dModel.findElementByNameValue(findThisNameValue) = <MetadataString DEF='FindableMetadataStringTest' name='findThisNameValue' value='\"test case\"'/>"
     [java]           },
     [java]           {
     [java]             "#comment":"Test success: x3dModel.findElementByNameValue(\"ArtDeco01Material\", \"ProtoDeclare\") found"
     [java]           },
     [java]           {
     [java]             "#comment":"Test success: x3dModel.findElementByNameValue(\"MaterialModulator\", \"ProtoDeclare\") found"
     [java]           },
     [java]           {
     [java]             "#comment":"Test success: x3dModel.findElementByNameValue(\"MaterialModulator\", \"ProtoInstance\") found"
     [java]           },
     [java]           { "Group":
     [java]             {
     [java]               "@DEF":"TestFieldObjectsGroup",
     [java]               "-children":[
     [java]                 {
     [java]                   "#comment":"testFieldObjects() results"
     [java]                 },
     [java]                 {
     [java]                   "#comment":"SFBool default=true, true=true, false=false, negate()=true"
     [java]                 },
     [java]                 {
     [java]                   "#comment":"MFBool default=, initial=true false true, negate()=false true false"
     [java]                 },
     [java]                 {
     [java]                   "#comment":"SFFloat default=0.0, initial=1.0, setValue(2)=2.0, setValue(3.0f)=3.0, setValue(4.0)=4.0"
     [java]                 },
     [java]                 {
     [java]                   "#comment":"MFFloat default=, initial=1 2 3, append(5)=1 2 3 5, inserts(3,4)(0,0)=0 1 2 3 4 5, append(6)=0 1 2 3 4 5 6, size()=7"
     [java]                 },
     [java]                 {
     [java]                   "#comment":"... get1Value[3]=3.0, remove[1]=0 2 3 4 5 6, set1Value(0,10)=10 2 3 4 5 6, multiply(2)=20 4 6 8 10 12, clear="
     [java]                 },
     [java]                 {
     [java]                   "#comment":"SFVec3f default=0 0 0, initial=1 2 3, setValue=4 5 6, multiply(2)=8 10 12, normalize()=0.45584232 0.5698029 0.68376344, regex matches()=true"
     [java]                 },
     [java]                 {
     [java]                   "#comment":"regex test SFVec3f().matches(\"1 2 3\")=true, regex test SFVec3f().matches(\"1 2 3 4\")=false, regex test (SFRotationObject.matches(\"0 0 0 0\")=true, failure detecting illegal (zero axis) rotation value"
     [java]                 }
     [java]               ]
     [java]             }
     [java]           },
     [java]           { "Sound":
     [java]             {
     [java]               "@location":[0,1.6,0],
     [java]               "-children":[
     [java]                 {
     [java]                   "#comment":"set sound-ellipsoid location height at 1.6m to match typical avatar height"
     [java]                 }
     [java]               ],
     [java]               "-source":
     [java]                 { "AudioClip":
     [java]                   {
     [java]                     "@description":"chimes",
     [java]                     "@url":["chimes.wav","https://www.web3d.org/x3d/content/examples/ConformanceNist/Sounds/AudioClip/chimes.wav"],
     [java]                     "-children":[
     [java]                       {
     [java]                         "#comment":"Scene example fragment from https://www.web3d.org/x3d/content/examples/ConformanceNist/Sounds/AudioClip/default.x3d"
     [java]                       }
     [java]                     ]
     [java]                   }
     [java]                 }
     [java]             }
     [java]           },
     [java]           { "Sound":
     [java]             {
     [java]               "@location":[0,1.6,0],
     [java]               "-children":[
     [java]                 {
     [java]                   "#comment":"set sound-ellipsoid location height at 1.6m to match typical avatar height"
     [java]                 }
     [java]               ],
     [java]               "-source":
     [java]                 { "MovieTexture":
     [java]                   {
     [java]                     "@description":"mpgsys.mpg from ConformanceNist suite",
     [java]                     "@url":["mpgsys.mpg","https://www.web3d.org/x3d/content/examples/ConformanceNist/Appearance/MovieTexture/mpgsys.mpg"],
     [java]                     "-children":[
     [java]                       {
     [java]                         "#comment":"Scene example fragment from https://www.web3d.org/x3d/content/examples/ConformanceNist/Appearance/MovieTexture/mpeg1-systems.x3d"
     [java]                       },
     [java]                       {
     [java]                         "#comment":"Expected containerField='source', allowed containerField values=\"texture\" \"source\" \"back\" \"bottom\" \"front\" \"left\" \"right\" \"top\" \"backTexture\" \"bottomTexture\" \"frontTexture\" \"leftTexture\" \"rightTexture\" \"topTexture\" \"watchList\""
     [java]                       }
     [java]                     ]
     [java]                   }
     [java]                 }
     [java]             }
     [java]           },
     [java]           {
     [java]             "#comment":"Test success: AnchorObject.isNode()=true, siteAnchor.isNode()=true"
     [java]           },
     [java]           {
     [java]             "#comment":"Test success: AnchorObject.isStatement()=false, siteAnchor.isStatement()=false"
     [java]           },
     [java]           {
     [java]             "#comment":"Test success: ROUTEObject.isNode()=false, orbitPositionROUTE.isNode()=false"
     [java]           },
     [java]           {
     [java]             "#comment":"Test success: ROUTEObject.isStatement()=true, orbitPositionROUTE.isStatement()=true"
     [java]           },
     [java]           {
     [java]             "#comment":"Test success: CommentsBlock.isNode()=false, testComments.isNode()=false"
     [java]           },
     [java]           {
     [java]             "#comment":"Test failure: CommentsBlock.isStatement()=true, testComments.isStatement()=true"
     [java]           },
     [java]           { "Shape":
     [java]             {
     [java]               "@DEF":"ExtrusionShape",
     [java]               "-children":[
     [java]                 {
     [java]                   "#comment":"ExampleExtrusion isCrossSectionClosed()=true, crossSection='[1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0]'"
     [java]                 },
     [java]                 {
     [java]                   "#comment":"ExampleExtrusion isSpineClosed()=false, spine='[0.0, 0.0, 0.0, 0.0, 1.0, 0.0]'"
     [java]                 }
     [java]               ],
     [java]               "-appearance":
     [java]                 { "Appearance":
     [java]                   {
     [java]                     "@DEF":"TransparentAppearance",
     [java]                     "-material":
     [java]                       { "Material":
     [java]                         {
     [java]                           "@transparency":1.0
     [java]                         }
     [java]                       }
     [java]                   }
     [java]                 },
     [java]               "-geometry":
     [java]                 { "Extrusion":
     [java]                   {
     [java]                     "@DEF":"ExampleExtrusion"
     [java]                   }
     [java]                 }
     [java]             }
     [java]           },
     [java]           { "Group":
     [java]             {
     [java]               "-children":[
     [java]                 {
     [java]                   "#comment":"Test MFNode children array as an ordered list consisting of comments, statements, ProtoInstance and nodes"
     [java]                 },
     [java]                 { "ProtoDeclare":
     [java]                   {
     [java]                     "@name":"NewWorldInfo",
     [java]                     "ProtoInterface": {
     [java]                         "field": [
     [java]                           {
     [java]                             "@name":"description",
     [java]                             "@accessType":"initializeOnly",
     [java]                             "@type":"SFString"
     [java]                           }
     [java]                         ]
     [java]                     },
     [java]                     "ProtoBody": {
     [java]                         "-children":[
     [java]                           { "WorldInfo":
     [java]                             {
     [java]                             }
     [java]                           }
     [java]                         ]
     [java]                     }
     [java]                   }
     [java]                 },
     [java]                 { "ProtoInstance":
     [java]                   {
     [java]                     "@name":"NewWorldInfo",
     [java]                     "@DEF":"Proto1",
     [java]                     "fieldValue": [
     [java]                       {
     [java]                         "@name":"description",
     [java]                         "@value":"testing 1 2 3"
     [java]                       }
     [java]                     ]
     [java]                   }
     [java]                 },
     [java]                 { "Group":
     [java]                   {
     [java]                     "@DEF":"Node2",
     [java]                     "-children":[
     [java]                       {
     [java]                         "#comment":"intentionally empty"
     [java]                       }
     [java]                     ]
     [java]                   }
     [java]                 },
     [java]                 { "ProtoInstance":
     [java]                   {
     [java]                     "@name":"NewWorldInfo",
     [java]                     "@DEF":"Proto3"
     [java]                   }
     [java]                 },
     [java]                 { "Transform":
     [java]                   {
     [java]                     "@DEF":"Node4",
     [java]                     "-children":[
     [java]                       {
     [java]                         "#comment":"intentionally empty"
     [java]                       }
     [java]                     ]
     [java]                   }
     [java]                 },
     [java]                 {
     [java]                   "#comment":"Test satisfactorily creates MFNode children array as an ordered list with mixed content"
     [java]                 }
     [java]               ]
     [java]             }
     [java]           },
     [java]           { "ProtoDeclare":
     [java]             {
     [java]               "@name":"ShaderProto",
     [java]               "ProtoBody": {
     [java]                   "-children":[
     [java]                     { "ProgramShader":
     [java]                       {
     [java]                       }
     [java]                     }
     [java]                   ]
     [java]               }
     [java]             }
     [java]           },
     [java]           { "Shape":
     [java]             {
     [java]               "-appearance":
     [java]                 { "Appearance":
     [java]                   {
     [java]                     "-children":[
     [java]                       {
     [java]                         "#comment":"Test MFNode shaders array as an ordered list consisting of comments, ProtoInstance and nodes"
     [java]                       },
     [java]                       {
     [java]                         "#comment":"Test satisfactorily creates MFNode shaders array as an ordered list with mixed content"
     [java]                       }
     [java]                     ],
     [java]                     "-shaders":[
     [java]                       { "ProgramShader":
     [java]                         {
     [java]                           "@DEF":"TestShader1",
     [java]                           "-programs":[
     [java]                             { "ShaderProgram":
     [java]                               {
     [java]                                 "@DEF":"TestShader2",
     [java]                                 "@type":"VERTEX"
     [java]                               }
     [java]                             }
     [java]                           ]
     [java]                         }
     [java]                       },
     [java]                       { "ProtoInstance":
     [java]                         {
     [java]                           "@name":"ShaderProto",
     [java]                           "@DEF":"TestShader3"
     [java]                         }
     [java]                       },
     [java]                       { "ComposedShader":
     [java]                         {
     [java]                           "@DEF":"TestShader4",
     [java]                           "-parts":[
     [java]                             { "ShaderPart":
     [java]                               {
     [java]                                 "@DEF":"TestShader5",
     [java]                                 "@type":"VERTEX"
     [java]                               }
     [java]                             }
     [java]                           ]
     [java]                         }
     [java]                       }
     [java]                     ]
     [java]                   }
     [java]                 }
     [java]             }
     [java]           },
     [java]           { "Transform":
     [java]             {
     [java]               "@DEF":"SpecialtyNodes",
     [java]               "-children":[
     [java]                 { "CADLayer":
     [java]                   {
     [java]                     "-children":[
     [java]                       { "CADAssembly":
     [java]                         {
     [java]                           "-children":[
     [java]                             { "CADPart":
     [java]                               {
     [java]                                 "-children":[
     [java]                                   { "CADFace":
     [java]                                     {
     [java]                                     }
     [java]                                   }
     [java]                                 ]
     [java]                               }
     [java]                             }
     [java]                           ]
     [java]                         }
     [java]                       }
     [java]                     ]
     [java]                   }
     [java]                 },
     [java]                 { "EspduTransform":
     [java]                   {
     [java]                   }
     [java]                 },
     [java]                 { "ReceiverPdu":
     [java]                   {
     [java]                   }
     [java]                 },
     [java]                 { "SignalPdu":
     [java]                   {
     [java]                   }
     [java]                 },
     [java]                 { "TransmitterPdu":
     [java]                   {
     [java]                   }
     [java]                 },
     [java]                 { "DISEntityManager":
     [java]                   {
     [java]                     "-mapping":[
     [java]                       { "DISEntityTypeMapping":
     [java]                         {
     [java]                         }
     [java]                       }
     [java]                     ]
     [java]                   }
     [java]                 }
     [java]               ]
     [java]             }
     [java]           }
     [java]         ]
     [java]     }
     [java]   }
     [java] }
     [java] 
     [java] ===========================================
     [java] Create Python source of model using stylesheet X3dToPython.xslt
     [java] Warning: toFileStylesheetConversion(X3dToPython.xslt) is overwriting prior file HelloWorldProgramOutput.py
     [java] helloWorldObject.toFilePython("HelloWorldProgramOutput.py") success: true
     [java] C:\x3d-code\www.web3d.org\x3d\stylesheets\java\classes\HelloWorldProgramOutput.py
     [java] Test toStringPython()
     [java] 
     [java] ###############################################
     [java] #
     [java] # Now available: developmental python x3d.py package on PyPi for import.
     [java] #   This approach greatly simplifies Python X3D deployment and use.
     [java] #   https://pypi.org/project/x3d
     [java] #
     [java] # Installation:
     [java] #       pip install x3d
     [java] # or
     [java] #       python -m pip install x3d
     [java] #
     [java] # Developer options for loading x3d package:
     [java] #
     [java] #    from x3d import *  # preferred approach, terser source that avoids x3d.* class
     [java] prefixes
     [java] #
     [java] # or
     [java] #    import x3d         # traditional way to subclass x3d package, all classes require
     [java] x3d.* prefix
     [java] #                       # but python source is very verbose, for example x3d.Material
     [java] x3d.Shape etc.
     [java] #                       # X3dToPython.xslt stylesheet insertPackagePrefix=true supports
     [java] this option.
     [java] 
     [java] from x3d import *
     [java] 
     [java] ###############################################
     [java] 
     [java] newModel=X3D(profile='Immersive',version='3.3',
     [java]   #  x3dVersionComparisonTest for this model: supportsX3dVersion(X3DObject.VERSION_3_0)=true
     [java] 
     [java] head=head(
     [java]   children=[
     [java]     #  comment #1 
     [java]     #  comment #2 
     [java]     #  comment #3 
     [java]     #  comment #4 
     [java] component(name='Navigation',level=3),
     [java] component(name='Shaders',level=1),
     [java] component(name='CADGeometry',level=2),
     [java] component(name='DIS',level=2),
     [java] component(name='H-Anim',level=1),
     [java] component(name='Grouping',level=1),
     [java] component(name='Layering',level=1),
     [java] unit(name='AngleUnitConversion',category='angle',conversionFactor=1.0),
     [java] unit(name='LengthUnitConversion',category='length',conversionFactor=1.0),
     [java] unit(name='ForceFromPoundsToNewtons',category='force',conversionFactor=4.4482),
     [java] meta(content='HelloWorldProgramOutput.x3d',name='title'),
     [java] meta(content='continued development and testing in progress',name='info'),
     [java] meta(content='Example HelloWorldProgram creates an X3D model using the X3D Java Scene Access
     [java] Interface Library (X3DJSAIL)',name='description'),
     [java] meta(content='https://www.web3d.org/specifications/java/X3DJSAIL.html',name='reference'),
     [java] meta(content='HelloWorldProgramOutput.java',name='generator'),
     [java] meta(content='6 September 2016',name='created'),
     [java] meta(content='13 January 2020',name='modified'),
     [java] meta(content='X3D Java Scene Access Interface Library (X3DJSAIL)',name='generator'),
     [java] meta(content='https://www.web3d.org/specifications/java/examples/HelloWorldProgram.java',name='generator'),
     [java] meta(content='Netbeans http://www.netbeans.org',name='generator'),
     [java] meta(content='Don Brutzman',name='creator'),
     [java] meta(content='https://sourceforge.net/p/x3d/code/HEAD/tree/www.web3d.org/x3d/stylesheets/java/examples/HelloWorldProgramOutput.x3d',name='reference'),
     [java] meta(content='Console output, ClassicVRML encoding, VRML97 encoding and pretty-print documentation:',name='reference'),
     [java] meta(content='HelloWorldProgramOutput.txt',name='reference'),
     [java] meta(content='HelloWorldProgramOutput.x3dv',name='reference'),
     [java] meta(content='HelloWorldProgramOutput.wrl',name='reference'),
     [java] meta(content='HelloWorldProgramOutput.html',name='reference'),
     [java] meta(content='https://savage.nps.edu/X3dValidator?url=https://www.web3d.org/specifications/java/examples/HelloWorldProgramOutput.x3d',name='reference'),
     [java] meta(content='https://www.web3d.org/specifications/java/examples/HelloWorldProgramOutput.x3d',name='identifier'),
     [java] meta(content='../license.html',name='license')]),
     [java] Scene=Scene(
     [java] children=[
     [java] ViewpointGroup(description='Available viewpoints',
     [java] children=[
     [java] Viewpoint(DEF='DefaultView',description='Hello X3DJSAIL'),
     [java] Viewpoint(DEF='TopDownView',description='top-down view from above',orientation=(1,0,0,-1.570796),position=(0,100,0))]),
     [java] NavigationInfo(type=["EXAMINE","FLY","ANY"]),
     [java] WorldInfo(DEF='WorldInfoDEF',title='HelloWorldProgram produced by X3D Java SAI Library (X3DJSAIL)'),
     [java] WorldInfo(USE='WorldInfoDEF'),
     [java] WorldInfo(USE='WorldInfoDEF'),
     [java] MetadataString(DEF='scene.addChildMetadata',name='test',value=["Top-level root Metadata node beneath
     [java] Scene needs to be one of \'-children\' in JSON encoding"]),
     [java] LayerSet(DEF='scene.addChildLayerSetTest'),
     [java] Transform(DEF='LogoGeometryTransform',translation=(0,1.5,0),
     [java] children=[
     [java] Anchor(description='select for X3D Java SAI Library (X3DJSAIL) description',url=["../X3DJSAIL.html","https://www.web3d.org/specifications/java/X3DJSAIL.html"],
     [java] children=[
     [java] Shape(DEF='BoxShape',
     [java] appearance=Appearance(
     [java] material=Material(DEF='GreenMaterial',diffuseColor=(0,1,1),emissiveColor=(0.8,0,0),transparency=0.1),
     [java] texture=ImageTexture(url=["images/X3dJavaSceneAccessInterfaceSaiLibrary.png","https://www.web3d.org/specifications/java/examples/images/X3dJavaSceneAccessInterfaceSaiLibrary.png"])),
     [java] geometry=Box(DEF='test-NMTOKEN_regex.0123456789',class_='untextured'))])]),
     [java] Shape(DEF='LineShape',
     [java] appearance=Appearance(
     [java] material=Material(emissiveColor=(0.6,0.19607843,0.8))),
     [java] geometry=IndexedLineSet(coordIndex=[0,1,2,3,4,0],
     [java]         #  Coordinate 3-tuple point count: 6 
     [java] coord=Coordinate(point=[(0,1.5,0),(2,1.5,0),(2,1.5,-2),(-2,1.5,-2),(-2,1.5,0),(0,1.5,0)]))),
     [java] PositionInterpolator(DEF='BoxPathAnimator',key=[0,0.125,0.375,0.625,0.875,1],keyValue=[(0,1.5,0),(2,1.5,0),(2,1.5,-2),(-2,1.5,-2),(-2,1.5,0),(0,1.5,0)]),
     [java] TimeSensor(DEF='OrbitClock',cycleInterval=8.0,loop=True),
     [java] ROUTE(fromField='fraction_changed',fromNode='OrbitClock',toField='set_fraction',toNode='BoxPathAnimator'),
     [java] ROUTE(fromField='value_changed',fromNode='BoxPathAnimator',toField='set_translation',toNode='LogoGeometryTransform'),
     [java] Transform(DEF='TextTransform',translation=(0,-1.5,0),
     [java] children=[
     [java] Shape(
     [java] appearance=Appearance(
     [java] material=Material(USE='GreenMaterial')),
     [java] geometry=Text(string=["X3D Java","SAI Library","X3DJSAIL"],
     [java]           #  Comment example A, plain quotation marks: He said, "Immel did it!" 
     [java]           #  Comment example B, XML character entities: He said, &amp;quot;Immel did it!&amp;quot; 
     [java] metadata=MetadataSet(name='EscapedQuotationMarksMetadataSet',
     [java] value=[
     [java] MetadataString(name='quotesTestC',value=["MFString example C, backslash-escaped quotes: He said,
     [java] \"Immel did it!\""]),
     [java] MetadataString(name='extraChildTest',value=["checks MetadataSetObject addValue() method"])]),
     [java] fontStyle=FontStyle(justify=["MIDDLE","MIDDLE"]))),
     [java] Collision(
     [java]         #  test containerField='proxy' 
     [java] proxy=Shape(DEF='ProxyShape',
     [java]           #  alternative XML encoding: Text string='"One, Two, Comment" "" "He said, \&amp;quot;Immel
     [java] did it!\&amp;quot;"' 
     [java]           #  alternative XML encoding: Text string='"One, Two, Comment" "" "He said, \&amp;quot;Immel
     [java] did it!\&amp;quot;" ""' 
     [java]           #  alternative Java source: .setString(new String [] {"One, Two, Comment", "", "He said,
     [java] \"Immel did it!\""}) 
     [java]           #  reference: https://www.web3d.org/x3d/content/examples/Basic/X3dSpecifications/StringArrayEncodingExamplesIndex.html
     [java] 
     [java] geometry=Text(string=["One, Two, Text","","He said, \"Immel did it!\" \"\""])))]
     [java]       #  It's a beautiful world 
     [java]       #  ... for you! 
     [java]       #  https://en.wikipedia.org/wiki/Beautiful_World_(Devo_song) 
     [java] ),
     [java]     #  repeatedly spin 180 degrees as a readable special effect 
     [java] OrientationInterpolator(DEF='SpinInterpolator',key=[0,0.5,1],keyValue=[(0,1,0,4.712389),(0,1,0,0),(0,1,0,1.5707964)]),
     [java] TimeSensor(DEF='SpinClock',cycleInterval=5.0,loop=True),
     [java] ROUTE(fromField='fraction_changed',fromNode='SpinClock',toField='set_fraction',toNode='SpinInterpolator'),
     [java] ROUTE(fromField='value_changed',fromNode='SpinInterpolator',toField='rotation',toNode='TextTransform'),
     [java] Group(DEF='BackgroundGroup',
     [java] children=[
     [java] Background(DEF='GradualBackground'),
     [java] Script(DEF='colorTypeConversionScript',
     [java] field=[
     [java] field(name='colorInput',accessType='inputOnly',type='SFColor'),
     [java] field(name='colorsOutput',accessType='outputOnly',type='MFColor')]),
     [java] ColorInterpolator(DEF='ColorAnimator',key=[0,0.5,1],keyValue=[(0.9411765,1,1),(0.29411766,0,0.50980395),(0.9411765,1,1)],
     [java]         #  AZURE to INDIGO and back again 
     [java] ),
     [java] TimeSensor(DEF='ColorClock',cycleInterval=60.0,loop=True),
     [java] ROUTE(fromField='colorsOutput',fromNode='colorTypeConversionScript',toField='skyColor',toNode='GradualBackground'),
     [java] ROUTE(fromField='value_changed',fromNode='ColorAnimator',toField='colorInput',toNode='colorTypeConversionScript'),
     [java] ROUTE(fromField='fraction_changed',fromNode='ColorClock',toField='set_fraction',toNode='ColorAnimator')]),
     [java] ProtoDeclare(name='ArtDeco01Material',appinfo='tooltip: ArtDeco01Material prototype is a Material
     [java] node',
     [java] ProtoInterface=ProtoInterface(
     [java] field=[
     [java] field(name='description',accessType='inputOutput',appinfo='tooltip for descriptionField',type='SFString',value='ArtDeco01Material
     [java] prototype is a Material node'),
     [java] field(name='enabled',accessType='inputOutput',type='SFBool',value=True)]),
     [java] ProtoBody=ProtoBody(
     [java]         #  Initial node of ProtoBody determines prototype node type 
     [java] children=[
     [java] Material(ambientIntensity=0.25,diffuseColor=(0.282435,0.085159,0.134462),shininess=0.127273,specularColor=(0.276305,0.11431,0.139857)),
     [java]         #  [HelloWorldProgram diagnostic] should be connected to scene graph: artDeco01ProtoDeclare.getNodeType()="Material"
     [java] 
     [java]         #  presence of follow-on TouchSensor shows that additional nodes are allowed in ProtoBody
     [java] after initial node, regardless of node types 
     [java] TouchSensor(description='within ProtoBody',
     [java] IS=IS(
     [java] connect=[
     [java] connect(nodeField='description',protoField='description'),
     [java] connect(nodeField='enabled',protoField='enabled')]))])),
     [java] ExternProtoDeclare(name='ArtDeco02Material',appinfo='this is a different Material node',url=["http://X3dGraphics.com/examples/X3dForWebAuthors/Chapter14Prototypes/ArtDecoPrototypesExcerpt.x3d#ArtDeco02Material","http://X3dGraphics.com/examples/X3dForWebAuthors/Chapter14Prototypes/ArtDecoPrototypesExcerpt.x3dv#ArtDeco02Material"],
     [java]       #  [HelloWorldProgram diagnostic] artDeco02ExternProtoDeclare.getNodeType()="ERROR_UNKNOWN_EXTERNPROTODECLARE_NODE_TYPE:
     [java] ExternProtoDeclare name='ArtDeco02Material' type cannot be remotely accessed at run
     [java] time. TODO X3DJSAIL needs to add further capability that retrieves the ExternProtoDeclare
     [java] file." 
     [java] field=[
     [java] field(name='description',accessType='inputOutput',appinfo='tooltip for descriptionField',type='SFString')]),
     [java]     #  Tested ArtDeco01ProtoInstance, ArtDeco02ProtoInstance for improper node type when
     [java] ProtoInstance is added in wrong place 
     [java] Shape(DEF='TestShape1',
     [java] appearance=Appearance(DEF='TestAppearance1',
     [java]         #  ArtDeco01Material prototype goes here... TODO ensure setContainerField is handled
     [java] in exported Java 
     [java] material=ProtoInstance(name='ArtDeco01Material',
     [java]           #  [HelloWorldProgram diagnostic] ArtDeco01ProtoInstance.getNodeType()="Material" 
     [java] fieldValue=[
     [java] fieldValue(name='description',value='ArtDeco01Material can substitute for a Material node')])),
     [java] geometry=Sphere(radius=0.001)),
     [java] Shape(DEF='TestShape2',
     [java] appearance=Appearance(DEF='TestAppearance2',
     [java]         #  ArtDeco02Material prototype goes here... TODO ensure setContainerField is handled
     [java] in exported Java 
     [java] material=ProtoInstance(DEF='ArtDeco02MaterialDEF',name='ArtDeco02Material',
     [java]           #  [HelloWorldProgram diagnostic] ArtDeco02ProtoInstance.getNodeType()="ERROR_UNKNOWN_EXTERNPROTODECLARE_NODE_TYPE:
     [java] ExternProtoDeclare name='ArtDeco02Material' type cannot be remotely accessed at run
     [java] time. TODO X3DJSAIL needs to add further capability that retrieves the ExternProtoDeclare
     [java] file." 
     [java] fieldValue=[
     [java] fieldValue(name='description',value='ArtDeco02Material can substitute for another Material node')])),
     [java] geometry=Cone(bottomRadius=0.001,height=0.001)),
     [java] Shape(DEF='TestShape3',
     [java] appearance=Appearance(DEF='TestAppearance3',
     [java]         #  ArtDeco02Material ProtoInstance USE goes here. Note that name field is NOT defined
     [java] as part of ProtoInstance USE. 
     [java] material=ProtoInstance(USE='ArtDeco02MaterialDEF')),
     [java] geometry=Cylinder(height=0.001,radius=0.001)),
     [java] Inline(DEF='inlineSceneDef',url=["someOtherScene.x3d","https://www.web3d.org/specifications/java/examples/someOtherScene.x3d"]),
     [java] IMPORT(AS='WorldInfoDEF2',importedDEF='WorldInfoDEF',inlineDEF='inlineSceneDef'),
     [java] EXPORT(AS='WorldInfoDEF3',localDEF='WorldInfoDEF'),
     [java] ProtoDeclare(name='MaterialModulator',appinfo='mimic a Material node and modulate fields as an
     [java] animation effect',documentation='http://x3dgraphics.com/examples/X3dForWebAuthors/Chapter14Prototypes/MaterialModulatorIndex.html',
     [java] ProtoInterface=ProtoInterface(
     [java] field=[
     [java] field(name='enabled',accessType='inputOutput',type='SFBool',value=True),
     [java] field(name='diffuseColor',accessType='inputOutput',type='SFColor',value=(0,0,0)),
     [java] field(name='emissiveColor',accessType='inputOutput',type='SFColor',value=(0.05,0.05,0.5)),
     [java] field(name='specularColor',accessType='inputOutput',type='SFColor',value=(0,0,0)),
     [java] field(name='transparency',accessType='inputOutput',type='SFFloat',value=0.0),
     [java] field(name='shininess',accessType='inputOutput',type='SFFloat',value=0.0),
     [java] field(name='ambientIntensity',accessType='inputOutput',type='SFFloat',value=0.0)]),
     [java] ProtoBody=ProtoBody(
     [java] children=[
     [java] Material(DEF='MaterialNode',
     [java] IS=IS(
     [java] connect=[
     [java] connect(nodeField='diffuseColor',protoField='diffuseColor'),
     [java] connect(nodeField='emissiveColor',protoField='emissiveColor'),
     [java] connect(nodeField='specularColor',protoField='specularColor'),
     [java] connect(nodeField='transparency',protoField='transparency'),
     [java] connect(nodeField='shininess',protoField='shininess'),
     [java] connect(nodeField='ambientIntensity',protoField='ambientIntensity')])),
     [java]         #  Only first node (the node type) is renderable, others are along for the ride 
     [java] Script(DEF='MaterialModulatorScript',
     [java] field=[
     [java] field(name='enabled',accessType='inputOutput',type='SFBool'),
     [java] field(name='diffuseColor',accessType='inputOutput',type='SFColor'),
     [java] field(name='newColor',accessType='outputOnly',type='SFColor'),
     [java] field(name='clockTrigger',accessType='inputOnly',type='SFTime')],
     [java] IS=IS(
     [java] connect=[
     [java] connect(nodeField='enabled',protoField='enabled'),
     [java] connect(nodeField='diffuseColor',protoField='diffuseColor')]))])),
     [java]     #  Test success: declarative statement createDeclarativeShapeTests() 
     [java] Group(DEF='DeclarativeGroupExample',
     [java] children=[
     [java] Shape(
     [java] metadata=MetadataString(DEF='FindableMetadataStringTest',name='findThisNameValue',value=["test case"]),
     [java] appearance=Appearance(DEF='DeclarativeAppearanceExample',
     [java]           #  DeclarativeMaterialExample gets overridden by subsequently added MaterialModulator
     [java] ProtoInstance 
     [java] material=ProtoInstance(DEF='MyMaterialModulator',name='MaterialModulator')),
     [java] geometry=Cone(bottom=False,bottomRadius=0.05,height=0.1))]
     [java]       #  Test success: declarativeGroup.addChild() singleton pipeline method 
     [java] ),
     [java]     #  Test success: declarative statement addChild() 
     [java]     #  Test success: x3dModel.findNodeByDEF(DeclarativeAppearanceExample) = &lt;Appearance
     [java] DEF='DeclarativeAppearanceExample'/&gt; i.e. &lt;Appearance DEF='DeclarativeAppearanceExample'&gt;
     [java] &lt;!- - DeclarativeMaterialExample gets overridden by subsequently added MaterialModulator
     [java] ProtoInstance - -&gt; &lt;ProtoInstance DEF='MyMaterialModulator' name='MaterialModulator'
     [java] containerField='material'/&gt; &lt;/Appearance&gt; 
     [java]     #  Test success: x3dModel.findElementByNameValue(findThisNameValue) = &lt;MetadataString
     [java] DEF='FindableMetadataStringTest' name='findThisNameValue' value='"test case"'/&gt; 
     [java]     #  Test success: x3dModel.findElementByNameValue("ArtDeco01Material", "ProtoDeclare")
     [java] found 
     [java]     #  Test success: x3dModel.findElementByNameValue("MaterialModulator", "ProtoDeclare")
     [java] found 
     [java]     #  Test success: x3dModel.findElementByNameValue("MaterialModulator", "ProtoInstance")
     [java] found 
     [java] Group(DEF='TestFieldObjectsGroup',
     [java]       #  testFieldObjects() results 
     [java]       #  SFBool default=true, true=true, false=false, negate()=true 
     [java]       #  MFBool default=, initial=true false true, negate()=false true false 
     [java]       #  SFFloat default=0.0, initial=1.0, setValue(2)=2.0, setValue(3.0f)=3.0, setValue(4.0)=4.0
     [java] 
     [java]       #  MFFloat default=, initial=1 2 3, append(5)=1 2 3 5, inserts(3,4)(0,0)=0 1 2 3 4 5,
     [java] append(6)=0 1 2 3 4 5 6, size()=7 
     [java]       #  ... get1Value[3]=3.0, remove[1]=0 2 3 4 5 6, set1Value(0,10)=10 2 3 4 5 6, multiply(2)=20
     [java] 4 6 8 10 12, clear= 
     [java]       #  SFVec3f default=0 0 0, initial=1 2 3, setValue=4 5 6, multiply(2)=8 10 12, normalize()=0.45584232
     [java] 0.5698029 0.68376344, regex matches()=true 
     [java]       #  regex test SFVec3f().matches("1 2 3")=true, regex test SFVec3f().matches("1 2 3 4")=false,
     [java] regex test (SFRotationObject.matches("0 0 0 0")=true, failure detecting illegal (zero
     [java] axis) rotation value 
     [java] ),
     [java] Sound(location=(0,1.6,0),
     [java]       #  set sound-ellipsoid location height at 1.6m to match typical avatar height 
     [java] source=AudioClip(description='chimes',url=["chimes.wav","https://www.web3d.org/x3d/content/examples/ConformanceNist/Sounds/AudioClip/chimes.wav"],
     [java]         #  Scene example fragment from https://www.web3d.org/x3d/content/examples/ConformanceNist/Sounds/AudioClip/default.x3d
     [java] 
     [java] )),
     [java] Sound(location=(0,1.6,0),
     [java]       #  set sound-ellipsoid location height at 1.6m to match typical avatar height 
     [java] source=MovieTexture(description='mpgsys.mpg from ConformanceNist suite',url=["mpgsys.mpg","https://www.web3d.org/x3d/content/examples/ConformanceNist/Appearance/MovieTexture/mpgsys.mpg"],
     [java]         #  Scene example fragment from https://www.web3d.org/x3d/content/examples/ConformanceNist/Appearance/MovieTexture/mpeg1-systems.x3d
     [java] 
     [java]         #  Expected containerField='source', allowed containerField values="texture" "source"
     [java] "back" "bottom" "front" "left" "right" "top" "backTexture" "bottomTexture" "frontTexture"
     [java] "leftTexture" "rightTexture" "topTexture" "watchList" 
     [java] )),
     [java]     #  Test success: AnchorObject.isNode()=true, siteAnchor.isNode()=true 
     [java]     #  Test success: AnchorObject.isStatement()=false, siteAnchor.isStatement()=false 
     [java]     #  Test success: ROUTEObject.isNode()=false, orbitPositionROUTE.isNode()=false 
     [java]     #  Test success: ROUTEObject.isStatement()=true, orbitPositionROUTE.isStatement()=true
     [java] 
     [java]     #  Test success: CommentsBlock.isNode()=false, testComments.isNode()=false 
     [java]     #  Test failure: CommentsBlock.isStatement()=true, testComments.isStatement()=true 
     [java] Shape(DEF='ExtrusionShape',
     [java]       #  ExampleExtrusion isCrossSectionClosed()=true, crossSection='[1.0, 1.0, 1.0, -1.0,
     [java] -1.0, -1.0, -1.0, 1.0, 1.0, 1.0]' 
     [java]       #  ExampleExtrusion isSpineClosed()=false, spine='[0.0, 0.0, 0.0, 0.0, 1.0, 0.0]' 
     [java] appearance=Appearance(DEF='TransparentAppearance',
     [java] material=Material(transparency=1.0)),
     [java] geometry=Extrusion(DEF='ExampleExtrusion')),
     [java] Group(
     [java]       #  Test MFNode children array as an ordered list consisting of comments, statements,
     [java] ProtoInstance and nodes 
     [java] children=[
     [java] ProtoDeclare(name='NewWorldInfo',
     [java] ProtoInterface=ProtoInterface(
     [java] field=[
     [java] field(name='description',accessType='initializeOnly',type='SFString')]),
     [java] ProtoBody=ProtoBody(
     [java] children=[
     [java] WorldInfo(),])),
     [java] ProtoInstance(DEF='Proto1',name='NewWorldInfo',
     [java] fieldValue=[
     [java] fieldValue(name='description',value='testing 1 2 3')]),
     [java] Group(DEF='Node2',
     [java]         #  intentionally empty 
     [java] ),
     [java] ProtoInstance(DEF='Proto3',name='NewWorldInfo'),
     [java] Transform(DEF='Node4',
     [java]         #  intentionally empty 
     [java] )]
     [java]       #  Test satisfactorily creates MFNode children array as an ordered list with mixed content
     [java] 
     [java] ),
     [java] ProtoDeclare(name='ShaderProto',
     [java] ProtoBody=ProtoBody(
     [java] children=[
     [java] ProgramShader(),])),
     [java] Shape(
     [java] appearance=Appearance(
     [java]         #  Test MFNode shaders array as an ordered list consisting of comments, ProtoInstance
     [java] and nodes 
     [java]         #  Test satisfactorily creates MFNode shaders array as an ordered list with mixed content
     [java] 
     [java] shaders=ProgramShader(DEF='TestShader1',
     [java] programs=ShaderProgram(DEF='TestShader2')),
     [java] ProtoInstance(DEF='TestShader3',name='ShaderProto'),
     [java] ComposedShader(DEF='TestShader4',
     [java] parts=ShaderPart(DEF='TestShader5')))),
     [java] Transform(DEF='SpecialtyNodes',
     [java] children=[
     [java] CADLayer(
     [java] children=[
     [java] CADAssembly(
     [java] children=[
     [java] CADPart(
     [java] children=[
     [java] CADFace(),])])]),
     [java] EspduTransform(),
     [java] ReceiverPdu(receivedPower=0.0),
     [java] SignalPdu(),
     [java] TransmitterPdu(relativeAntennaLocation=(0,0,0),transmitFrequencyBandwidth=0.0),
     [java] DISEntityManager(
     [java] mapping=[
     [java] DISEntityTypeMapping(),])])])
     [java] ) # X3D model complete
     [java] 
     [java] ###############################################
     [java] # Self-test diagnostics
     [java] ###############################################
     [java] 
     [java] if         metaDiagnostics(newModel): # built-in utility method in X3D class
     [java] print (metaDiagnostics(newModel))
     [java] print ("python x3d.py load successful for HelloWorldProgramOutput.py")
     [java] 
     [java] ===========================================
     [java] Create displayable scene page rendered with X3DOM using stylesheet X3dToX3dom.xslt
     [java] Warning: toFileStylesheetConversion(X3dToX3dom.xslt) is overwriting prior file HelloWorldProgramOutputX3dom.xhtml
     [java] helloWorldObject.toFileX3DOM("HelloWorldProgramOutputX3dom.xhtml") success: true
     [java] C:\x3d-code\www.web3d.org\x3d\stylesheets\java\classes\HelloWorldProgramOutputX3dom.xhtml
     [java] ===========================================
     [java] Create displayable scene page rendered with X_ITE (formerly Cobweb) using stylesheet X3dToX3dom.xslt
     [java] Warning: toFileStylesheetConversion(X3dToX3dom.xslt) is overwriting prior file HelloWorldProgramOutputX_ITE.html
     [java] helloWorldObject.toFileX3DOM("HelloWorldProgramOutputX_ITE.html") success: true
     [java] C:\x3d-code\www.web3d.org\x3d\stylesheets\java\classes\HelloWorldProgramOutputX_ITE.html
     [java] ===========================================
     [java] Reload and provide text output using Java DOM, which includes default attribute values
     [java] [X3DLoaderDOM] <meta name='info' content='continued development and testing in progress'/>
     [java] ===========================================
     [java] Test success: x3dLoader.loadX3DfromXML(HelloWorldProgramOutput.x3d), x3dLoader.getX3dObjectTree()
     [java] ===========================================
     [java] <?xml version="1.0" encoding="UTF-8"?>
     [java] <!DOCTYPE X3D PUBLIC "ISO//Web3D//DTD X3D 3.3//EN" "http://www.web3d.org/specifications/x3d-3.3.dtd">
     [java] <X3D profile='Immersive' version='3.3' xmlns:ds='http://www.w3.org/2000/09/xmldsig#' xmlns:xenc='http://www.w3.org/2001/04/xmlenc#' xmlns:xsd='http://www.w3.org/2001/XMLSchema-instance' xsd:noNamespaceSchemaLocation='http://www.web3d.org/specifications/x3d-3.3.xsd'>
     [java]   <!-- x3dVersionComparisonTest for this model: supportsX3dVersion(X3DObject.VERSION_3_0)=true -->
     [java]   <head>
     [java]     <!-- comment #1 -->
     [java]     <!-- comment #2 -->
     [java]     <!-- comment #3 -->
     [java]     <!-- comment #4 -->
     [java]     <component level='3' name='Navigation'/>
     [java]     <component level='1' name='Shaders'/>
     [java]     <component level='2' name='CADGeometry'/>
     [java]     <component level='2' name='DIS'/>
     [java]     <component level='1' name='H-Anim'/>
     [java]     <component level='1' name='Grouping'/>
     [java]     <component level='1' name='Layering'/>
     [java]     <unit category='angle' conversionFactor='1.0' name='AngleUnitConversion'/>
     [java]     <unit category='length' conversionFactor='1.0' name='LengthUnitConversion'/>
     [java]     <unit category='force' conversionFactor='4.4482' name='ForceFromPoundsToNewtons'/>
     [java]     <meta content='HelloWorldProgramOutput.x3d' name='title'/>
     [java]     <meta content='continued development and testing in progress' name='info'/>
     [java]     <meta content='Example HelloWorldProgram creates an X3D model using the X3D Java Scene Access Interface Library (X3DJSAIL)' name='description'/>
     [java]     <meta content='https://www.web3d.org/specifications/java/X3DJSAIL.html' name='reference'/>
     [java]     <meta content='HelloWorldProgramOutput.java' name='generator'/>
     [java]     <meta content='6 September 2016' name='created'/>
     [java]     <meta content='13 January 2020' name='modified'/>
     [java]     <meta content='X3D Java Scene Access Interface Library (X3DJSAIL)' name='generator'/>
     [java]     <meta content='https://www.web3d.org/specifications/java/examples/HelloWorldProgram.java' name='generator'/>
     [java]     <meta content='Netbeans http://www.netbeans.org' name='generator'/>
     [java]     <meta content='Don Brutzman' name='creator'/>
     [java]     <meta content='https://sourceforge.net/p/x3d/code/HEAD/tree/www.web3d.org/x3d/stylesheets/java/examples/HelloWorldProgramOutput.x3d' name='reference'/>
     [java]     <meta content='Console output, ClassicVRML encoding, VRML97 encoding and pretty-print documentation:' name='reference'/>
     [java]     <meta content='HelloWorldProgramOutput.txt' name='reference'/>
     [java]     <meta content='HelloWorldProgramOutput.x3dv' name='reference'/>
     [java]     <meta content='HelloWorldProgramOutput.wrl' name='reference'/>
     [java]     <meta content='HelloWorldProgramOutput.html' name='reference'/>
     [java]     <meta content='https://savage.nps.edu/X3dValidator?url=https://www.web3d.org/specifications/java/examples/HelloWorldProgramOutput.x3d' name='reference'/>
     [java]     <meta content='https://www.web3d.org/specifications/java/examples/HelloWorldProgramOutput.x3d' name='identifier'/>
     [java]     <meta content='../license.html' name='license'/>
     [java]   </head>
     [java]   <Scene>
     [java]     <ViewpointGroup center='0 0 0' containerField='children' description='Available viewpoints' displayed='true' retainUserOffsets='false' size='0 0 0'>
     [java]       <Viewpoint DEF='DefaultView' centerOfRotation='0 0 0' containerField='children' description='Hello X3DJSAIL' fieldOfView='0.7854' jump='true' orientation='0 0 1 0' position='0 0 10' retainUserOffsets='false'/>
     [java]       <Viewpoint DEF='TopDownView' centerOfRotation='0 0 0' containerField='children' description='top-down view from above' fieldOfView='0.7854' jump='true' orientation='1 0 0 -1.570796' position='0 100 0' retainUserOffsets='false'/>
     [java]     </ViewpointGroup>
     [java]     <NavigationInfo avatarSize='0.25 1.6 0.75' containerField='children' headlight='true' speed='1' transitionTime='1.0' transitionType='"LINEAR"' type='"EXAMINE" "FLY" "ANY"' visibilityLimit='0'/>
     [java]     <WorldInfo DEF='WorldInfoDEF' containerField='children' title='HelloWorldProgram produced by X3D Java SAI Library (X3DJSAIL)'/>
     [java]     <WorldInfo USE='WorldInfoDEF' containerField='children'/>
     [java]     <WorldInfo USE='WorldInfoDEF' containerField='children'/>
     [java]     <MetadataString DEF='scene.addChildMetadata' containerField='metadata' name='test' value='"Top-level root Metadata node beneath Scene needs to be one of '-children' in JSON encoding"'/>
     [java]     <LayerSet DEF='scene.addChildLayerSetTest' activeLayer='0' containerField='children' order='0'/>
     [java]     <Transform DEF='LogoGeometryTransform' bboxCenter='0 0 0' bboxSize='-1 -1 -1' center='0 0 0' containerField='children' rotation='0 0 1 0' scale='1 1 1' scaleOrientation='0 0 1 0' translation='0 1.5 0'>
     [java]       <Anchor bboxCenter='0 0 0' bboxSize='-1 -1 -1' containerField='children' description='select for X3D Java SAI Library (X3DJSAIL) description' url='"../X3DJSAIL.html" "https://www.web3d.org/specifications/java/X3DJSAIL.html"'>
     [java]         <Shape DEF='BoxShape' bboxCenter='0 0 0' bboxSize='-1 -1 -1' containerField='children'>
     [java]           <Appearance containerField='appearance'>
     [java]             <Material DEF='GreenMaterial' ambientIntensity='0.2' containerField='material' diffuseColor='0 1 1' emissiveColor='0.8 0 0' shininess='0.2' specularColor='0 0 0' transparency='0.1'/>
     [java]             <ImageTexture containerField='texture' repeatS='true' repeatT='true' url='"images/X3dJavaSceneAccessInterfaceSaiLibrary.png" "https://www.web3d.org/specifications/java/examples/images/X3dJavaSceneAccessInterfaceSaiLibrary.png"'/>
     [java]           </Appearance>
     [java]           <Box DEF='test-NMTOKEN_regex.0123456789' class='untextured' containerField='geometry' size='2 2 2' solid='true'/>
     [java]         </Shape>
     [java]       </Anchor>
     [java]     </Transform>
     [java]     <Shape DEF='LineShape' bboxCenter='0 0 0' bboxSize='-1 -1 -1' containerField='children'>
     [java]       <Appearance containerField='appearance'>
     [java]         <Material ambientIntensity='0.2' containerField='material' diffuseColor='0.8 0.8 0.8' emissiveColor='0.6 0.19607843 0.8' shininess='0.2' specularColor='0 0 0' transparency='0'/>
     [java]       </Appearance>
     [java]       <IndexedLineSet colorPerVertex='true' containerField='geometry' coordIndex='0 1 2 3 4 0'>
     [java]         <!-- Coordinate 3-tuple point count: 6 -->
     [java]         <Coordinate containerField='coord' point='0 1.5 0 2 1.5 0 2 1.5 -2 -2 1.5 -2 -2 1.5 0 0 1.5 0'/>
     [java]       </IndexedLineSet>
     [java]     </Shape>
     [java]     <PositionInterpolator DEF='BoxPathAnimator' containerField='children' key='0 0.125 0.375 0.625 0.875 1' keyValue='0 1.5 0 2 1.5 0 2 1.5 -2 -2 1.5 -2 -2 1.5 0 0 1.5 0'/>
     [java]     <TimeSensor DEF='OrbitClock' containerField='children' cycleInterval='8.0' enabled='true' loop='true' pauseTime='0' resumeTime='0' startTime='0' stopTime='0'/>
     [java]     <ROUTE fromField='fraction_changed' fromNode='OrbitClock' toField='set_fraction' toNode='BoxPathAnimator'/>
     [java]     <ROUTE fromField='value_changed' fromNode='BoxPathAnimator' toField='set_translation' toNode='LogoGeometryTransform'/>
     [java]     <Transform DEF='TextTransform' bboxCenter='0 0 0' bboxSize='-1 -1 -1' center='0 0 0' containerField='children' rotation='0 0 1 0' scale='1 1 1' scaleOrientation='0 0 1 0' translation='0 -1.5 0'>
     [java]       <Shape bboxCenter='0 0 0' bboxSize='-1 -1 -1' containerField='children'>
     [java]         <Appearance containerField='appearance'>
     [java]           <Material USE='GreenMaterial' ambientIntensity='0.2' containerField='material' diffuseColor='0.8 0.8 0.8' emissiveColor='0 0 0' shininess='0.2' specularColor='0 0 0' transparency='0'/>
     [java]         </Appearance>
     [java]         <Text containerField='geometry' maxExtent='0.0' solid='false' string='"X3D Java" "SAI Library" "X3DJSAIL"'>
     [java]           <!-- Comment example A, plain quotation marks: He said, "Immel did it!" -->
     [java]           <!-- Comment example B, XML character entities: He said, &quot;Immel did it!&quot; -->
     [java]           <MetadataSet containerField='metadata' name='EscapedQuotationMarksMetadataSet'>
     [java]             <MetadataString containerField='value' name='quotesTestC' value='"MFString example C, backslash-escaped quotes: He said, \"Immel did it!\""'/>
     [java]             <MetadataString containerField='value' name='extraChildTest' value='"checks MetadataSetObject addValue() method"'/>
     [java]           </MetadataSet>
     [java]           <FontStyle containerField='fontStyle' family='"SERIF"' horizontal='true' justify='"MIDDLE" "MIDDLE"' leftToRight='true' size='1.0' spacing='1.0' style='PLAIN' topToBottom='true'/>
     [java]         </Text>
     [java]       </Shape>
     [java]       <Collision bboxCenter='0 0 0' bboxSize='-1 -1 -1' containerField='children' enabled='true'>
     [java]         <!-- test containerField='proxy' -->
     [java]         <Shape DEF='ProxyShape' bboxCenter='0 0 0' bboxSize='-1 -1 -1' containerField='proxy'>
     [java]           <!-- alternative XML encoding: Text string='"One, Two, Comment" "" "He said, \&quot;Immel did it!\&quot;"' -->
     [java]           <!-- alternative XML encoding: Text string='"One, Two, Comment" "" "He said, \&quot;Immel did it!\&quot;" ""' -->
     [java]           <!-- alternative Java source: .setString(new String [] {"One, Two, Comment", "", "He said, \"Immel did it!\""}) -->
     [java]           <!-- reference: https://www.web3d.org/x3d/content/examples/Basic/X3dSpecifications/StringArrayEncodingExamplesIndex.html -->
     [java]           <Text containerField='geometry' maxExtent='0.0' solid='false' string='"One, Two, Text" "" "He said, \"Immel did it!\" \"\""'/>
     [java]         </Shape>
     [java]       </Collision>
     [java]       <!-- It's a beautiful world -->
     [java]       <!-- ... for you! -->
     [java]       <!-- https://en.wikipedia.org/wiki/Beautiful_World_(Devo_song) -->
     [java]     </Transform>
     [java]     <!-- repeatedly spin 180 degrees as a readable special effect -->
     [java]     <OrientationInterpolator DEF='SpinInterpolator' containerField='children' key='0 0.5 1' keyValue='0 1 0 4.712389 0 1 0 0 0 1 0 1.5707964'/>
     [java]     <TimeSensor DEF='SpinClock' containerField='children' cycleInterval='5.0' enabled='true' loop='true' pauseTime='0' resumeTime='0' startTime='0' stopTime='0'/>
     [java]     <ROUTE fromField='fraction_changed' fromNode='SpinClock' toField='set_fraction' toNode='SpinInterpolator'/>
     [java]     <ROUTE fromField='value_changed' fromNode='SpinInterpolator' toField='rotation' toNode='TextTransform'/>
     [java]     <Group DEF='BackgroundGroup' bboxCenter='0 0 0' bboxSize='-1 -1 -1' containerField='children'>
     [java]       <Background DEF='GradualBackground' containerField='children' skyColor='0 0 0' transparency='0'/>
     [java]       <Script DEF='colorTypeConversionScript' containerField='children' directOutput='false' mustEvaluate='false'>
     [java]         <field accessType='inputOnly' name='colorInput' type='SFColor'/>
     [java]         <field accessType='outputOnly' name='colorsOutput' type='MFColor'/>
     [java]         <![CDATA[
     [java] ecmascript:
     [java] 
     [java] function colorInput (eventValue) // Example source code
     [java] {
     [java]    colorsOutput = new MFColor(eventValue); // assigning value sends output event
     [java] // Browser.print('colorInput=' + eventValue + ', colorsOutput=' + colorsOutput + '\n');
     [java] }
     [java] ]]>
     [java]       </Script>
     [java]       <ColorInterpolator DEF='ColorAnimator' containerField='children' key='0 0.5 1' keyValue='0.9411765 1 1 0.29411766 0 0.50980395 0.9411765 1 1'>
     [java]         <!-- AZURE to INDIGO and back again -->
     [java]       </ColorInterpolator>
     [java]       <TimeSensor DEF='ColorClock' containerField='children' cycleInterval='60.0' enabled='true' loop='true' pauseTime='0' resumeTime='0' startTime='0' stopTime='0'/>
     [java]       <ROUTE fromField='colorsOutput' fromNode='colorTypeConversionScript' toField='skyColor' toNode='GradualBackground'/>
     [java]       <ROUTE fromField='value_changed' fromNode='ColorAnimator' toField='colorInput' toNode='colorTypeConversionScript'/>
     [java]       <ROUTE fromField='fraction_changed' fromNode='ColorClock' toField='set_fraction' toNode='ColorAnimator'/>
     [java]     </Group>
     [java]     <ProtoDeclare appinfo='tooltip: ArtDeco01Material prototype is a Material node' name='ArtDeco01Material'>
     [java]       <ProtoInterface>
     [java]         <field accessType='inputOutput' appinfo='tooltip for descriptionField' name='description' type='SFString' value='ArtDeco01Material prototype is a Material node'/>
     [java]         <field accessType='inputOutput' name='enabled' type='SFBool' value='true'/>
     [java]       </ProtoInterface>
     [java]       <ProtoBody>
     [java]         <!-- Initial node of ProtoBody determines prototype node type -->
     [java]         <Material ambientIntensity='0.25' containerField='material' diffuseColor='0.282435 0.085159 0.134462' emissiveColor='0 0 0' shininess='0.127273' specularColor='0.276305 0.11431 0.139857' transparency='0'/>
     [java]         <!-- [HelloWorldProgram diagnostic] should be connected to scene graph: artDeco01ProtoDeclare.getNodeType()="Material" -->
     [java]         <!-- presence of follow-on TouchSensor shows that additional nodes are allowed in ProtoBody after initial node, regardless of node types -->
     [java]         <TouchSensor containerField='children' description='within ProtoBody' enabled='true'>
     [java]           <IS>
     [java]             <connect nodeField='description' protoField='description'/>
     [java]             <connect nodeField='enabled' protoField='enabled'/>
     [java]           </IS>
     [java]         </TouchSensor>
     [java]       </ProtoBody>
     [java]     </ProtoDeclare>
     [java]     <ExternProtoDeclare appinfo='this is a different Material node' name='ArtDeco02Material' url='"http://X3dGraphics.com/examples/X3dForWebAuthors/Chapter14Prototypes/ArtDecoPrototypesExcerpt.x3d#ArtDeco02Material" "http://X3dGraphics.com/examples/X3dForWebAuthors/Chapter14Prototypes/ArtDecoPrototypesExcerpt.x3dv#ArtDeco02Material"'>
     [java]       <!-- [HelloWorldProgram diagnostic] artDeco02ExternProtoDeclare.getNodeType()="ERROR_UNKNOWN_EXTERNPROTODECLARE_NODE_TYPE: ExternProtoDeclare name='ArtDeco02Material' type cannot be remotely accessed at run time. TODO X3DJSAIL needs to add further capability that retrieves the ExternProtoDeclare file." -->
     [java]       <field accessType='inputOutput' appinfo='tooltip for descriptionField' name='description' type='SFString'/>
     [java]     </ExternProtoDeclare>
     [java]     <!-- Tested ArtDeco01ProtoInstance, ArtDeco02ProtoInstance for improper node type when ProtoInstance is added in wrong place -->
     [java]     <Shape DEF='TestShape1' bboxCenter='0 0 0' bboxSize='-1 -1 -1' containerField='children'>
     [java]       <Appearance DEF='TestAppearance1' containerField='appearance'>
     [java]         <!-- ArtDeco01Material prototype goes here... TODO ensure setContainerField is handled in exported Java -->
     [java]         <ProtoInstance containerField='material' name='ArtDeco01Material'>
     [java]           <!-- [HelloWorldProgram diagnostic] ArtDeco01ProtoInstance.getNodeType()="Material" -->
     [java]           <fieldValue name='description' value='ArtDeco01Material can substitute for a Material node'/>
     [java]         </ProtoInstance>
     [java]       </Appearance>
     [java]       <Sphere containerField='geometry' radius='0.001' solid='true'/>
     [java]     </Shape>
     [java]     <Shape DEF='TestShape2' bboxCenter='0 0 0' bboxSize='-1 -1 -1' containerField='children'>
     [java]       <Appearance DEF='TestAppearance2' containerField='appearance'>
     [java]         <!-- ArtDeco02Material prototype goes here... TODO ensure setContainerField is handled in exported Java -->
     [java]         <ProtoInstance DEF='ArtDeco02MaterialDEF' containerField='material' name='ArtDeco02Material'>
     [java]           <!-- [HelloWorldProgram diagnostic] ArtDeco02ProtoInstance.getNodeType()="ERROR_UNKNOWN_EXTERNPROTODECLARE_NODE_TYPE: ExternProtoDeclare name='ArtDeco02Material' type cannot be remotely accessed at run time. TODO X3DJSAIL needs to add further capability that retrieves the ExternProtoDeclare file." -->
     [java]           <fieldValue name='description' value='ArtDeco02Material can substitute for another Material node'/>
     [java]         </ProtoInstance>
     [java]       </Appearance>
     [java]       <Cone bottom='true' bottomRadius='0.001' containerField='geometry' height='0.001' side='true' solid='true'/>
     [java]     </Shape>
     [java]     <Shape DEF='TestShape3' bboxCenter='0 0 0' bboxSize='-1 -1 -1' containerField='children'>
     [java]       <Appearance DEF='TestAppearance3' containerField='appearance'>
     [java]         <!-- ArtDeco02Material ProtoInstance USE goes here. Note that name field is NOT defined as part of ProtoInstance USE. -->
     [java]         <ProtoInstance USE='ArtDeco02MaterialDEF' containerField='material'/>
     [java]       </Appearance>
     [java]       <Cylinder bottom='true' containerField='geometry' height='0.001' radius='0.001' side='true' solid='true' top='true'/>
     [java]     </Shape>
     [java]     <Inline DEF='inlineSceneDef' bboxCenter='0 0 0' bboxSize='-1 -1 -1' containerField='children' load='true' url='"someOtherScene.x3d" "https://www.web3d.org/specifications/java/examples/someOtherScene.x3d"'/>
     [java]     <IMPORT AS='WorldInfoDEF2' importedDEF='WorldInfoDEF' inlineDEF='inlineSceneDef'/>
     [java]     <EXPORT AS='WorldInfoDEF3' localDEF='WorldInfoDEF'/>
     [java]     <ProtoDeclare appinfo='mimic a Material node and modulate fields as an animation effect' documentation='http://x3dgraphics.com/examples/X3dForWebAuthors/Chapter14Prototypes/MaterialModulatorIndex.html' name='MaterialModulator'>
     [java]       <ProtoInterface>
     [java]         <field accessType='inputOutput' name='enabled' type='SFBool' value='true'/>
     [java]         <field accessType='inputOutput' name='diffuseColor' type='SFColor' value='0 0 0'/>
     [java]         <field accessType='inputOutput' name='emissiveColor' type='SFColor' value='0.05 0.05 0.5'/>
     [java]         <field accessType='inputOutput' name='specularColor' type='SFColor' value='0 0 0'/>
     [java]         <field accessType='inputOutput' name='transparency' type='SFFloat' value='0.0'/>
     [java]         <field accessType='inputOutput' name='shininess' type='SFFloat' value='0.0'/>
     [java]         <field accessType='inputOutput' name='ambientIntensity' type='SFFloat' value='0.0'/>
     [java]       </ProtoInterface>
     [java]       <ProtoBody>
     [java]         <Material DEF='MaterialNode' ambientIntensity='0.2' containerField='material' diffuseColor='0.8 0.8 0.8' emissiveColor='0 0 0' shininess='0.2' specularColor='0 0 0' transparency='0'>
     [java]           <IS>
     [java]             <connect nodeField='diffuseColor' protoField='diffuseColor'/>
     [java]             <connect nodeField='emissiveColor' protoField='emissiveColor'/>
     [java]             <connect nodeField='specularColor' protoField='specularColor'/>
     [java]             <connect nodeField='transparency' protoField='transparency'/>
     [java]             <connect nodeField='shininess' protoField='shininess'/>
     [java]             <connect nodeField='ambientIntensity' protoField='ambientIntensity'/>
     [java]           </IS>
     [java]         </Material>
     [java]         <!-- Only first node (the node type) is renderable, others are along for the ride -->
     [java]         <Script DEF='MaterialModulatorScript' containerField='children' directOutput='false' mustEvaluate='false'>
     [java]           <field accessType='inputOutput' name='enabled' type='SFBool'/>
     [java]           <field accessType='inputOutput' name='diffuseColor' type='SFColor'/>
     [java]           <field accessType='outputOnly' name='newColor' type='SFColor'/>
     [java]           <field accessType='inputOnly' name='clockTrigger' type='SFTime'/>
     [java]           <IS>
     [java]             <connect nodeField='enabled' protoField='enabled'/>
     [java]             <connect nodeField='diffuseColor' protoField='diffuseColor'/>
     [java]           </IS>
     [java]           <![CDATA[
     [java] ecmascript:
     [java] function initialize ()
     [java] {
     [java]     newColor = diffuseColor; // start with correct color
     [java] }
     [java] function set_enabled (newValue)
     [java] {
     [java] 	enabled = newValue;
     [java] }
     [java] function clockTrigger (timeValue)
     [java] {
     [java]     if (!enabled) return;
     [java]     red   = newColor.r;
     [java]     green = newColor.g;
     [java]     blue  = newColor.b;
     [java]     
     [java]     // note different modulation rates for each color component, % is modulus operator
     [java]     newColor = new SFColor ((red + 0.02) % 1, (green + 0.03) % 1, (blue + 0.04) % 1);
     [java] 	if (enabled)
     [java] 	{
     [java] 		Browser.print ('diffuseColor=(' + red + ',' + green + ',' + blue + ') newColor=' + newColor.toString() + '\n');
     [java] 	}
     [java] }
     [java] ]]>
     [java]         </Script>
     [java]       </ProtoBody>
     [java]     </ProtoDeclare>
     [java]     <!-- Test success: declarative statement createDeclarativeShapeTests() -->
     [java]     <Group DEF='DeclarativeGroupExample' bboxCenter='0 0 0' bboxSize='-1 -1 -1' containerField='children'>
     [java]       <Shape bboxCenter='0 0 0' bboxSize='-1 -1 -1' containerField='children'>
     [java]         <MetadataString DEF='FindableMetadataStringTest' containerField='metadata' name='findThisNameValue' value='"test case"'/>
     [java]         <Appearance DEF='DeclarativeAppearanceExample' containerField='appearance'>
     [java]           <!-- DeclarativeMaterialExample gets overridden by subsequently added MaterialModulator ProtoInstance -->
     [java]           <ProtoInstance DEF='MyMaterialModulator' containerField='material' name='MaterialModulator'/>
     [java]         </Appearance>
     [java]         <Cone bottom='false' bottomRadius='0.05' containerField='geometry' height='0.1' side='true' solid='true'/>
     [java]       </Shape>
     [java]       <!-- Test success: declarativeGroup.addChild() singleton pipeline method -->
     [java]     </Group>
     [java]     <!-- Test success: declarative statement addChild() -->
     [java]     <!-- Test success: x3dModel.findNodeByDEF(DeclarativeAppearanceExample) = <Appearance DEF='DeclarativeAppearanceExample'/> i.e. <Appearance DEF='DeclarativeAppearanceExample'> <!- - DeclarativeMaterialExample gets overridden by subsequently added MaterialModulator ProtoInstance - -> <ProtoInstance DEF='MyMaterialModulator' name='MaterialModulator' containerField='material'/> </Appearance> -->
     [java]     <!-- Test success: x3dModel.findElementByNameValue(findThisNameValue) = <MetadataString DEF='FindableMetadataStringTest' name='findThisNameValue' value='"test case"'/> -->
     [java]     <!-- Test success: x3dModel.findElementByNameValue("ArtDeco01Material", "ProtoDeclare") found -->
     [java]     <!-- Test success: x3dModel.findElementByNameValue("MaterialModulator", "ProtoDeclare") found -->
     [java]     <!-- Test success: x3dModel.findElementByNameValue("MaterialModulator", "ProtoInstance") found -->
     [java]     <Group DEF='TestFieldObjectsGroup' bboxCenter='0 0 0' bboxSize='-1 -1 -1' containerField='children'>
     [java]       <!-- testFieldObjects() results -->
     [java]       <!-- SFBool default=true, true=true, false=false, negate()=true -->
     [java]       <!-- MFBool default=, initial=true false true, negate()=false true false -->
     [java]       <!-- SFFloat default=0.0, initial=1.0, setValue(2)=2.0, setValue(3.0f)=3.0, setValue(4.0)=4.0 -->
     [java]       <!-- MFFloat default=, initial=1 2 3, append(5)=1 2 3 5, inserts(3,4)(0,0)=0 1 2 3 4 5, append(6)=0 1 2 3 4 5 6, size()=7 -->
     [java]       <!-- ... get1Value[3]=3.0, remove[1]=0 2 3 4 5 6, set1Value(0,10)=10 2 3 4 5 6, multiply(2)=20 4 6 8 10 12, clear= -->
     [java]       <!-- SFVec3f default=0 0 0, initial=1 2 3, setValue=4 5 6, multiply(2)=8 10 12, normalize()=0.45584232 0.5698029 0.68376344, regex matches()=true -->
     [java]       <!-- regex test SFVec3f().matches("1 2 3")=true, regex test SFVec3f().matches("1 2 3 4")=false, regex test (SFRotationObject.matches("0 0 0 0")=true, failure detecting illegal (zero axis) rotation value -->
     [java]     </Group>
     [java]     <Sound containerField='children' direction='0 0 1' intensity='1' location='0 1.6 0' maxBack='10' maxFront='10' minBack='1' minFront='1' priority='0' spatialize='true'>
     [java]       <!-- set sound-ellipsoid location height at 1.6m to match typical avatar height -->
     [java]       <AudioClip containerField='source' description='chimes' loop='false' pauseTime='0' pitch='1.0' resumeTime='0' startTime='0' stopTime='0' url='"chimes.wav" "https://www.web3d.org/x3d/content/examples/ConformanceNist/Sounds/AudioClip/chimes.wav"'>
     [java]         <!-- Scene example fragment from https://www.web3d.org/x3d/content/examples/ConformanceNist/Sounds/AudioClip/default.x3d -->
     [java]       </AudioClip>
     [java]     </Sound>
     [java]     <Sound containerField='children' direction='0 0 1' intensity='1' location='0 1.6 0' maxBack='10' maxFront='10' minBack='1' minFront='1' priority='0' spatialize='true'>
     [java]       <!-- set sound-ellipsoid location height at 1.6m to match typical avatar height -->
     [java]       <MovieTexture containerField='source' description='mpgsys.mpg from ConformanceNist suite' loop='false' pauseTime='0' repeatS='true' repeatT='true' resumeTime='0' speed='1.0' startTime='0' stopTime='0' url='"mpgsys.mpg" "https://www.web3d.org/x3d/content/examples/ConformanceNist/Appearance/MovieTexture/mpgsys.mpg"'>
     [java]         <!-- Scene example fragment from https://www.web3d.org/x3d/content/examples/ConformanceNist/Appearance/MovieTexture/mpeg1-systems.x3d -->
     [java]         <!-- Expected containerField='source', allowed containerField values="texture" "source" "back" "bottom" "front" "left" "right" "top" "backTexture" "bottomTexture" "frontTexture" "leftTexture" "rightTexture" "topTexture" "watchList" -->
     [java]       </MovieTexture>
     [java]     </Sound>
     [java]     <!-- Test success: AnchorObject.isNode()=true, siteAnchor.isNode()=true -->
     [java]     <!-- Test success: AnchorObject.isStatement()=false, siteAnchor.isStatement()=false -->
     [java]     <!-- Test success: ROUTEObject.isNode()=false, orbitPositionROUTE.isNode()=false -->
     [java]     <!-- Test success: ROUTEObject.isStatement()=true, orbitPositionROUTE.isStatement()=true -->
     [java]     <!-- Test success: CommentsBlock.isNode()=false, testComments.isNode()=false -->
     [java]     <!-- Test failure: CommentsBlock.isStatement()=true, testComments.isStatement()=true -->
     [java]     <Shape DEF='ExtrusionShape' bboxCenter='0 0 0' bboxSize='-1 -1 -1' containerField='children'>
     [java]       <!-- ExampleExtrusion isCrossSectionClosed()=true, crossSection='[1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0]' -->
     [java]       <!-- ExampleExtrusion isSpineClosed()=false, spine='[0.0, 0.0, 0.0, 0.0, 1.0, 0.0]' -->
     [java]       <Appearance DEF='TransparentAppearance' containerField='appearance'>
     [java]         <Material ambientIntensity='0.2' containerField='material' diffuseColor='0.8 0.8 0.8' emissiveColor='0 0 0' shininess='0.2' specularColor='0 0 0' transparency='1.0'/>
     [java]       </Appearance>
     [java]       <Extrusion DEF='ExampleExtrusion' beginCap='true' ccw='true' containerField='geometry' convex='true' creaseAngle='0.0' crossSection='1 1 1 -1 -1 -1 -1 1 1 1' endCap='true' orientation='0 0 1 0' scale='1 1' solid='true' spine='0 0 0 0 1 0'/>
     [java]     </Shape>
     [java]     <Group bboxCenter='0 0 0' bboxSize='-1 -1 -1' containerField='children'>
     [java]       <!-- Test MFNode children array as an ordered list consisting of comments, statements, ProtoInstance and nodes -->
     [java]       <ProtoDeclare name='NewWorldInfo'>
     [java]         <ProtoInterface>
     [java]           <field accessType='initializeOnly' name='description' type='SFString'/>
     [java]         </ProtoInterface>
     [java]         <ProtoBody>
     [java]           <WorldInfo containerField='children'/>
     [java]         </ProtoBody>
     [java]       </ProtoDeclare>
     [java]       <ProtoInstance DEF='Proto1' containerField='children' name='NewWorldInfo'>
     [java]         <fieldValue name='description' value='testing 1 2 3'/>
     [java]       </ProtoInstance>
     [java]       <Group DEF='Node2' bboxCenter='0 0 0' bboxSize='-1 -1 -1' containerField='children'>
     [java]         <!-- intentionally empty -->
     [java]       </Group>
     [java]       <ProtoInstance DEF='Proto3' containerField='children' name='NewWorldInfo'/>
     [java]       <Transform DEF='Node4' bboxCenter='0 0 0' bboxSize='-1 -1 -1' center='0 0 0' containerField='children' rotation='0 0 1 0' scale='1 1 1' scaleOrientation='0 0 1 0' translation='0 0 0'>
     [java]         <!-- intentionally empty -->
     [java]       </Transform>
     [java]       <!-- Test satisfactorily creates MFNode children array as an ordered list with mixed content -->
     [java]     </Group>
     [java]     <ProtoDeclare name='ShaderProto'>
     [java]       <ProtoBody>
     [java]         <ProgramShader containerField='shaders'/>
     [java]       </ProtoBody>
     [java]     </ProtoDeclare>
     [java]     <Shape bboxCenter='0 0 0' bboxSize='-1 -1 -1' containerField='children'>
     [java]       <Appearance containerField='appearance'>
     [java]         <!-- Test MFNode shaders array as an ordered list consisting of comments, ProtoInstance and nodes -->
     [java]         <!-- Test satisfactorily creates MFNode shaders array as an ordered list with mixed content -->
     [java]         <ProgramShader DEF='TestShader1' containerField='shaders'>
     [java]           <ShaderProgram DEF='TestShader2' containerField='programs' type='VERTEX'/>
     [java]         </ProgramShader>
     [java]         <ProtoInstance DEF='TestShader3' containerField='shaders' name='ShaderProto'/>
     [java]         <ComposedShader DEF='TestShader4' containerField='shaders'>
     [java]           <ShaderPart DEF='TestShader5' containerField='parts' type='VERTEX'/>
     [java]         </ComposedShader>
     [java]       </Appearance>
     [java]     </Shape>
     [java]     <Transform DEF='SpecialtyNodes' bboxCenter='0 0 0' bboxSize='-1 -1 -1' center='0 0 0' containerField='children' rotation='0 0 1 0' scale='1 1 1' scaleOrientation='0 0 1 0' translation='0 0 0'>
     [java]       <CADLayer bboxCenter='0 0 0' bboxSize='-1 -1 -1' containerField='children'>
     [java]         <CADAssembly bboxCenter='0 0 0' bboxSize='-1 -1 -1' containerField='children'>
     [java]           <CADPart bboxCenter='0 0 0' bboxSize='-1 -1 -1' center='0 0 0' containerField='children' rotation='0 0 1 0' scale='1 1 1' scaleOrientation='0 0 1 0' translation='0 0 0'>
     [java]             <CADFace bboxCenter='0 0 0' bboxSize='-1 -1 -1' containerField='children'/>
     [java]           </CADPart>
     [java]         </CADAssembly>
     [java]       </CADLayer>
     [java]       <EspduTransform address='localhost' applicationID='0' articulationParameterCount='0' bboxCenter='0 0 0' bboxSize='-1 -1 -1' center='0 0 0' collisionType='0' containerField='children' deadReckoning='0' detonationLocation='0 0 0' detonationRelativeLocation='0 0 0' detonationResult='0' enabled='true' entityCategory='0' entityCountry='0' entityDomain='0' entityExtra='0' entityID='0' entityKind='0' entitySpecific='0' entitySubcategory='0' eventApplicationID='0' eventEntityID='0' eventNumber='0' eventSiteID='0' fireMissionIndex='0' fired1='false' fired2='false' firingRange='0' firingRate='0' forceID='0' fuse='0' geoCoords='0 0 0' geoSystem='"GD" "WE"' linearAcceleration='0 0 0' linearVelocity='0 0 0' multicastRelayPort='0' munitionApplicationID='0' munitionEndPoint='0 0 0' munitionEntityID='0' munitionQuantity='0' munitionSiteID='0' munitionStartPoint='0 0 0' networkMode='standAlone' port='0' readInterval='0.1' rotation='0 0 1 0' rtpHeaderExpected='false' scale='1 1 1' scaleOrientation='0 0 1 0' siteID='0' translation='0 0 0' warhead='0' writeInterval='1.0'/>
     [java]       <ReceiverPdu address='localhost' applicationID='0' bboxCenter='0 0 0' bboxSize='-1 -1 -1' containerField='children' enabled='true' entityID='0' geoCoords='0 0 0' geoSystem='"GD" "WE"' multicastRelayPort='0' networkMode='standAlone' port='0' radioID='0' readInterval='0.1' receivedPower='0.0' receiverState='0' rtpHeaderExpected='false' siteID='0' transmitterApplicationID='0' transmitterEntityID='0' transmitterRadioID='0' transmitterSiteID='0' whichGeometry='1' writeInterval='1.0'/>
     [java]       <SignalPdu address='localhost' applicationID='0' bboxCenter='0 0 0' bboxSize='-1 -1 -1' containerField='children' dataLength='0' enabled='true' encodingScheme='0' entityID='0' geoCoords='0 0 0' geoSystem='"GD" "WE"' multicastRelayPort='0' networkMode='standAlone' port='0' radioID='0' readInterval='0.1' rtpHeaderExpected='false' sampleRate='0' samples='0' siteID='0' tdlType='0' whichGeometry='1' writeInterval='1.0'/>
     [java]       <TransmitterPdu address='localhost' antennaLocation='0 0 0' antennaPatternLength='0' antennaPatternType='0' applicationID='0' bboxCenter='0 0 0' bboxSize='-1 -1 -1' containerField='children' cryptoKeyID='0' cryptoSystem='0' enabled='true' entityID='0' frequency='0' geoCoords='0 0 0' geoSystem='"GD" "WE"' inputSource='0' lengthOfModulationParameters='0' modulationTypeDetail='0' modulationTypeMajor='0' modulationTypeSpreadSpectrum='0' modulationTypeSystem='0' multicastRelayPort='0' networkMode='standAlone' port='0' power='0.0' radioEntityTypeCategory='0' radioEntityTypeCountry='0' radioEntityTypeDomain='0' radioEntityTypeKind='0' radioEntityTypeNomenclature='0' radioEntityTypeNomenclatureVersion='0' radioID='0' readInterval='0.1' relativeAntennaLocation='0 0 0' rtpHeaderExpected='false' siteID='0' transmitFrequencyBandwidth='0.0' transmitState='0' whichGeometry='1' writeInterval='1.0'/>
     [java]       <DISEntityManager address='localhost' applicationID='0' containerField='children' port='0' siteID='0'>
     [java]         <DISEntityTypeMapping category='0' containerField='mapping' country='0' domain='0' extra='0' kind='0' specific='0' subcategory='0'/>
     [java]       </DISEntityManager>
     [java]     </Transform>
     [java]   </Scene>
     [java] </X3D>
     [java] ===========================================
     [java] Test success: x3dLoader.getDomDocument() and x3dLoader.toStringX3D(domDocument)
     [java] Now test x3dLoader.toX3dObjectTree(domDocument)
     [java] [X3DLoaderDOM] <meta name='info' content='continued development and testing in progress'/>
     [java] Warning: toFileX3D() is overwriting prior file HelloWorldProgramOutput_ReloadedDOM.x3d
     [java] Test success: x3dLoader.toX3dObjectTree(domDocument), save HelloWorldProgramOutput_ReloadedDOM.x3d
     [java] x3dLoader validation result: no issues reported.
     [java] ===========================================
     [java] Test loadModelFromFileX3D(String) and loadModelFromFileX3D(File)
     [java] checking both .x3d and .xml encodings:
     [java] [X3DLoaderDOM] <meta name='info' content='continued development and testing in progress'/>
     [java] [X3DLoaderDOM] <meta name='info' content='continued development and testing in progress'/>
     [java] newX3DModel loadSuccess=true, isEmpty()=false, validate()=success
     [java] ===========================================
     [java] ===========================================
     [java] Check file sizes for various forms of compression
     [java] Source file HelloWorldProgramOutput.x3d 22321 bytes
     [java] ===========================================
     [java] Test toFileEXI() with EXIficient
     [java] HelloWorldProgramOutput_EXIFICIENT.exi  filesize 3333 bytes, compression 14.93% of original
     [java] ===========================================
     [java] Test fromFileEXI() with EXIficient
     [java] Warning: fromFileEXI() is overwriting prior file HelloWorldProgramOutput_EXIFICIENT.exi
     [java] EXI decompressed examples\temp.exiInputTransformed.x3d size=22454 bytes
     [java] [X3DLoaderDOM] <meta name='info' content='continued development and testing in progress'/>
     [java]   fromFileEXIsuccess=true for HelloWorldProgramOutput_EXIFICIENT.exi
     [java] exiModel.validate() results:  success
     [java] ===========================================
     [java] Test toFileEXI() with OpenEXI: testing in progress
     [java] HelloWorldProgramOutputOPENEXI.exi  filesize 3333 bytes, compression 14.93% of original
     [java] ===========================================
     [java] Test fromFileEXI() with OpenEXI: TODO testing in progress, not fully implemented yet
     [java] ===========================================
     [java] Test toFileGZIP()
     [java] HelloWorldProgramOutput.gz  filesize 5994 bytes, compression 26.85% of original
     [java] ===========================================
     [java] Test toFileZip()
     [java] HelloWorldProgramOutput.zip filesize 6251 bytes, compression 28.01% of original
     [java] ===========================================
     [java] ===========================================
     [java] Test CommandLine invocations
     [java] CommandLine [-help]
     [java] Usage: java [-classpath X3DJSAIL.*.jar] org.web3d.x3d.jsail.CommandLine
     [java]        [-help | -version | -home | -javadoc | -resources | -hints | -regexes | -tooltips | -X3DUOM]
     [java]        [-properties [propertiesFile]]
     [java]        [sourceModel.x3d | sourceModel.exi [-fromEXI] | sourceModel.gz [-fromGZIP] | sourceModel.zip [-fromZIP]]
     [java]        [-canonical] [-validate] [-EXIFICIENT | -OpenEXI]
     [java]        [-Tidy | -toX3D | -toXML | -toClassicVrml | -toJava | -toJSON | -toPython | -toVRML97]
     [java]        [-toHTML | -toX3DOM | -toX_ITE | -toMarkdown | -toEXI | -toGZIP | -toZIP]
     [java]        [-tofile [resultFile.*]] [-toImage [snapshotName.*]]
     [java] 
     [java] -classpath X3DJSAIL.*.jar         # optional classpath, can be set as environment variable
     [java] org.web3d.x3d.jsail.CommandLine   # invoke CommandLine application
     [java] ==================================#====== informational ======================
     [java] -help                             # provide this help message
     [java] -version                          # version date when this X3DJSAIL build was autogenerated
     [java] -home                             # launch X3DJSAIL home page
     [java] -javadoc                          # launch X3DJSAIL javadoc page
     [java] -resources                        # launch X3D Resources page
     [java] -hints                            # launch X3D Scene Authoring Hints page
     [java] -regex                            # launch X3D Regular Expressions page
     [java] -tooltips                         # launch X3D Tooltips page
     [java] -X3DUOM                           # launch X3D Unified Object Model (X3DUOM) page
     [java]  =================================#====== properties, inputs =================
     [java] -properties [propertiesFile]      # override X3DJSAIL properties (default file: X3DJSAIL.properties)
     [java] -EXIFICIENT                       # use Exificient (default) as EXI_ENGINE
     [java] -OpenEXI                          # use OpenEXI (Nagasena)   as EXI_ENGINE (testing in progress)
     [java] sourceModel.x3d                   # source model file name, X3D  format
     [java] sourceModel.exi [-fromEXI]        # source model file name, EXI  format
     [java] sourceModel.gz  [-fromGZIP]       # source model file name, GZIP format
     [java] sourceModel.zip [-fromZIP]        # source model file name, ZIP  format
     [java] ==================================#====== operations =========================
     [java] -canonical                        # canonical XML output using X3D Canonicalization (c14n)
     [java] -validate                         # validate correctness of loaded model
     [java] -Tidy                             # X3D-Tidy cleanup in .x3d (XML) format
     [java] -toX3D                            # output in .x3d (XML) format
     [java] -toXML                            # output in .xml (X3D) format
     [java] -toClassicVrml                    # output in .x3dv (ClassicVrml) X3D format
     [java] -toJava                           # output in .java source code using X3DJSAIL
     [java] -toJSON                           # output in .json (JavaScript Object Notation) format
     [java] -toPython                         # output in .py Python source code
     [java] -toVRML97                         # output in .wrl  (VRML97) format
     [java] -toHTML                           # output in .html  pretty-print documentation
     [java] -toX3DOM                          # output in .xhtml page with X3DOM display of X3D model
     [java] -toX_ITE                          # output in .html  page with X_ITE display of X3D model
     [java] -toMarkdown                       # output document metadata (meta tags) in .md (Markdown) format
     [java] -toEXI                            # output in .exi (Efficient XML Interchange) compressed-XML format
     [java] -toGZIP                           # output in .gz  (X3D XML) format, with gzip compression
     [java] -toZIP                            # output in .zip (X3D XML) format, with zip  compression
     [java] ==================================#====== outputs ============================
     [java] -tofile  [resultFile.*]           # specify output filename (otherwise original name with extension)
     [java] -toImage [snapshotName.*]         # create output images for each Viewpoint using Blender
     [java] 
     [java] ===========================================
     [java] CommandLine [HelloWorldProgramOutput.x3d, -canonicalize, -toFile, HelloWorldProgramOutputCanonical.xml]
     [java] parameter: source file HelloWorldProgramOutput.x3d filesize 22321 bytes
     [java] CommandLine parameter: "-canonicalize" for X3D and XML canonicalization (C14N)
     [java] CommandLine parameter: "-toFile" "HelloWorldProgramOutputCanonical.xml" for result file name root HelloWorldProgramOutputCanonical
     [java] CommandLine invocation: new X3dCanonicalizer(C:\x3d-code\www.web3d.org\x3d\stylesheets\java\classes\HelloWorldProgramOutput.x3d,HelloWorldProgramOutputCanonical.xml)
     [java]  INFO [main] (X3dHeaderChecker.java:446) - final canonical 3.3 DOCTYPE found
     [java]  INFO [main] (X3dHeaderChecker.java:553) - -f final DTD was set, no action taken
     [java]  INFO [main] (X3dHeaderChecker.java:647) - Scene "C:/x3d-code/www.web3d.org/x3d/stylesheets/java/classes/HelloWorldProgramOutput.x3d" was not modified
     [java] ...x3dCanonicalizer.isCanonical()=false
     [java] Warning: x3dCanonicalizer is overwriting prior file HelloWorldProgramOutputCanonical.xml
     [java] now check result...
     [java] CommandLine [HelloWorldProgramOutputCanonical.xml, -validate]
     [java] parameter: source file HelloWorldProgramOutputCanonical.xml filesize 22338 bytes
     [java] CommandLine parameter: "-validate" for model validation
     [java] Parsing using Document Object Model (DOM) based X3DLoaderDOM...
     [java] [X3DLoaderDOM] <meta name='info' content='continued development and testing in progress'/>
     [java] validate results: success, no problems noted
     [java] ===========================================
     [java] CommandLine [HelloWorldProgramOutput.x3d, -toX3D, -toFile, HelloWorldProgramOutput_CommandLine.x3d]
     [java] parameter: source file HelloWorldProgramOutput.x3d filesize 22321 bytes
     [java] CommandLine parameter: "-toX3D" for conversion to X3D encoding
     [java] CommandLine parameter: "-toFile" "HelloWorldProgramOutput_CommandLine.x3d" for result file name root HelloWorldProgramOutput_CommandLine
     [java] Parsing using Document Object Model (DOM) based X3DLoaderDOM...
     [java] [X3DLoaderDOM] <meta name='info' content='continued development and testing in progress'/>
     [java] convert to X3D:
     [java] Warning: toFileX3D() is overwriting prior file HelloWorldProgramOutput_CommandLine.x3d
     [java] file conversion successful: HelloWorldProgramOutput_CommandLine.x3d (22321 bytes)
     [java] ===========================================
     [java] CommandLine [HelloWorldProgramOutput.x3d, -toVRML97, -toFile, HelloWorldProgramOutput_CommandLine.wrl]
     [java] parameter: source file HelloWorldProgramOutput.x3d filesize 22321 bytes
     [java] CommandLine parameter: "-toVRML97" for conversion to VRML97 encoding
     [java] CommandLine parameter: "-toFile" "HelloWorldProgramOutput_CommandLine.wrl" for result file name root HelloWorldProgramOutput_CommandLine
     [java] convert to VRML97:
     [java] [Error] illegal <component name='Layering'/>
     [java] [Info] <meta name='info' content='continued development and testing in progress'/>
     [java] [Warning] Metadata nodes are not supported as a child of current node Text in VRML97 encoding.  The child MetadataSet node has been moved to immediately follow the parent Text. [check X3D source or VRML output to find questionable &lt;Text/&gt; with parent Shape]
     [java] [Warning] IS/connect ignored for nodeField='description' since not a supported field in VRML97 for parent TouchSensor [check X3D source or VRML output to find questionable TouchSensor]
     [java] [Warning] Script field 'enabled' has accessType 'inputOutput' (exposedField), which is only allowed in X3D Script node, not VRML97 Script node.  Using exposedField anyway, may cause errors. [field 'enabled' parent  DEF='MaterialModulatorScript']
     [java] [Warning] Script field 'diffuseColor' has accessType 'inputOutput' (exposedField), which is only allowed in X3D Script node, not VRML97 Script node.  Using exposedField anyway, may cause errors. [field 'diffuseColor' parent  DEF='MaterialModulatorScript']
     [java] [Warning] Metadata nodes are not supported as a child of current node Shape in VRML97 encoding.  The child MetadataString node has been moved to immediately follow the parent Shape. [check X3D source or VRML output to find questionable &lt;Shape/&gt; with parent Group]
     [java] [Warning] ProtoInterface <field name='description'/> is unreferenced in ProtoBody with no corresponding IS/connect/@protoField [check X3D source or VRML output to find questionable field 'description' parent ProtoDeclare NewWorldInfo]
     [java] Warning: fileStylesheetConversion() is overwriting prior file HelloWorldProgramOutput_CommandLine.wrl
     [java] ===========================================
     [java] CommandLine [HelloWorldProgramOutput.x3d, -toX3DV, -toFile, HelloWorldProgramOutput_CommandLine.x3dv]
     [java] parameter: source file HelloWorldProgramOutput.x3d filesize 22321 bytes
     [java] CommandLine parameter: "-toX3DV" for conversion to ClassicVRML encoding
     [java] CommandLine parameter: "-toFile" "HelloWorldProgramOutput_CommandLine.x3dv" for result file name root HelloWorldProgramOutput_CommandLine
     [java] convert to ClassicVRML:
     [java] Warning: fileStylesheetConversion() is overwriting prior file HelloWorldProgramOutput_CommandLine.x3dv
     [java] ===========================================
     [java] CommandLine [HelloWorldProgramOutput.x3d, -toMarkdown, -toFile, HelloWorldProgramOutputCatalog.md]
     [java] parameter: source file HelloWorldProgramOutput.x3d filesize 22321 bytes
     [java] CommandLine parameter: "-toMarkdown" for producing .md model meta information markdown
     [java] CommandLine parameter: "-toFile" "HelloWorldProgramOutputCatalog.md" for result file name root HelloWorldProgramOutputCatalog
     [java] convert to .md model meta information markdown, include subdirectories in meta links: true
     [java] Warning: fileStylesheetConversion() is overwriting prior file HelloWorldProgramOutputCatalog.md
     [java] ===========================================
     [java] CommandLine [HelloWorldProgramOutput.x3d, -toMarkdown, -toFile, HelloWorldProgramOutput.md]
     [java] parameter: source file HelloWorldProgramOutput.x3d filesize 22321 bytes
     [java] CommandLine parameter: "-toMarkdown" for producing .md model meta information markdown
     [java] CommandLine parameter: "-toFile" "HelloWorldProgramOutput.md" for result file name root HelloWorldProgramOutput
     [java] convert to .md model meta information markdown, include subdirectories in meta links: true
     [java] Warning: fileStylesheetConversion() is overwriting prior file HelloWorldProgramOutput.md
     [java] ===========================================
     [java] CommandLine [HelloWorldProgramOutput.x3d, -EXIFICIENT, -toEXI, -toFile, HelloWorldProgramOutput_CommandLine_EXIFICIENT.exi]
     [java] parameter: source file HelloWorldProgramOutput.x3d filesize 22321 bytes
     [java] CommandLine parameter: "-EXIFICIENT" invoked ConfigurationProperties.setExiEngine(EXIFICIENT);
     [java] CommandLine parameter: "-toEXI" for conversion to compressed EXI containing model
     [java] CommandLine parameter: "-toFile" "HelloWorldProgramOutput_CommandLine_EXIFICIENT.exi" for result file name root HelloWorldProgramOutput_CommandLine_EXIFICIENT
     [java] Parsing using Document Object Model (DOM) based X3DLoaderDOM...
     [java] [X3DLoaderDOM] <meta name='info' content='continued development and testing in progress'/>
     [java] convert to EXI using EXIFICIENT:
     [java] source: HelloWorldProgramOutput.x3d filesize 22321 bytes
     [java] result: HelloWorldProgramOutput_CommandLine_EXIFICIENT.exi filesize 3333 bytes, compression 14.93% of original
     [java] ===========================================
     [java] CommandLine [HelloWorldProgramOutput_CommandLine_EXIFICIENT.exi, -EXIFICIENT, -fromEXI, -toFile, HelloWorldProgramOutput_CommandLine_EXIFICIENT.RoundTrip.x3d]
     [java] parameter: source file HelloWorldProgramOutput_CommandLine_EXIFICIENT.exi filesize 3333 bytes
     [java] CommandLine parameter: "-EXIFICIENT" invoked ConfigurationProperties.setExiEngine(EXIFICIENT);
     [java] CommandLine parameter: "-fromEXI" for conversion from compressed EXI containing model
     [java] CommandLine parameter: "-toFile" "HelloWorldProgramOutput_CommandLine_EXIFICIENT.RoundTrip.x3d" for result file name root HelloWorldProgramOutput_CommandLine_EXIFICIENT.RoundTrip
     [java] Warning: fromFileEXI() is overwriting prior file HelloWorldProgramOutput_CommandLine_EXIFICIENT.exi
     [java] EXI decompressed examples\temp.exiInputTransformed.x3d size=22454 bytes
     [java] [X3DLoaderDOM] <meta name='info' content='continued development and testing in progress'/>
     [java] load success: true
     [java] ===========================================
     [java] CommandLine [HelloWorldProgramOutput.x3d, -OpenEXI, -toEXI, -toFile, HelloWorldProgramOutput_CommandLine.OPENEXI.exi]
     [java] parameter: source file HelloWorldProgramOutput.x3d filesize 22321 bytes
     [java] CommandLine parameter: "-OpenEXI" invoked ConfigurationProperties.setExiEngine(OPENEXI);
     [java]   Warning: "OPENEXI" testing in progress, can also use EXIFICIENT instead.
     [java] CommandLine parameter: "-toEXI" for conversion to compressed EXI containing model
     [java] CommandLine parameter: "-toFile" "HelloWorldProgramOutput_CommandLine.OPENEXI.exi" for result file name root HelloWorldProgramOutput_CommandLine.OPENEXI
     [java] Parsing using Document Object Model (DOM) based X3DLoaderDOM...
     [java] [X3DLoaderDOM] <meta name='info' content='continued development and testing in progress'/>
     [java] convert to EXI using OPENEXI:
     [java] source: HelloWorldProgramOutput.x3d filesize 22321 bytes
     [java] result: HelloWorldProgramOutput_CommandLine.OPENEXI.exi filesize 3389 bytes, compression 15.18% of original
     [java] ===========================================
     [java] CommandLine [HelloWorldProgramOutput_CommandLine.OPENEXI.exi, -OpenEXI, -fromEXI, -toFile, HelloWorldProgramOutput_CommandLine.OPENEXI.RoundTrip.x3d]
     [java] parameter: source file HelloWorldProgramOutput_CommandLine.OPENEXI.exi filesize 3389 bytes
     [java] CommandLine parameter: "-OpenEXI" invoked ConfigurationProperties.setExiEngine(OPENEXI);
     [java]   Warning: "OPENEXI" testing in progress, can also use EXIFICIENT instead.
     [java] CommandLine parameter: "-fromEXI" for conversion from compressed EXI containing model
     [java] CommandLine parameter: "-toFile" "HelloWorldProgramOutput_CommandLine.OPENEXI.RoundTrip.x3d" for result file name root HelloWorldProgramOutput_CommandLine.OPENEXI.RoundTrip
     [java] Warning: fromFileEXI() is overwriting prior file HelloWorldProgramOutput_CommandLine.OPENEXI.exi
     [java] EXI decompressed examples\temp.exiInputTransformed.x3d size=22591 bytes
     [java] [X3DLoaderDOM] <meta name='info' content='continued development and testing in progress'/>
     [java] load success: true
     [java] ===========================================
     [java] CommandLine [HelloWorldProgramOutput.x3d, -toGZIP, -toFile, HelloWorldProgramOutput_CommandLine.x3d.gz]
     [java] parameter: source file HelloWorldProgramOutput.x3d filesize 22321 bytes
     [java] CommandLine parameter: "-toGZIP" for conversion to compressed GZIP containing model
     [java] CommandLine parameter: "-toFile" "HelloWorldProgramOutput_CommandLine.x3d.gz" for result file name root HelloWorldProgramOutput_CommandLine.x3d
     [java] Parsing using Document Object Model (DOM) based X3DLoaderDOM...
     [java] [X3DLoaderDOM] <meta name='info' content='continued development and testing in progress'/>
     [java] convert to GZIP:
     [java] source: HelloWorldProgramOutput.x3d filesize 22321 bytes
     [java] result: HelloWorldProgramOutput_CommandLine.x3d.gz  filesize 5994 bytes, compression 26.85% of original
     [java] ===========================================
     [java] CommandLine [HelloWorldProgramOutput_CommandLine.x3d.gz, -fromGZIP]
     [java] parameter: source file HelloWorldProgramOutput_CommandLine.x3d.gz filesize 5994 bytes
     [java] CommandLine parameter: "-fromGZIP" for conversion from compressed GZIP containing model
     [java]   fromFileGZIP() output modelFileName HelloWorldProgramOutput_CommandLine.x3d
     [java] Warning: fromFileGZIP() is overwriting prior file HelloWorldProgramOutput_CommandLine.x3d
     [java] gunzipped HelloWorldProgramOutput_CommandLine.x3d size=22321 bytes
     [java] [X3DLoaderDOM] <meta name='info' content='continued development and testing in progress'/>
     [java] load success: true
     [java] ===========================================
     [java] CommandLine [HelloWorldProgramOutput.x3d, -toZIP, -toFile, HelloWorldProgramOutput_CommandLine.x3d.zip]
     [java] parameter: source file HelloWorldProgramOutput.x3d filesize 22321 bytes
     [java] CommandLine parameter: "-toZIP" for conversion to compressed ZIP containing model
     [java] CommandLine parameter: "-toFile" "HelloWorldProgramOutput_CommandLine.x3d.zip" for result file name root HelloWorldProgramOutput_CommandLine.x3d
     [java] Parsing using Document Object Model (DOM) based X3DLoaderDOM...
     [java] [X3DLoaderDOM] <meta name='info' content='continued development and testing in progress'/>
     [java] convert to ZIP:
     [java] source: HelloWorldProgramOutput.x3d filesize 22321 bytes
     [java] result: HelloWorldProgramOutput_CommandLine.x3d.zip filesize 6251 bytes, compression 28.01% of original
     [java] ===========================================
     [java] CommandLine [HelloWorldProgramOutput_CommandLine.x3d.zip, -fromZIP, -toFile, HelloWorldProgramOutput_CommandLineUnzipped.x3d]
     [java] parameter: source file HelloWorldProgramOutput_CommandLine.x3d.zip filesize 6251 bytes
     [java] CommandLine parameter: "-fromZIP" for conversion from compressed ZIP containing model
     [java] CommandLine parameter: "-toFile" "HelloWorldProgramOutput_CommandLineUnzipped.x3d" for result file name root HelloWorldProgramOutput_CommandLineUnzipped
     [java] Warning: fromFileZIP() modelFileName was empty, unzipping found initial X3D file to load: HelloWorldProgramOutput.x3d
     [java] Warning: fromFileZIP() is overwriting prior file HelloWorldProgramOutput_CommandLineUnzipped.x3d
     [java] Unzipped HelloWorldProgramOutput_CommandLineUnzipped.x3d size=22321 bytes
     [java] [X3DLoaderDOM] <meta name='info' content='continued development and testing in progress'/>
     [java] Exception in thread "main" org.web3d.x3d.sai.InvalidFieldValueException: Invalid setBlenderPath(String newValue) invocation, newValue='C:\Program Files\Blender Foundation\Blender', blender.exe not found at this location
     [java] 	at org.web3d.x3d.jsail.BlenderLauncher.setBlenderPath(BlenderLauncher.java:173)
     [java] 	at org.web3d.x3d.jsail.BlenderLauncher.checkBlenderPath(BlenderLauncher.java:506)
     [java] 	at HelloWorldProgram.testBlenderLauncher(HelloWorldProgram.java:1615)
     [java] 	at HelloWorldProgram.<init>(HelloWorldProgram.java:96)
     [java] 	at HelloWorldProgram.main(HelloWorldProgram.java:114)
     [java] load success: true
     [java] ===========================================
     [java] ConfigurationProperties.setDebugModeActive(true);
     [java] x3dModel.validate() results with ConfigurationProperties.setDebugModeActive(true): 
     [java] ProtoInstance ArtDeco01Material DEF='' has corresponding ProtoDeclare
     [java] ProtoInstance ArtDeco02Material DEF='ArtDeco02MaterialDEF' has corresponding ExternProtoDeclare (but node type is unconfirmed)
     [java] ProtoInstance MaterialModulator DEF='MyMaterialModulator' has corresponding ProtoDeclare
     [java] ProtoInstance NewWorldInfo DEF='Proto1' has corresponding ProtoDeclare
     [java] ProtoInstance NewWorldInfo DEF='Proto3' has corresponding ProtoDeclare
     [java] ProtoInstance ShaderProto DEF='TestShader3' has corresponding ProtoDeclare
     [java] 
     [java] ===========================================
     [java] HelloWorldProgram complete.
     [java] ===========================================
     [java] testBlenderLauncher();  // check Blender capabilities
     [java] BlenderLauncher.run("-help")
     [java] Usage: java [-classpath X3DJSAIL.*.jar] org.web3d.x3d.jsail.BlenderLauncher sourceFile [-convert [resultFile]] [-toImage [snapshotName.*]] [-home | -help | -properties fileName.properties | -BLENDER_PATH directoryPath]
     [java] http://www.blender.org
     [java] ===========================================
     [java] Blender default path=[not set]
     [echo] run.examples complete

all:

BUILD SUCCESSFUL
Total time: 22 seconds
